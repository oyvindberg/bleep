"use strict";(self.webpackChunkbleep_site=self.webpackChunkbleep_site||[]).push([[634],{915:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var o=n(7462),a=(n(7294),n(3905));var s=n(814);const i={},r="But my build does much more!",l={unversionedId:"my-build-does-more",id:"my-build-does-more",title:"But my build does much more!",description:"Yes, your build does other things.",source:"@site/docs/my-build-does-more.mdx",sourceDirName:".",slug:"/my-build-does-more",permalink:"/docs/my-build-does-more",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"About Bleep",permalink:"/docs/"},next:{title:"Bleep build model",permalink:"/docs/model"}},d={},u=[{value:"Introducing <code>scripts</code>",id:"introducing-scripts",level:3},{value:"Running a script",id:"running-a-script",level:3},{value:"Complete freedom:",id:"complete-freedom",level:3},{value:"An example script",id:"an-example-script",level:3},{value:"Composing plugins",id:"composing-plugins",level:4}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"but-my-build-does-much-more"},"But my build does much more!"),(0,a.kt)("p",null,"Yes, your build does other things."),(0,a.kt)("p",null,"It generates code, it distributes artifacts, it builds websites. Probably a lot more"),(0,a.kt)("p",null,"But none of this has to be in the build itself!"),(0,a.kt)("h3",{id:"introducing-scripts"},"Introducing ",(0,a.kt)("inlineCode",{parentName:"h3"},"scripts")),(0,a.kt)("p",null,"To take care of all these other tasks, Bleep introduces ",(0,a.kt)("inlineCode",{parentName:"p"},"scripts"),".\nDefined in your build file as the ",(0,a.kt)("inlineCode",{parentName:"p"},"scripts")," in a ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),",\nthis mechanism allows you to run any class with a ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"projects:\n  myscripts:\n    dependencies:\n      - build.bleep::bleep-plugin-mdoc:${BLEEP_VERSION}\n    scala:\n      version: 3.2.0\nscripts:\n  generate-docs: myscripts/bleep.scripts.GenDocumentation\n")),(0,a.kt)("h3",{id:"running-a-script"},"Running a script"),(0,a.kt)("p",null,"You can run the script like this, it can be tab-completed to save some keystrokes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"$ bleep generate-docs\n")),(0,a.kt)("h3",{id:"complete-freedom"},"Complete freedom:"),(0,a.kt)("p",null,"It might already be clear to you, but anyway:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"you can start this program from bleep (",(0,a.kt)("inlineCode",{parentName:"li"},"bleep generate-docs"),"), from your IDE, from anywhere"),(0,a.kt)("li",{parentName:"ul"},"you can debug it like a normal program"),(0,a.kt)("li",{parentName:"ul"},"you have all the structured info from the build, without having to express code in your build"),(0,a.kt)("li",{parentName:"ul"},"you can include any dependencies you want, from any scala version. No class loader issues."),(0,a.kt)("li",{parentName:"ul"},"you can even write your scripts for any platform"),(0,a.kt)("li",{parentName:"ul"},"Most interesting sbt plugins can be ported to Bleep quite easily! Bleep comes with some plugins already ported.")),(0,a.kt)("h3",{id:"an-example-script"},"An example script"),(0,a.kt)("p",null,"This script uses ",(0,a.kt)("inlineCode",{parentName:"p"},"mdoc")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"docusaurus")," plugins. Look how it composes the plugins, and how it parses command line arguments to determine which method (which used to be sbt task) to call.\nAlso note that it refers to ",(0,a.kt)("inlineCode",{parentName:"p"},"scriptsProject"),", compiles it, gives it to ",(0,a.kt)("inlineCode",{parentName:"p"},"mdoc")," in order for it to compile snippets with classpath for that project."),(0,a.kt)(s.Z,{language:"scala",mdxType:"CodeBlock"},'package bleep\npackage scripts\n\nimport bleep.plugin.mdoc.{DocusaurusPlugin, MdocPlugin}\n\nimport java.io.File\nimport java.nio.file.Path\n\nobject GenDocumentation extends BleepScript("GenDocumentation") {\n  override def run(started: Started, commands: Commands, args: List[String]): Unit = {\n    val scriptsProject = model.CrossProjectName(model.ProjectName("scripts"), crossId = None)\n\n    commands.compile(List(scriptsProject))\n\n    val mdoc = new MdocPlugin(started, scriptsProject) {\n      override def mdocIn: Path = started.buildPaths.buildDir / "bleep-site-in"\n      override def mdocOut: Path = started.buildPaths.buildDir / "bleep-site" / "docs"\n    }\n\n    val nodeBinPath = started.pre.fetchNode(constants.Node).getParent\n\n    started.logger.withContext("nodeBinPath", nodeBinPath).info("Using node")\n\n    val env = sys.env.collect {\n      case x @ ("SSH_AUTH_SOCK", _) => x\n      case ("PATH", value)          => "PATH" -> s"$nodeBinPath${File.pathSeparator}$value"\n    }.toList\n\n    val docusaurus = new DocusaurusPlugin(\n      website = started.buildPaths.buildDir / "bleep-site",\n      mdoc = mdoc,\n      docusaurusProjectName = "bleep-site",\n      env = env,\n      logger = started.logger,\n      isDocusaurus2 = true\n    )\n\n    args.headOption match {\n      case Some("dev") =>\n        docusaurus.dev(started.executionContext)\n      case Some("deploy") =>\n        docusaurus.docusaurusPublishGhpages(mdocArgs = Nil)\n      case Some(other) =>\n        sys.error(s"Expected argument to be dev or deploy, not $other")\n      case None =>\n        val path = docusaurus.doc(mdocArgs = args)\n        started.logger.info(s"Created documentation at $path")\n    }\n  }\n}\n'),(0,a.kt)("h4",{id:"composing-plugins"},"Composing plugins"),(0,a.kt)("p",null,"You can pass an instance of a plugin to another plugin. It's super clear and just normal code. This is what it looks like at use-site"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val dynVer = new DynVerPlugin(baseDirectory = started.buildPaths.buildDir.toFile, dynverSonatypeSnapshots = true)\nval pgp = new PgpPlugin(\n  logger = started.logger,\n  maybeCredentials = None,\n  interactionService = InteractionService.DoesNotMaskYourPasswordExclamationOneOne\n)\nval sonatype = new Sonatype(\n  logger = started.logger,\n  sonatypeBundleDirectory = started.buildPaths.dotBleepDir / "sonatype-bundle",\n  sonatypeProfileName = "build.bleep",\n  bundleName = "bleep",\n  version = dynVer.version,\n  sonatypeCredentialHost = Sonatype.sonatype01\n)\nval ciRelease = new CiReleasePlugin(started.logger, sonatype, dynVer, pgp)\n\nciRelease.ciRelease(...)\n')))}c.isMDXComponent=!0}}]);