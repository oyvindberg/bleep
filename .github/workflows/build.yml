name: Build
on:
  push:
    tags: [ 'v*' ]
    branches: [ 'master' ]
  pull_request:
    branches: [ 'master' ]

jobs:
  build:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: coursier/setup-action@v1.2.0-M3
        with:
          apps: scalafmt
      - uses: coursier/cache-action@v6
        with:
          extraFiles: bleep.yaml

      - name: Scalafmt Check
        run: scalafmt -c .scalafmt.conf --check

      - name: Install bleep stable
        run: cs install --channel channel bleep --verbose

      - name: Run tests
        env:
          CI: true
        run: |
          bleep generate-resources
          bleep test

  build-native-image:
    name: Native image build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            file_name: bleep
            artifact_name: bleep-x86_64-pc-linux
          - os: macos-latest
            file_name: bleep
            artifact_name: bleep-x86_64-apple-darwin
          - os: windows-latest
            file_name: bleep.exe
            artifact_name: bleep-x86_64-pc-win32
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      # todo: this is only needed because it makes some windows development stuff available. figure out how bleep can download it itself
      - uses: graalvm/setup-graalvm@v1
        if: runner.os == 'Windows'
        with:
          version: '22.1.0'
          java-version: '17'
          components: 'native-image'
      - uses: coursier/setup-action@v1.2.0-M3
      - uses: coursier/cache-action@v6
        with:
          extraFiles: bleep.yaml

      - name: Install bleep stable
        run: cs install --channel channel bleep --verbose

      - name: Build native image (non-windows)
        run: |
          bleep generate-resources
          bleep native-image ${{ matrix.file_name }}
        if: runner.os != 'Windows'

      - name: Test binary after build (non-windows)
        env:
          CI: true
        run: ./${{ matrix.file_name }} --ignore-version-in-build-file test --no-color jvm213
        if: runner.os != 'Windows'

      - name: generate resources (windows)
        # note: yaml multiline syntax doesn't seem to work (cmd only runs first command).
        # that's why this is split in generate resources and build native image below
        run: bleep generate-resources
        # shell is important here. default is powershell and things do not work there
        # see https://github.com/dirs-dev/directories-jvm/issues/49
        shell: cmd
        if: runner.os == 'Windows'

      - name: Build native image (windows)
        run: bleep native-image ${{ matrix.file_name }}
        shell: cmd
        if: runner.os == 'Windows'

      - name: Test binary after build (windows)
        shell: cmd
        env:
          CI: true
        # todo: fix tests on windows
        run: .\${{ matrix.file_name }} --ignore-version-in-build-file compile --no-color jvm213
        if: runner.os == 'Windows'

      - name: Temporarily save package
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.file_name }}
          retention-days: 1

  release:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: [ build, build-native-image ]
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - id: get_version
        uses: battila7/get-version-action@v2
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: Display structure of downloaded files
        run: find artifacts
      - name: Release
        run: |
          chmod +x ./artifacts/bleep-x86_64-pc-linux/bleep 
          ./artifacts/bleep-x86_64-pc-linux/bleep generate-resources
          ./artifacts/bleep-x86_64-pc-linux/bleep publish
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
      - name: Prepare files
        run: |
          export VERSION=${{ steps.get_version.outputs.version-without-v }}
          bash .github/prepare-release.sh
      - name: Upload-to-release
        uses: softprops/action-gh-release@v1
        with:
          name: "${{ steps.get_version.outputs.version-without-v }}"
          prerelease: true
          generate_release_notes: true
          files: |
            work/release/*
