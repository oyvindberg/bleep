
package scripts

import bleep.{BleepCodegenScript, Commands, Started}

import java.nio.file.Files

object GenerateForGradleBloopTest extends BleepCodegenScript("GenerateForGradleBloopTest") {
  override def run(started: Started, commands: Commands, targets: List[Target], args: List[String]): Unit = {
    started.logger.error("This script is a placeholder! You'll need to replace the contents with code which actually generates the files you want")

    targets.foreach { target =>
      if (Set("gradle-bloop-test").contains(target.project.value)) {
        val to = target.sources.resolve("sbt-buildinfo/BloopGradleIntegration.scala")
        started.logger.withContext(target.project).warn(s"Writing $to")
        val content = s"""|package bloop.internal.build
      |
      |import scala.Predef._
      |
      |/** This object was generated by sbt-buildinfo. */
      |case object BloopGradleIntegration {
      |  /** The value is "gradle-bloop". */
      |  val name: String = "gradle-bloop"
      |  /** The value is "1.5.2-9-b190bd39-20221105-0119". */
      |  val version: String = "1.5.2-9-b190bd39-20221105-0119"
      |  /** The value is "2.12.15". */
      |  val scalaVersion: String = "2.12.15"
      |  /** The value is "1.6.2". */
      |  val sbtVersion: String = "1.6.2"
      |  override val toString: String = {
      |    "name: %s, version: %s, scalaVersion: %s, sbtVersion: %s" format (
      |      name, version, scalaVersion, sbtVersion
      |    )
      |  }
      |}""".stripMargin
        Files.createDirectories(to.getParent)
        Files.writeString(to, content)
      }
    }

  }
}