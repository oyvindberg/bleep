
package scripts

import bleep.{BleepCodegenScript, Commands, Started}

import java.nio.file.Files

object GenerateForTapirPekkoGrpcExamples extends BleepCodegenScript("GenerateForTapirPekkoGrpcExamples") {
  override def run(started: Started, commands: Commands, targets: List[Target], args: List[String]): Unit = {
    started.logger.error("This script is a placeholder! You'll need to replace the contents with code which actually generates the files you want")

    targets.foreach { target =>
      if (Set("tapir-pekko-grpc-examples@jvm212", "tapir-pekko-grpc-examples@jvm213").contains(target.project.value)) {
        val to = target.sources.resolve("sttp/tapir/grpc/examples/grpc_simple_books_example/gen/AddBookMsg.scala")
        started.logger.withContext(target.project).warn(s"Writing $to")
        val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package sttp.tapir.grpc.examples.grpc_simple_books_example.gen
      |
      |@SerialVersionUID(0L)
      |final case class AddBookMsg(
      |    title: _root_.scala.Predef.String = "",
      |    description: _root_.scala.Predef.String = "",
      |    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AddBookMsg] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = title
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = description
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      |        }
      |      };
      |      __size += unknownFields.serializedSize
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = title
      |        if (!__v.isEmpty) {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |      {
      |        val __v = description
      |        if (!__v.isEmpty) {
      |          _output__.writeString(2, __v)
      |        }
      |      };
      |      unknownFields.writeTo(_output__)
      |    }
      |    def withTitle(__v: _root_.scala.Predef.String): AddBookMsg = copy(title = __v)
      |    def withDescription(__v: _root_.scala.Predef.String): AddBookMsg = copy(description = __v)
      |    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      |    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = title
      |          if (__t != "") __t else null
      |        }
      |        case 2 => {
      |          val __t = description
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(title)
      |        case 2 => _root_.scalapb.descriptors.PString(description)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg.type = sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg
      |    // @@protoc_insertion_point(GeneratedMessage[AddBookMsg])
      |}
      |
      |object AddBookMsg extends scalapb.GeneratedMessageCompanion[sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg = {
      |    var __title: _root_.scala.Predef.String = ""
      |    var __description: _root_.scala.Predef.String = ""
      |    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __title = _input__.readStringRequireUtf8()
      |        case 18 =>
      |          __description = _input__.readStringRequireUtf8()
      |        case tag =>
      |          if (_unknownFields__ == null) {
      |            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
      |          }
      |          _unknownFields__.parseField(tag, _input__)
      |      }
      |    }
      |    sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg(
      |        title = __title,
      |        description = __description,
      |        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg(
      |        """.stripMargin) + new String(s"""|title = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        description = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SimpleBooksExampleProto.javaDescriptor.getMessageTypes().get(1)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SimpleBooksExampleProto.scalaDescriptor.messages(1)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg(
      |    title = "",
      |    description = ""
      |  )
      |  implicit class AddBookMsgLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg](_l) {
      |    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.title)((c_, f_) => c_.copy(title = f_))
      |    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
      |  }
      |  final val TITLE_FIELD_NUMBER = 1
      |  final val DESCRIPTION_FIELD_NUMBER = 2
      |  def of(
      |    title: _root_.scala.Predef.String,
      |    description: _root_.scala.Predef.String
      |  ): _root_.sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg = _root_.sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg(
      |    title,
      |    description
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[AddBookMsg])
      |}""".stripMargin)
        Files.createDirectories(to.getParent)
        Files.writeString(to, content)
      }
    }



    targets.foreach { target =>
      if (Set("tapir-pekko-grpc-examples@jvm212", "tapir-pekko-grpc-examples@jvm213").contains(target.project.value)) {
        val to = target.sources.resolve("sttp/tapir/grpc/examples/grpc_simple_books_example/gen/Library.scala")
        started.logger.withContext(target.project).warn(s"Writing $to")
        val content = s"""|
      |// Generated by Pekko gRPC. DO NOT EDIT.
      |package sttp.tapir.grpc.examples.grpc_simple_books_example.gen
      |
      |import org.apache.pekko
      |import pekko.annotation.ApiMayChange
      |
      |import pekko.grpc.PekkoGrpcGenerated
      |
      |
      |@PekkoGrpcGenerated
      |trait Library {
      |  
      |  
      |  def addBook(in: sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg): scala.concurrent.Future[sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook]
      |  
      |}
      |
      |
      |
      |@PekkoGrpcGenerated
      |object Library extends pekko.grpc.ServiceDescription {
      |  val name = "Library"
      |
      |  val descriptor: com.google.protobuf.Descriptors.FileDescriptor =
      |    sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBooksExampleProto.javaDescriptor;
      |
      |  object Serializers {
      |    import pekko.grpc.scaladsl.ScalapbProtobufSerializer
      |    
      |    val AddBookMsgSerializer = new ScalapbProtobufSerializer(sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg.messageCompanion)
      |    
      |    val SimpleBookSerializer = new ScalapbProtobufSerializer(sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook.messageCompanion)
      |    
      |  }
      |
      |  @ApiMayChange
      |  @PekkoGrpcGenerated
      |  object MethodDescriptors {
      |    import pekko.grpc.internal.Marshaller
      |    import io.grpc.MethodDescriptor
      |    import Serializers._
      |
      |    
      |    val addBookDescriptor: MethodDescriptor[sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg, sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook] =
      |      MethodDescriptor.newBuilder()
      |        .setType(
      |   MethodDescriptor.MethodType.UNARY 
      |  
      |  
      |  
      |)
      |        .setFullMethodName(MethodDescriptor.generateFullMethodName("Library", "AddBook"))
      |        .setRequestMarshaller(new Marshaller(AddBookMsgSerializer))
      |        .setResponseMarshaller(new Marshaller(SimpleBookSerializer))
      |        .setSampledToLocalTracing(true)
      |        .build()
      |    
      |  }
      |}""".stripMargin
        Files.createDirectories(to.getParent)
        Files.writeString(to, content)
      }
    }



    targets.foreach { target =>
      if (Set("tapir-pekko-grpc-examples@jvm212", "tapir-pekko-grpc-examples@jvm213").contains(target.project.value)) {
        val to = target.sources.resolve("sttp/tapir/grpc/examples/grpc_simple_books_example/gen/LibraryClient.scala")
        started.logger.withContext(target.project).warn(s"Writing $to")
        val content = s"""|
      |// Generated by Pekko gRPC. DO NOT EDIT.
      |package sttp.tapir.grpc.examples.grpc_simple_books_example.gen
      |
      |import scala.concurrent.ExecutionContext
      |
      |import org.apache.pekko
      |import pekko.actor.ClassicActorSystemProvider
      |
      |import pekko.grpc.GrpcChannel
      |import pekko.grpc.GrpcClientCloseException
      |import pekko.grpc.GrpcClientSettings
      |
      |import pekko.grpc.scaladsl.PekkoGrpcClient
      |
      |import pekko.grpc.internal.NettyClientUtils
      |
      |import pekko.grpc.PekkoGrpcGenerated
      |
      |import pekko.grpc.scaladsl.SingleResponseRequestBuilder
      |import pekko.grpc.internal.ScalaUnaryRequestBuilder
      |
      |// Not sealed so users can extend to write their stubs
      |@PekkoGrpcGenerated
      |trait LibraryClient extends Library with LibraryClientPowerApi with PekkoGrpcClient
      |
      |@PekkoGrpcGenerated
      |object LibraryClient {
      |  def apply(settings: GrpcClientSettings)(implicit sys: ClassicActorSystemProvider): LibraryClient =
      |    new DefaultLibraryClient(GrpcChannel(settings), isChannelOwned = true)
      |  def apply(channel: GrpcChannel)(implicit sys: ClassicActorSystemProvider): LibraryClient =
      |    new DefaultLibraryClient(channel, isChannelOwned = false)
      |
      |  private class DefaultLibraryClient(channel: GrpcChannel, isChannelOwned: Boolean)(implicit sys: ClassicActorSystemProvider) extends LibraryClient {
      |    import Library.MethodDescriptors._
      |
      |    private implicit val ex: ExecutionContext = sys.classicSystem.dispatcher
      |    private val settings = channel.settings
      |    private val options = NettyClientUtils.callOptions(settings)
      |
      |    
      |    private def addBookRequestBuilder(channel: pekko.grpc.internal.InternalChannel) =
      |    
      |      new ScalaUnaryRequestBuilder(addBookDescriptor, channel, options, settings)
      |    
      |    
      |
      |    
      |    /**
      |     * Lower level "lifted" version of the method, giving access to request metadata etc.
      |     * prefer addBook(sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg) if possible.
      |     */
      |    
      |    override def addBook(): SingleResponseRequestBuilder[sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg, sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook] =
      |      addBookRequestBuilder(channel.internalChannel)
      |    
      |
      |    /**
      |     * For access to method metadata use the parameterless version of addBook
      |     */
      |    def addBook(in: sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg): scala.concurrent.Future[sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook] =
      |      addBook().invoke(in)
      |    
      |
      |    override def close(): scala.concurrent.Future[pekko.Done] =
      |      if (isChannelOwned) channel.close()
      |      else throw new GrpcClientCloseException()
      |
      |    override def closed: scala.concurrent.Future[pekko.Done] = channel.closed()
      |  }
      |}
      |
      |@PekkoGrpcGenerated
      |trait LibraryClientPowerApi {
      |  
      |  /**
      |   * Lower level "lifted" version of the method, giving access to request metadata etc.
      |   * prefer addBook(sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg) if possible.
      |   */
      |  
      |  def addBook(): SingleResponseRequestBuilder[sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg, sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook] = ???
      |  
      |  
      |
      |}""".stripMargin
        Files.createDirectories(to.getParent)
        Files.writeString(to, content)
      }
    }



    targets.foreach { target =>
      if (Set("tapir-pekko-grpc-examples@jvm212", "tapir-pekko-grpc-examples@jvm213").contains(target.project.value)) {
        val to = target.sources.resolve("sttp/tapir/grpc/examples/grpc_simple_books_example/gen/LibraryHandler.scala")
        started.logger.withContext(target.project).warn(s"Writing $to")
        val content = new String(s"""|
      |// Generated by Pekko gRPC. DO NOT EDIT.
      |package sttp.tapir.grpc.examples.grpc_simple_books_example.gen
      |
      |import scala.concurrent.ExecutionContext
      |
      |import org.apache.pekko
      |import pekko.grpc.scaladsl.{ GrpcExceptionHandler, GrpcMarshalling }
      |import pekko.grpc.Trailers
      |
      |import pekko.actor.ActorSystem
      |import pekko.actor.ClassicActorSystemProvider
      |import pekko.annotation.ApiMayChange
      |import pekko.http.scaladsl.model
      |import pekko.stream.{Materializer, SystemMaterializer}
      |
      |import pekko.grpc.internal.TelemetryExtension
      |
      |import pekko.grpc.PekkoGrpcGenerated
      |
      |
      |
      |
      |/*
      | * Generated by Pekko gRPC. DO NOT EDIT.
      | *
      | * The API of this class may still change in future Pekko gRPC versions, see for instance
      | * https://github.com/akka/akka-grpc/issues/994
      | */
      |@ApiMayChange
      |@PekkoGrpcGenerated
      |object LibraryHandler {
      |    private val notFound = scala.concurrent.Future.successful(model.HttpResponse(model.StatusCodes.NotFound))
      |    private val unsupportedMediaType = scala.concurrent.Future.successful(model.HttpResponse(model.StatusCodes.UnsupportedMediaType))
      |
      |    /**
      |     * Creates a `HttpRequest` to `HttpResponse` handler that can be used in for example `Http().bindAndHandleAsync`
      |     * for the generated partial function handler and ends with `StatusCodes.NotFound` if the request is not matching.
      |     *
      |     * Use `org.apache.pekko.grpc.scaladsl.ServiceHandler.concatOrNotFound` with `LibraryHandler.partial` when combining
      |     * several services.
      |     */
      |    def apply(implementation: Library)(implicit system: ClassicActorSystemProvider): model.HttpRequest => scala.concurrent.Future[model.HttpResponse] =
      |      partial(implementation).orElse { case _ => notFound }
      |
      |    /**
      |     * Creates a `HttpRequest` to `HttpResponse` handler that can be used in for example `Http().bindAndHandleAsync`
      |     * for the generated partial function handler and ends with `StatusCodes.NotFound` if the request is not matching.
      |     *
      |     * Use `org.apache.pekko.grpc.scaladsl.ServiceHandler.concatOrNotFound` with `LibraryHandler.partial` when combining
      |     * several services.
      |     */
      |    def apply(implementation: Library, eHandler: ActorSystem => PartialFunction[Throwable, Trailers])(implicit system: ClassicActorSystemProvider): model.HttpRequest => scala.concurrent.Future[model.HttpResponse] =
      |      partial(implementation, Library.name, eHandler).orElse { case _ => notFound }
      |
      |    /**
      |     * Creates a `HttpRequest` to `HttpResponse` handler that can be used in for example `Http().bindAndHandleAsync`
      |     * for the generated partial function handler and ends with `StatusCodes.NotFound` if the request is not matching.
      |     *
      |     * Use `org.apache.pekko.grpc.scaladsl.ServiceHandler.concatOrNotFound` with `LibraryHandler.partial` when combining
      |     * several services.
      |     *
      |     * Registering a gRPC service under a custom prefix is not widely supported and strongly discouraged by the specification.
      |     */
      |    def apply(implementation: Library, prefix: String)(implicit system: ClassicActorSystemProvider): model.HttpRequest => scala.concurrent.Future[model.HttpResponse] =
      |      partial(implementation, prefix).orElse { case _ => notFound }
      |
      |    /**
      |     * Creates a `HttpRequest` to `HttpResponse` handler that can be used in for example `Http().bindAndHandleAsync`
      |     * for the generated partial function handler and ends with `StatusCodes.NotFound` if the request is not matching.
      |     *
      |     * Use `org.apache.pekko.grpc.scaladsl.ServiceHandler.concatOrNotFound` with `LibraryHandler.partial` when combining
      |     * several services.
      |     *
      |     * Registering a gRPC service under a custom prefix is not widely supported and strongly discouraged by the specification.
      |     */
      |    def apply(implementation: Library, prefix: String, eHandler: ActorSystem => PartialFunction[Throwable, Trailers])(implicit system: ClassicActorSystemProvider): model.HttpRequest => scala.concurrent.Future[model.HttpResponse] =
      |      partial(implementation, prefix, eHandler).orElse { case _ => notFound }
      |
      |
      |
      |    /**
      |     * Creates a `HttpRequest` to `HttpResponse` handler that can be used in for example `Http().bindAndHandleAsync`
      |     * for the generated partial function handler. The generated handler falls back to a reflection handler for
      |     * `Library` and ends with `StatusCodes.NotFound` if the request is not matching.
      |     *
      |     * Use `org.apache.pekko.grpc.scaladsl.ServiceHandler.concatOrNotFound` with `LibraryHandler.partial` when combining
      |     * several services.
      |     */
      |    def withServerReflection(implementation: Library)(implicit system: ClassicActorSystemProvider): model.HttpRequest => scala.concurrent.Future[model.HttpResponse] =
      |        pekko.grpc.scaladsl.ServiceHandler.concatOrNotFound(
      |          LibraryHandler.partial(implementation),
      |          pekko.grpc.scaladsl.ServerReflection.partial(List(Library)))
      |
      |
      |    /**
      |     * Creates a partial `HttpRequest` to `HttpResponse` handler that can be combined with handlers of other
      |     * services with `org.apache.pekko.grpc.sc""".stripMargin) + new String(s"""|aladsl.ServiceHandler.concatOrNotFound` and then used in for example
      |     * `Http().bindAndHandleAsync`.
      |     *
      |     * Use `LibraryHandler.apply` if the server is only handling one service.
      |     *
      |     * Registering a gRPC service under a custom prefix is not widely supported and strongly discouraged by the specification.
      |     */
      |    def partial(implementation: Library, prefix: String = Library.name, eHandler: ActorSystem => PartialFunction[Throwable, Trailers] = GrpcExceptionHandler.defaultMapper)(implicit system: ClassicActorSystemProvider): PartialFunction[model.HttpRequest, scala.concurrent.Future[model.HttpResponse]] = {
      |      implicit val mat: Materializer = SystemMaterializer(system).materializer
      |      implicit val ec: ExecutionContext = mat.executionContext
      |      val spi = TelemetryExtension(system).spi
      |
      |      import Library.Serializers._
      |
      |      def handle(request: model.HttpRequest, method: String): scala.concurrent.Future[model.HttpResponse] =
      |        GrpcMarshalling.negotiated(request, (reader, writer) =>
      |          (method match {
      |            
      |            case "AddBook" =>
      |                
      |                GrpcMarshalling.unmarshal(request.entity)(AddBookMsgSerializer, mat, reader)
      |                  .flatMap(implementation.addBook(_))
      |                  .map(e => GrpcMarshalling.marshal(e, eHandler)(SimpleBookSerializer, writer, system))
      |            
      |            case m => scala.concurrent.Future.failed(new NotImplementedError(s"Not implemented: $$m"))
      |          })
      |          .recoverWith(GrpcExceptionHandler.from(eHandler(system.classicSystem))(system, writer))
      |      ).getOrElse(unsupportedMediaType)
      |
      |      Function.unlift((req: model.HttpRequest) => req.uri.path match {
      |        case model.Uri.Path.Slash(model.Uri.Path.Segment(`prefix`, model.Uri.Path.Slash(model.Uri.Path.Segment(method, model.Uri.Path.Empty)))) =>
      |          Some(handle(spi.onRequest(prefix, method, req), method))
      |        case _ =>
      |          None
      |      })
      |    }
      |  }""".stripMargin)
        Files.createDirectories(to.getParent)
        Files.writeString(to, content)
      }
    }



    targets.foreach { target =>
      if (Set("tapir-pekko-grpc-examples@jvm212", "tapir-pekko-grpc-examples@jvm213").contains(target.project.value)) {
        val to = target.sources.resolve("sttp/tapir/grpc/examples/grpc_simple_books_example/gen/SimpleBook.scala")
        started.logger.withContext(target.project).warn(s"Writing $to")
        val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package sttp.tapir.grpc.examples.grpc_simple_books_example.gen
      |
      |@SerialVersionUID(0L)
      |final case class SimpleBook(
      |    id: _root_.scala.Int = 0,
      |    title: _root_.scala.Predef.String = "",
      |    description: _root_.scala.Predef.String = "",
      |    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SimpleBook] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = id
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = title
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = description
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      |        }
      |      };
      |      __size += unknownFields.serializedSize
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = id
      |        if (__v != 0) {
      |          _output__.writeInt32(1, __v)
      |        }
      |      };
      |      {
      |        val __v = title
      |        if (!__v.isEmpty) {
      |          _output__.writeString(2, __v)
      |        }
      |      };
      |      {
      |        val __v = description
      |        if (!__v.isEmpty) {
      |          _output__.writeString(3, __v)
      |        }
      |      };
      |      unknownFields.writeTo(_output__)
      |    }
      |    def withId(__v: _root_.scala.Int): SimpleBook = copy(id = __v)
      |    def withTitle(__v: _root_.scala.Predef.String): SimpleBook = copy(title = __v)
      |    def withDescription(__v: _root_.scala.Predef.String): SimpleBook = copy(description = __v)
      |    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      |    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = id
      |          if (__t != 0) __t else null
      |        }
      |        case 2 => {
      |          val __t = title
      |          if (__t != "") __t else null
      |        }
      |        case 3 => {
      |          val __t = description
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PInt(id)
      |        case 2 => _root_.scalapb.descriptors.PString(title)
      |        case 3 => _root_.scalapb.descriptors.PString(description)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook.type = sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook
      |    // @@protoc_insertion_point(GeneratedMessage[SimpleBook])
      |}
      |
      |object SimpleBook extends scalapb.GeneratedMessageCompanion[sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook = {
      |    var __id: _root_.scala.Int = 0
      |    var __title: _root_.scala.Predef.String = ""
      |    var __description: _root_.scala.Predef.String = ""
      |    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 8 =>
      |          __id = _input__.readInt32()
      |        case 18 =>
      |          __title = _input__.readStringRequireUtf8()
      |        case 26 =>
      |          __description = _input__.readStringRequireUtf8()
      |        case tag =>
      |          if (_unknownFields__ == null) {
      |            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
      |          }
      |          _unknownFields__.parseField(tag, _input__)
      |      }
      |    }
      |    sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook(
      |        id = __id,
      |    """.stripMargin) + new String(s"""|    title = __title,
      |        description = __description,
      |        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook(
      |        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
      |        title = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        description = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SimpleBooksExampleProto.javaDescriptor.getMessageTypes().get(0)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SimpleBooksExampleProto.scalaDescriptor.messages(0)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook(
      |    id = 0,
      |    title = "",
      |    description = ""
      |  )
      |  implicit class SimpleBookLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook](_l) {
      |    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
      |    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.title)((c_, f_) => c_.copy(title = f_))
      |    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
      |  }
      |  final val ID_FIELD_NUMBER = 1
      |  final val TITLE_FIELD_NUMBER = 2
      |  final val DESCRIPTION_FIELD_NUMBER = 3
      |  def of(
      |    id: _root_.scala.Int,
      |    title: _root_.scala.Predef.String,
      |    description: _root_.scala.Predef.String
      |  ): _root_.sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook = _root_.sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook(
      |    id,
      |    title,
      |    description
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[SimpleBook])
      |}""".stripMargin)
        Files.createDirectories(to.getParent)
        Files.writeString(to, content)
      }
    }



    targets.foreach { target =>
      if (Set("tapir-pekko-grpc-examples@jvm212", "tapir-pekko-grpc-examples@jvm213").contains(target.project.value)) {
        val to = target.sources.resolve("sttp/tapir/grpc/examples/grpc_simple_books_example/gen/SimpleBooksExampleProto.scala")
        started.logger.withContext(target.project).warn(s"Writing $to")
        val content = s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package sttp.tapir.grpc.examples.grpc_simple_books_example.gen
      |
      |object SimpleBooksExampleProto extends _root_.scalapb.GeneratedFileObject {
      |  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq.empty
      |  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      |    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      |      sttp.tapir.grpc.examples.grpc_simple_books_example.gen.SimpleBook,
      |      sttp.tapir.grpc.examples.grpc_simple_books_example.gen.AddBookMsg
      |    )
      |  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      |      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
      |  ${"\"" * 3}ChpzaW1wbGVfYm9va3NfZXhhbXBsZS5wcm90byJ7CgpTaW1wbGVCb29rEhcKAmlkGAEgASgFQgfiPwQSAmlkUgJpZBIgCgV0a
      |  XRsZRgCIAEoCUIK4j8HEgV0aXRsZVIFdGl0bGUSMgoLZGVzY3JpcHRpb24YAyABKAlCEOI/DRILZGVzY3JpcHRpb25SC2Rlc2Nya
      |  XB0aW9uImIKCkFkZEJvb2tNc2cSIAoFdGl0bGUYASABKAlCCuI/BxIFdGl0bGVSBXRpdGxlEjIKC2Rlc2NyaXB0aW9uGAIgASgJQ
      |  hDiPw0SC2Rlc2NyaXB0aW9uUgtkZXNjcmlwdGlvbjIwCgdMaWJyYXJ5EiUKB0FkZEJvb2sSCy5BZGRCb29rTXNnGgsuU2ltcGxlQ
      |  m9vayIAQjoKNnN0dHAudGFwaXIuZ3JwYy5leGFtcGxlcy5ncnBjX3NpbXBsZV9ib29rc19leGFtcGxlLmdlblABYgZwcm90bzM=${"\"" * 3}
      |      ).mkString)
      |  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
      |    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
      |    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
      |  }
      |  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
      |    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
      |    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      |    ))
      |  }
      |  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
      |  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
      |}""".stripMargin
        Files.createDirectories(to.getParent)
        Files.writeString(to, content)
      }
    }

  }
}