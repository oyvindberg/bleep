
package scripts

import java.nio.file.Files

object GenerateResources extends App {
  bleep.bootstrap.forScript("GenerateResources") { (started, commands) =>
    started.logger.error("This script is a placeholder! You'll need to replace the contents with code which actually generates the files you want")

    
    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("bench"), Some(bleep.model.CrossId("jvm211"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("bench"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("bench"), Some(bleep.model.CrossId("jvm212")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("sbt-buildinfo/BuildInfo.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = s"""|// $$COVERAGE-OFF$$
      |package scala.meta.internal.bench
      |
      |/** This object was generated by sbt-buildinfo. */
      |case object BuildInfo {
      |  /** The value is new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta"). */
      |  val sourceroot: java.io.File = new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta")
      |  override val toString: String = {
      |    "sourceroot: %s".format(
      |      sourceroot
      |    )
      |  }
      |}
      |// $$COVERAGE-ON$$""".stripMargin
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Access.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed trait Access extends scalapb.GeneratedSealedOneof {
      |  type MessageType = scala.meta.internal.semanticdb.AccessMessage
      |  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Access.Empty.type]
      |  final def isDefined = !isEmpty
      |  final def asMessage: scala.meta.internal.semanticdb.AccessMessage = scala.meta.internal.semanticdb.Access.AccessTypeMapper.toBase(this)
      |  final def asNonEmpty: Option[scala.meta.internal.semanticdb.Access.NonEmpty] = if (isEmpty) None else Some(this.asInstanceOf[scala.meta.internal.semanticdb.Access.NonEmpty])
      |}
      |
      |object Access {
      |  case object Empty extends scala.meta.internal.semanticdb.Access
      |  
      |  sealed trait NonEmpty extends scala.meta.internal.semanticdb.Access
      |  
      |  def defaultInstance: scala.meta.internal.semanticdb.Access = Empty
      |  
      |  implicit val AccessTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.AccessMessage, scala.meta.internal.semanticdb.Access] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.AccessMessage, scala.meta.internal.semanticdb.Access] {
      |    override def toCustom(__base: scala.meta.internal.semanticdb.AccessMessage): scala.meta.internal.semanticdb.Access = __base.sealedValue match {
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess => __v.value
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess => __v.value
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess => __v.value
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess => __v.value
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess => __v.value
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess => __v.value
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess => __v.value
      |      case scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty => Empty
      |    }
      |    override def toBase(__custom: scala.meta.internal.semanticdb.Access): scala.meta.internal.semanticdb.AccessMessage = scala.meta.internal.semanticdb.AccessMessage(__custom match {
      |      case __v: scala.meta.internal.semanticdb.PrivateAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess(__v)
      |      case __v: scala.meta.internal.semanticdb.PrivateThisAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess(__v)
      |      case __v: scala.meta.internal.semanticdb.PrivateWithinAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess(__v)
      |      case __v: scala.meta.internal.semanticdb.ProtectedAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess(__v)
      |      case __v: scala.meta.internal.semanticdb.ProtectedThisAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess(__v)
      |      case __v: scala.meta.internal.semanticdb.ProtectedWithinAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess(__v)
      |      case __v: scala.meta.internal.semanticdb.PublicAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess(__v)
      |      case Empty => scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty
      |    })
      |  }
      |}
      |@SerialVersionUID(0L)
      |final case class AccessMessage(
      |    sealedValue: scala.meta.internal.semanticdb.AccessMessage.SealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[AccessMessage] with scalapb.lenses.Updatable[AccessMessage] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (sealedValue.privateAccess.isDefined) {
      |        val __value = sealedValue.privateAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.privateThisAccess.isDefined) {
      |        val __value = sealedValue.privateThisAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.privateWithinAccess.isDefined) {
      |        val __value = sealedValue.privateWithinAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.protectedAccess.isDefined) {
      |        val __value = sealedValue.protectedAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |  """.stripMargin) + new String(s"""|    if (sealedValue.protectedThisAccess.isDefined) {
      |        val __value = sealedValue.protectedThisAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.protectedWithinAccess.isDefined) {
      |        val __value = sealedValue.protectedWithinAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.publicAccess.isDefined) {
      |        val __value = sealedValue.publicAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      sealedValue.privateAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.privateThisAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.privateWithinAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.protectedAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(4, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.protectedThisAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(5, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.protectedWithinAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(6, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.publicAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(7, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.AccessMessage = {
      |      var __sealedValue = this.sealedValue
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.privateAccess.getOrElse(scala.meta.internal.semanticdb.PrivateAccess.defaultInstance)))
      |          case 18 =>
      |            __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.privateThisAccess.getOrElse(scala.meta.internal.semanticdb.PrivateThisAccess.defaultInstance)))
      |          case 26 =>
      |            __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.privateWithinAccess.getOrElse(scala.meta.internal.semanticdb.PrivateWithinAccess.defaultInstance)))
      |          case 34 =>
      |            __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.protectedAccess.getOrElse(scala.meta.internal.semanticdb.ProtectedAccess.defaultInstance)))
      |          case 42 =>
      |            __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.protectedThisAccess.getOrElse(scala.meta.internal.semanticdb.ProtectedThisAccess.defaultInstance)))
      |          case 50 =>
      |            __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.protectedWithinAccess.getOrElse(scala.meta.internal.semanticdb.ProtectedWithinAccess.defaultInstance)))
      |          case 58 =>
      |            __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.publicAccess.getOrElse(scala.meta.internal.semanticdb.PublicAccess.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.AccessMessage(
      |          sealedValue = __sealedValue
      |      )
      |    }
      |    def getPri""".stripMargin) + new String(s"""|vateAccess: scala.meta.internal.semanticdb.PrivateAccess = sealedValue.privateAccess.getOrElse(scala.meta.internal.semanticdb.PrivateAccess.defaultInstance)
      |    def withPrivateAccess(__v: scala.meta.internal.semanticdb.PrivateAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess(__v))
      |    def getPrivateThisAccess: scala.meta.internal.semanticdb.PrivateThisAccess = sealedValue.privateThisAccess.getOrElse(scala.meta.internal.semanticdb.PrivateThisAccess.defaultInstance)
      |    def withPrivateThisAccess(__v: scala.meta.internal.semanticdb.PrivateThisAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess(__v))
      |    def getPrivateWithinAccess: scala.meta.internal.semanticdb.PrivateWithinAccess = sealedValue.privateWithinAccess.getOrElse(scala.meta.internal.semanticdb.PrivateWithinAccess.defaultInstance)
      |    def withPrivateWithinAccess(__v: scala.meta.internal.semanticdb.PrivateWithinAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess(__v))
      |    def getProtectedAccess: scala.meta.internal.semanticdb.ProtectedAccess = sealedValue.protectedAccess.getOrElse(scala.meta.internal.semanticdb.ProtectedAccess.defaultInstance)
      |    def withProtectedAccess(__v: scala.meta.internal.semanticdb.ProtectedAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess(__v))
      |    def getProtectedThisAccess: scala.meta.internal.semanticdb.ProtectedThisAccess = sealedValue.protectedThisAccess.getOrElse(scala.meta.internal.semanticdb.ProtectedThisAccess.defaultInstance)
      |    def withProtectedThisAccess(__v: scala.meta.internal.semanticdb.ProtectedThisAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess(__v))
      |    def getProtectedWithinAccess: scala.meta.internal.semanticdb.ProtectedWithinAccess = sealedValue.protectedWithinAccess.getOrElse(scala.meta.internal.semanticdb.ProtectedWithinAccess.defaultInstance)
      |    def withProtectedWithinAccess(__v: scala.meta.internal.semanticdb.ProtectedWithinAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess(__v))
      |    def getPublicAccess: scala.meta.internal.semanticdb.PublicAccess = sealedValue.publicAccess.getOrElse(scala.meta.internal.semanticdb.PublicAccess.defaultInstance)
      |    def withPublicAccess(__v: scala.meta.internal.semanticdb.PublicAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess(__v))
      |    def clearSealedValue: AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty)
      |    def withSealedValue(__v: scala.meta.internal.semanticdb.AccessMessage.SealedValue): AccessMessage = copy(sealedValue = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.privateAccess.orNull
      |        case 2 => sealedValue.privateThisAccess.orNull
      |        case 3 => sealedValue.privateWithinAccess.orNull
      |        case 4 => sealedValue.protectedAccess.orNull
      |        case 5 => sealedValue.protectedThisAccess.orNull
      |        case 6 => sealedValue.protectedWithinAccess.orNull
      |        case 7 => sealedValue.publicAccess.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.privateAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => sealedValue.privateThisAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 3 => sealedValue.privateWithinAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 4 => sealedValue.protectedAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 5 => sealedValue.protectedThisAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 6 => sealedValue.protectedWithinAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 7 => sealedValue.publicAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.AccessMessage
      |    def toAccess: scala.meta.internal.semanticdb.Access = scala.meta.internal.semanticdb.Access.AccessTypeMapper.toCustom(this)
      |}
      |
      |object AccessMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.AccessMessage] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.""".stripMargin) + new String(s"""|meta.internal.semanticdb.AccessMessage] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.AccessMessage = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.AccessMessage(
      |      sealedValue = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.PrivateAccess]].map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess)
      |    .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.PrivateThisAccess]].map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess))
      |    .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.PrivateWithinAccess]].map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess))
      |    .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ProtectedAccess]].map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess))
      |    .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ProtectedThisAccess]].map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess))
      |    .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(__fields.get(5)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ProtectedWithinAccess]].map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess))
      |    .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(__fields.get(6)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.PublicAccess]].map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess))
      |    .getOrElse(scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty)
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.AccessMessage] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.AccessMessage(
      |        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.PrivateAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess)
      |    .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.PrivateThisAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess))
      |    .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.PrivateWithinAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess))
      |    .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ProtectedAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess))
      |    .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ProtectedThisAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess))
      |    .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ProtectedWithinAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess))
      |    .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.PublicAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess))
      |    .getOrElse(scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descrip""".stripMargin) + new String(s"""|tors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(41)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(41)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.PrivateAccess
      |      case 2 => __out = scala.meta.internal.semanticdb.PrivateThisAccess
      |      case 3 => __out = scala.meta.internal.semanticdb.PrivateWithinAccess
      |      case 4 => __out = scala.meta.internal.semanticdb.ProtectedAccess
      |      case 5 => __out = scala.meta.internal.semanticdb.ProtectedThisAccess
      |      case 6 => __out = scala.meta.internal.semanticdb.ProtectedWithinAccess
      |      case 7 => __out = scala.meta.internal.semanticdb.PublicAccess
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.AccessMessage(
      |    sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty
      |  )
      |  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
      |    def isEmpty: _root_.scala.Boolean = false
      |    def isDefined: _root_.scala.Boolean = true
      |    def isPrivateAccess: _root_.scala.Boolean = false
      |    def isPrivateThisAccess: _root_.scala.Boolean = false
      |    def isPrivateWithinAccess: _root_.scala.Boolean = false
      |    def isProtectedAccess: _root_.scala.Boolean = false
      |    def isProtectedThisAccess: _root_.scala.Boolean = false
      |    def isProtectedWithinAccess: _root_.scala.Boolean = false
      |    def isPublicAccess: _root_.scala.Boolean = false
      |    def privateAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PrivateAccess] = _root_.scala.None
      |    def privateThisAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PrivateThisAccess] = _root_.scala.None
      |    def privateWithinAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PrivateWithinAccess] = _root_.scala.None
      |    def protectedAccess: _root_.scala.Option[scala.meta.internal.semanticdb.ProtectedAccess] = _root_.scala.None
      |    def protectedThisAccess: _root_.scala.Option[scala.meta.internal.semanticdb.ProtectedThisAccess] = _root_.scala.None
      |    def protectedWithinAccess: _root_.scala.Option[scala.meta.internal.semanticdb.ProtectedWithinAccess] = _root_.scala.None
      |    def publicAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PublicAccess] = _root_.scala.None
      |  }
      |  object SealedValue extends {
      |    @SerialVersionUID(0L)
      |    case object Empty extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = _root_.scala.Nothing
      |      override def isEmpty: _root_.scala.Boolean = true
      |      override def isDefined: _root_.scala.Boolean = false
      |      override def number: _root_.scala.Int = 0
      |      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      |    }
      |  
      |    @SerialVersionUID(0L)
      |    final case class PrivateAccess(value: scala.meta.internal.semanticdb.PrivateAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.PrivateAccess
      |      override def isPrivateAccess: _root_.scala.Boolean = true
      |      override def privateAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PrivateAccess] = Some(value)
      |      override def number: _root_.scala.Int = 1
      |    }
      |    @SerialVersionUID(0L)
      |    final case class PrivateThisAccess(value: scala.meta.internal.semanticdb.PrivateThisAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.PrivateThisAccess
      |      override def isPrivateThisAccess: _root_.scala.Boolean = true
      |      override def privateThisAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PrivateThisAccess] = Some(value)
      |      override def number: _root_.scala.Int = 2
      |    }
      |    @SerialVersionUID(0L)
      |    final case class PrivateWithinAccess(value: scala.meta.internal.semanticdb.PrivateWithinAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.PrivateWithinAccess
      |      override def isPrivateWithinAccess: _root_.scala.Boolean = true
      |      override def privateWithinAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PrivateWithinAccess] = Some(value)
      |      override def number: _root_.scala.Int = 3
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ProtectedAccess(value: scala.meta.internal.semanticdb.ProtectedAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ProtectedAccess
      |      override d""".stripMargin) + new String(s"""|ef isProtectedAccess: _root_.scala.Boolean = true
      |      override def protectedAccess: _root_.scala.Option[scala.meta.internal.semanticdb.ProtectedAccess] = Some(value)
      |      override def number: _root_.scala.Int = 4
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ProtectedThisAccess(value: scala.meta.internal.semanticdb.ProtectedThisAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ProtectedThisAccess
      |      override def isProtectedThisAccess: _root_.scala.Boolean = true
      |      override def protectedThisAccess: _root_.scala.Option[scala.meta.internal.semanticdb.ProtectedThisAccess] = Some(value)
      |      override def number: _root_.scala.Int = 5
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ProtectedWithinAccess(value: scala.meta.internal.semanticdb.ProtectedWithinAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ProtectedWithinAccess
      |      override def isProtectedWithinAccess: _root_.scala.Boolean = true
      |      override def protectedWithinAccess: _root_.scala.Option[scala.meta.internal.semanticdb.ProtectedWithinAccess] = Some(value)
      |      override def number: _root_.scala.Int = 6
      |    }
      |    @SerialVersionUID(0L)
      |    final case class PublicAccess(value: scala.meta.internal.semanticdb.PublicAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.PublicAccess
      |      override def isPublicAccess: _root_.scala.Boolean = true
      |      override def publicAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PublicAccess] = Some(value)
      |      override def number: _root_.scala.Int = 7
      |    }
      |  }
      |  implicit class AccessMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.AccessMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.AccessMessage](_l) {
      |    def privateAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PrivateAccess] = field(_.getPrivateAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess(f_)))
      |    def privateThisAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PrivateThisAccess] = field(_.getPrivateThisAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess(f_)))
      |    def privateWithinAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PrivateWithinAccess] = field(_.getPrivateWithinAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess(f_)))
      |    def protectedAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ProtectedAccess] = field(_.getProtectedAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess(f_)))
      |    def protectedThisAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ProtectedThisAccess] = field(_.getProtectedThisAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess(f_)))
      |    def protectedWithinAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ProtectedWithinAccess] = field(_.getProtectedWithinAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess(f_)))
      |    def publicAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PublicAccess] = field(_.getPublicAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess(f_)))
      |    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.AccessMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
      |  }
      |  final val PRIVATE_ACCESS_FIELD_NUMBER = 1
      |  final val PRIVATE_THIS_ACCESS_FIELD_NUMBER = 2
      |  final val PRIVATE_WITHIN_ACCESS_FIELD_NUMBER = 3
      |  final val PROTECTED_ACCESS_FIELD_NUMBER = 4
      |  final val PROTECTED_THIS_ACCESS_FIELD_NUMBER = 5
      |  final val PROTECTED_WITHIN_ACCESS_FIELD_NUMBER = 6
      |  final val PUBLIC_ACCESS_FIELD_NUMBER = 7
      |  def of(
      |    sealedValue: scala.meta.internal.semanticdb.AccessMessage.SealedValue
      |  ): _root_.scala.meta.internal.semanticdb.AccessMessage = _root_.scala.meta.internal.semanticdb.AccessMessage(
      |    sealedValue
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class PrivateAccess(
      |    ) extends scala.meta.internal.semanticdb.Access with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[PrivateAccess] with scalapb.lenses.Updatable[PrivateAccess] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def mergeFrom(`_input__`: _root_.com""".stripMargin) + new String(s"""|.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.PrivateAccess = {
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.PrivateAccess(
      |      )
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.PrivateAccess
      |}
      |
      |object PrivateAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateAccess] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.PrivateAccess = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    scala.meta.internal.semanticdb.PrivateAccess(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.PrivateAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.PrivateAccess(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(42)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(42)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.PrivateAccess(
      |  )
      |  implicit class PrivateAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PrivateAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.PrivateAccess](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.PrivateAccess = _root_.scala.meta.internal.semanticdb.PrivateAccess(
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class PrivateThisAccess(
      |    ) extends scala.meta.internal.semanticdb.Access with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[PrivateThisAccess] with scalapb.lenses.Updatable[PrivateThisAccess] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.PrivateThisAccess = {
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.PrivateThisAccess(
      |      )
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.PrivateThisAccess
      |}
      |
      |object PrivateThisAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateThisAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateThisAccess] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.PrivateThisAccess = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    scala.meta.internal.semanticdb.PrivateThisAccess(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.me""".stripMargin) + new String(s"""|ta.internal.semanticdb.PrivateThisAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.PrivateThisAccess(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(43)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(43)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.PrivateThisAccess(
      |  )
      |  implicit class PrivateThisAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PrivateThisAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.PrivateThisAccess](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.PrivateThisAccess = _root_.scala.meta.internal.semanticdb.PrivateThisAccess(
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class PrivateWithinAccess(
      |    symbol: _root_.scala.Predef.String = ""
      |    ) extends scala.meta.internal.semanticdb.Access with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[PrivateWithinAccess] with scalapb.lenses.Updatable[PrivateWithinAccess] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = symbol
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = symbol
      |        if (__v != "") {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.PrivateWithinAccess = {
      |      var __symbol = this.symbol
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __symbol = _input__.readString()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.PrivateWithinAccess(
      |          symbol = __symbol
      |      )
      |    }
      |    def withSymbol(__v: _root_.scala.Predef.String): PrivateWithinAccess = copy(symbol = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(symbol)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.PrivateWithinAccess
      |}
      |
      |object PrivateWithinAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateWithinAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateWithinAccess] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.PrivateWithinAccess = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.PrivateWithinAccess(
      |      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Priv""".stripMargin) + new String(s"""|ateWithinAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.PrivateWithinAccess(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(44)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(44)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.PrivateWithinAccess(
      |    symbol = ""
      |  )
      |  implicit class PrivateWithinAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PrivateWithinAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.PrivateWithinAccess](_l) {
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |  }
      |  final val SYMBOL_FIELD_NUMBER = 1
      |  def of(
      |    symbol: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.PrivateWithinAccess = _root_.scala.meta.internal.semanticdb.PrivateWithinAccess(
      |    symbol
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ProtectedAccess(
      |    ) extends scala.meta.internal.semanticdb.Access with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ProtectedAccess] with scalapb.lenses.Updatable[ProtectedAccess] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ProtectedAccess = {
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ProtectedAccess(
      |      )
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ProtectedAccess
      |}
      |
      |object ProtectedAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedAccess] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ProtectedAccess = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    scala.meta.internal.semanticdb.ProtectedAccess(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ProtectedAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ProtectedAccess(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(45)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(45)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.P""".stripMargin) + new String(s"""|rotectedAccess(
      |  )
      |  implicit class ProtectedAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ProtectedAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ProtectedAccess](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.ProtectedAccess = _root_.scala.meta.internal.semanticdb.ProtectedAccess(
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ProtectedThisAccess(
      |    ) extends scala.meta.internal.semanticdb.Access with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ProtectedThisAccess] with scalapb.lenses.Updatable[ProtectedThisAccess] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ProtectedThisAccess = {
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ProtectedThisAccess(
      |      )
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ProtectedThisAccess
      |}
      |
      |object ProtectedThisAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedThisAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedThisAccess] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ProtectedThisAccess = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    scala.meta.internal.semanticdb.ProtectedThisAccess(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ProtectedThisAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ProtectedThisAccess(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(46)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(46)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ProtectedThisAccess(
      |  )
      |  implicit class ProtectedThisAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ProtectedThisAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ProtectedThisAccess](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.ProtectedThisAccess = _root_.scala.meta.internal.semanticdb.ProtectedThisAccess(
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ProtectedWithinAccess(
      |    symbol: _root_.scala.Predef.String = ""
      |    ) extends scala.meta.internal.semanticdb.Access with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ProtectedWithinAccess] with scalapb.lenses.Updatable[ProtectedWithinAccess] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = symbol
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.""".stripMargin) + new String(s"""|CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = symbol
      |        if (__v != "") {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ProtectedWithinAccess = {
      |      var __symbol = this.symbol
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __symbol = _input__.readString()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ProtectedWithinAccess(
      |          symbol = __symbol
      |      )
      |    }
      |    def withSymbol(__v: _root_.scala.Predef.String): ProtectedWithinAccess = copy(symbol = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(symbol)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ProtectedWithinAccess
      |}
      |
      |object ProtectedWithinAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedWithinAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedWithinAccess] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ProtectedWithinAccess = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.ProtectedWithinAccess(
      |      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ProtectedWithinAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ProtectedWithinAccess(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(47)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(47)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ProtectedWithinAccess(
      |    symbol = ""
      |  )
      |  implicit class ProtectedWithinAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ProtectedWithinAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ProtectedWithinAccess](_l) {
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |  }
      |  final val SYMBOL_FIELD_NUMBER = 1
      |  def of(
      |    symbol: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.ProtectedWithinAccess = _root_.scala.meta.internal.semanticdb.ProtectedWithinAccess(
      |    symbol
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class PublicAccess(
      |    ) extends scala.meta.internal.semanticdb.Access with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[PublicAccess] with scalapb.lenses.Updatable[PublicAccess] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.PublicAccess = {
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.""".stripMargin) + new String(s"""|readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.PublicAccess(
      |      )
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.PublicAccess
      |}
      |
      |object PublicAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PublicAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PublicAccess] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.PublicAccess = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    scala.meta.internal.semanticdb.PublicAccess(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.PublicAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.PublicAccess(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(48)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(48)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.PublicAccess(
      |  )
      |  implicit class PublicAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PublicAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.PublicAccess](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.PublicAccess = _root_.scala.meta.internal.semanticdb.PublicAccess(
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Annotation.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Annotation(
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[Annotation] with scalapb.lenses.Updatable[Annotation] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toBase(tpe)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toBase(tpe)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Annotation = {
      |      var __tpe = this.tpe
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __tpe = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toBase(__tpe)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.Annotation(
      |          tpe = __tpe
      |      )
      |    }
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): Annotation = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.Annotation
      |}
      |
      |object Annotation extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Annotation] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Annotation] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.Annotation = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.Annotation(
      |      scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Annotation] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Annotation(
      |        scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def jav""".stripMargin) + new String(s"""|aDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(40)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(40)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Annotation(
      |    tpe = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class AnnotationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Annotation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Annotation](_l) {
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val TPE_FIELD_NUMBER = 1
      |  @transient
      |  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.Annotation = _root_.scala.meta.internal.semanticdb.Annotation(
      |    tpe
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Constant.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed trait Constant extends scalapb.GeneratedSealedOneof {
      |  type MessageType = scala.meta.internal.semanticdb.ConstantMessage
      |  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Constant.Empty.type]
      |  final def isDefined = !isEmpty
      |  final def asMessage: scala.meta.internal.semanticdb.ConstantMessage = scala.meta.internal.semanticdb.Constant.ConstantTypeMapper.toBase(this)
      |  final def asNonEmpty: Option[scala.meta.internal.semanticdb.Constant.NonEmpty] = if (isEmpty) None else Some(this.asInstanceOf[scala.meta.internal.semanticdb.Constant.NonEmpty])
      |}
      |
      |object Constant {
      |  case object Empty extends scala.meta.internal.semanticdb.Constant
      |  
      |  sealed trait NonEmpty extends scala.meta.internal.semanticdb.Constant
      |  
      |  def defaultInstance: scala.meta.internal.semanticdb.Constant = Empty
      |  
      |  implicit val ConstantTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant] {
      |    override def toCustom(__base: scala.meta.internal.semanticdb.ConstantMessage): scala.meta.internal.semanticdb.Constant = __base.sealedValue match {
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant => __v.value
      |      case scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty => Empty
      |    }
      |    override def toBase(__custom: scala.meta.internal.semanticdb.Constant): scala.meta.internal.semanticdb.ConstantMessage = scala.meta.internal.semanticdb.ConstantMessage(__custom match {
      |      case __v: scala.meta.internal.semanticdb.UnitConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.BooleanConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.ByteConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.ShortConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.CharConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.IntConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.LongConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.FloatConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.DoubleConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.StringConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.NullConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant(__v)
      |      case Empty => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty
      |    })
      |  }
      |}
      |@SerialVersionUID(0L)
      |final case class ConstantMessage(
      |    sealedValue: scala.meta.internal.semanticdb.ConstantMessage.SealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[ConstantMessage] with scalapb.lenses.Updatable[ConstantMessage] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (sealedValue.unitConstant.isDefined""".stripMargin) + new String(s"""|) {
      |        val __value = sealedValue.unitConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.booleanConstant.isDefined) {
      |        val __value = sealedValue.booleanConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.byteConstant.isDefined) {
      |        val __value = sealedValue.byteConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.shortConstant.isDefined) {
      |        val __value = sealedValue.shortConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.charConstant.isDefined) {
      |        val __value = sealedValue.charConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.intConstant.isDefined) {
      |        val __value = sealedValue.intConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.longConstant.isDefined) {
      |        val __value = sealedValue.longConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.floatConstant.isDefined) {
      |        val __value = sealedValue.floatConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.doubleConstant.isDefined) {
      |        val __value = sealedValue.doubleConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.stringConstant.isDefined) {
      |        val __value = sealedValue.stringConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.nullConstant.isDefined) {
      |        val __value = sealedValue.nullConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      sealedValue.unitConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.booleanConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.byteConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.shortConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(4, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.charConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(5, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.intConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(6, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.longConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(7, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.floatConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(8, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.doubleConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(9, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.stringConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(10, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |       """.stripMargin) + new String(s"""| __m.writeTo(_output__)
      |      };
      |      sealedValue.nullConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(11, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ConstantMessage = {
      |      var __sealedValue = this.sealedValue
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.unitConstant.getOrElse(scala.meta.internal.semanticdb.UnitConstant.defaultInstance)))
      |          case 18 =>
      |            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.booleanConstant.getOrElse(scala.meta.internal.semanticdb.BooleanConstant.defaultInstance)))
      |          case 26 =>
      |            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.byteConstant.getOrElse(scala.meta.internal.semanticdb.ByteConstant.defaultInstance)))
      |          case 34 =>
      |            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.shortConstant.getOrElse(scala.meta.internal.semanticdb.ShortConstant.defaultInstance)))
      |          case 42 =>
      |            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.charConstant.getOrElse(scala.meta.internal.semanticdb.CharConstant.defaultInstance)))
      |          case 50 =>
      |            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.intConstant.getOrElse(scala.meta.internal.semanticdb.IntConstant.defaultInstance)))
      |          case 58 =>
      |            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.longConstant.getOrElse(scala.meta.internal.semanticdb.LongConstant.defaultInstance)))
      |          case 66 =>
      |            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.floatConstant.getOrElse(scala.meta.internal.semanticdb.FloatConstant.defaultInstance)))
      |          case 74 =>
      |            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.doubleConstant.getOrElse(scala.meta.internal.semanticdb.DoubleConstant.defaultInstance)))
      |          case 82 =>
      |            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.stringConstant.getOrElse(scala.meta.internal.semanticdb.StringConstant.defaultInstance)))
      |          case 90 =>
      |            __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.nullConstant.getOrElse(scala.meta.internal.semanticdb.NullConstant.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ConstantMessage(
      |          sealedValue = __sealedValue
      |      )
      |    }
      |    def getUnitConstant: scala.meta.internal.semanticdb.UnitConstant = sealedValue.unitConstant.getOrElse(scala.meta.internal.semanticdb.UnitConstant.defaultInstance)
      |    def withUnitConstant(__v: scala.meta.internal.semanticdb.UnitConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(__v))
      |    def getBooleanConstant: scala.meta.internal.semanticdb.BooleanConstant = sealedValue.booleanConstant.getOrElse(scala.meta.internal.semanticdb.BooleanConstant.defaultInstance)
      |    def withBooleanConstant(__v: scala.meta.internal.semanticdb.BooleanConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(__v))
      |    def getByteConstant: scala.meta.internal.semanticdb.ByteConstant = sealedValue.byteConstant.getOrElse(scala.meta.internal.semanticdb.ByteConstant.defaultInstance)
      |    def withByteConstant(__v: scala.meta.internal.semanticdb.ByteConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(__v))
      |    def getShortConstant: scala.meta.internal.semanticdb.ShortConstant = sealedValue.shortConstant.getOrElse(scala.meta.internal.semanticdb.ShortConstant.defaultInstance)
      |    def withShortConstant(__v: scala.meta.inte""".stripMargin) + new String(s"""|rnal.semanticdb.ShortConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(__v))
      |    def getCharConstant: scala.meta.internal.semanticdb.CharConstant = sealedValue.charConstant.getOrElse(scala.meta.internal.semanticdb.CharConstant.defaultInstance)
      |    def withCharConstant(__v: scala.meta.internal.semanticdb.CharConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(__v))
      |    def getIntConstant: scala.meta.internal.semanticdb.IntConstant = sealedValue.intConstant.getOrElse(scala.meta.internal.semanticdb.IntConstant.defaultInstance)
      |    def withIntConstant(__v: scala.meta.internal.semanticdb.IntConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(__v))
      |    def getLongConstant: scala.meta.internal.semanticdb.LongConstant = sealedValue.longConstant.getOrElse(scala.meta.internal.semanticdb.LongConstant.defaultInstance)
      |    def withLongConstant(__v: scala.meta.internal.semanticdb.LongConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(__v))
      |    def getFloatConstant: scala.meta.internal.semanticdb.FloatConstant = sealedValue.floatConstant.getOrElse(scala.meta.internal.semanticdb.FloatConstant.defaultInstance)
      |    def withFloatConstant(__v: scala.meta.internal.semanticdb.FloatConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(__v))
      |    def getDoubleConstant: scala.meta.internal.semanticdb.DoubleConstant = sealedValue.doubleConstant.getOrElse(scala.meta.internal.semanticdb.DoubleConstant.defaultInstance)
      |    def withDoubleConstant(__v: scala.meta.internal.semanticdb.DoubleConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(__v))
      |    def getStringConstant: scala.meta.internal.semanticdb.StringConstant = sealedValue.stringConstant.getOrElse(scala.meta.internal.semanticdb.StringConstant.defaultInstance)
      |    def withStringConstant(__v: scala.meta.internal.semanticdb.StringConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(__v))
      |    def getNullConstant: scala.meta.internal.semanticdb.NullConstant = sealedValue.nullConstant.getOrElse(scala.meta.internal.semanticdb.NullConstant.defaultInstance)
      |    def withNullConstant(__v: scala.meta.internal.semanticdb.NullConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant(__v))
      |    def clearSealedValue: ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty)
      |    def withSealedValue(__v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue): ConstantMessage = copy(sealedValue = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.unitConstant.orNull
      |        case 2 => sealedValue.booleanConstant.orNull
      |        case 3 => sealedValue.byteConstant.orNull
      |        case 4 => sealedValue.shortConstant.orNull
      |        case 5 => sealedValue.charConstant.orNull
      |        case 6 => sealedValue.intConstant.orNull
      |        case 7 => sealedValue.longConstant.orNull
      |        case 8 => sealedValue.floatConstant.orNull
      |        case 9 => sealedValue.doubleConstant.orNull
      |        case 10 => sealedValue.stringConstant.orNull
      |        case 11 => sealedValue.nullConstant.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.unitConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => sealedValue.booleanConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 3 => sealedValue.byteConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 4 => sealedValue.shortConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 5 => sealedValue.charConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 6 => sealedValue.intConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 7 => sealedValue.longConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 8 => sealedValue.floatConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 9 => sealedValue.doubleConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 10 => sealedValue.stringConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 11 => seale""".stripMargin) + new String(s"""|dValue.nullConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ConstantMessage
      |    def toConstant: scala.meta.internal.semanticdb.Constant = scala.meta.internal.semanticdb.Constant.ConstantTypeMapper.toCustom(this)
      |}
      |
      |object ConstantMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ConstantMessage] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ConstantMessage] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ConstantMessage = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.ConstantMessage(
      |      sealedValue = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.UnitConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant)
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.BooleanConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ByteConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ShortConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.CharConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(5)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.IntConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(6)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.LongConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(7)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.FloatConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(8)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.DoubleConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(9)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.StringConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(__fields.get(10)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.NullConstant]].map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant))
      |    .getOrElse(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty)
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ConstantMessage] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ConstantMessage(
      |        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.UnitConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant)
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.BooleanConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant))
      |    .orElse[scala.meta.internal.semanticdb.Con""".stripMargin) + new String(s"""|stantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ByteConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ShortConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.CharConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.IntConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.LongConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.FloatConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.DoubleConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.StringConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant))
      |    .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.NullConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant))
      |    .getOrElse(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(21)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(21)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.UnitConstant
      |      case 2 => __out = scala.meta.internal.semanticdb.BooleanConstant
      |      case 3 => __out = scala.meta.internal.semanticdb.ByteConstant
      |      case 4 => __out = scala.meta.internal.semanticdb.ShortConstant
      |      case 5 => __out = scala.meta.internal.semanticdb.CharConstant
      |      case 6 => __out = scala.meta.internal.semanticdb.IntConstant
      |      case 7 => __out = scala.meta.internal.semanticdb.LongConstant
      |      case 8 => __out = scala.meta.internal.semanticdb.FloatConstant
      |      case 9 => __out = scala.meta.internal.semanticdb.DoubleConstant
      |      case 10 => __out = scala.meta.internal.semanticdb.StringConstant
      |      case 11 => __out = scala.meta.internal.semanticdb.NullConstant
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ConstantMessage(
      |    sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty
      |  )
      |  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
      |    def isEmpty: _root_.scala.Boolean = false
      |    def isDefined: _root_.scala.Boolean = true
      |    def isUnitConstant: _root_.scala.Boolean = false
      |    def isBooleanConstant: _root_.scala.Boolean = false
      |    def isByteConstant: _root_.scala.Boolean = false
      |    def isShortConstant: _root_.scala.Boolean = false
      |    def isCharConstant: _root_.scala.Boolean = false
      |    def isIntConstant: _root_.scala.Boolean = false
      |    def isLongConstant: _root_.scala.Boolean = false
      |    def isFloatConstant: _root_.scala.Boolean = false
      |    def isDo""".stripMargin) + new String(s"""|ubleConstant: _root_.scala.Boolean = false
      |    def isStringConstant: _root_.scala.Boolean = false
      |    def isNullConstant: _root_.scala.Boolean = false
      |    def unitConstant: _root_.scala.Option[scala.meta.internal.semanticdb.UnitConstant] = _root_.scala.None
      |    def booleanConstant: _root_.scala.Option[scala.meta.internal.semanticdb.BooleanConstant] = _root_.scala.None
      |    def byteConstant: _root_.scala.Option[scala.meta.internal.semanticdb.ByteConstant] = _root_.scala.None
      |    def shortConstant: _root_.scala.Option[scala.meta.internal.semanticdb.ShortConstant] = _root_.scala.None
      |    def charConstant: _root_.scala.Option[scala.meta.internal.semanticdb.CharConstant] = _root_.scala.None
      |    def intConstant: _root_.scala.Option[scala.meta.internal.semanticdb.IntConstant] = _root_.scala.None
      |    def longConstant: _root_.scala.Option[scala.meta.internal.semanticdb.LongConstant] = _root_.scala.None
      |    def floatConstant: _root_.scala.Option[scala.meta.internal.semanticdb.FloatConstant] = _root_.scala.None
      |    def doubleConstant: _root_.scala.Option[scala.meta.internal.semanticdb.DoubleConstant] = _root_.scala.None
      |    def stringConstant: _root_.scala.Option[scala.meta.internal.semanticdb.StringConstant] = _root_.scala.None
      |    def nullConstant: _root_.scala.Option[scala.meta.internal.semanticdb.NullConstant] = _root_.scala.None
      |  }
      |  object SealedValue extends {
      |    @SerialVersionUID(0L)
      |    case object Empty extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = _root_.scala.Nothing
      |      override def isEmpty: _root_.scala.Boolean = true
      |      override def isDefined: _root_.scala.Boolean = false
      |      override def number: _root_.scala.Int = 0
      |      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      |    }
      |  
      |    @SerialVersionUID(0L)
      |    final case class UnitConstant(value: scala.meta.internal.semanticdb.UnitConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.UnitConstant
      |      override def isUnitConstant: _root_.scala.Boolean = true
      |      override def unitConstant: _root_.scala.Option[scala.meta.internal.semanticdb.UnitConstant] = Some(value)
      |      override def number: _root_.scala.Int = 1
      |    }
      |    @SerialVersionUID(0L)
      |    final case class BooleanConstant(value: scala.meta.internal.semanticdb.BooleanConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.BooleanConstant
      |      override def isBooleanConstant: _root_.scala.Boolean = true
      |      override def booleanConstant: _root_.scala.Option[scala.meta.internal.semanticdb.BooleanConstant] = Some(value)
      |      override def number: _root_.scala.Int = 2
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ByteConstant(value: scala.meta.internal.semanticdb.ByteConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ByteConstant
      |      override def isByteConstant: _root_.scala.Boolean = true
      |      override def byteConstant: _root_.scala.Option[scala.meta.internal.semanticdb.ByteConstant] = Some(value)
      |      override def number: _root_.scala.Int = 3
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ShortConstant(value: scala.meta.internal.semanticdb.ShortConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ShortConstant
      |      override def isShortConstant: _root_.scala.Boolean = true
      |      override def shortConstant: _root_.scala.Option[scala.meta.internal.semanticdb.ShortConstant] = Some(value)
      |      override def number: _root_.scala.Int = 4
      |    }
      |    @SerialVersionUID(0L)
      |    final case class CharConstant(value: scala.meta.internal.semanticdb.CharConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.CharConstant
      |      override def isCharConstant: _root_.scala.Boolean = true
      |      override def charConstant: _root_.scala.Option[scala.meta.internal.semanticdb.CharConstant] = Some(value)
      |      override def number: _root_.scala.Int = 5
      |    }
      |    @SerialVersionUID(0L)
      |    final case class IntConstant(value: scala.meta.internal.semanticdb.IntConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.IntConstant
      |      override def isIntConstant: _root_.scala.Boolean = true
      |      override def intConstant: _root_.scala.Option[scala.meta.internal.semanticdb.IntConstant] = Some(value)
      |      override def number: _root_.scala.Int = 6
      |    }
      |    @SerialVersionUID(0L)
      |    final case class LongConstant(value: scala.meta.internal.semanticdb.LongConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.LongConstant
      |      override def isLongConstant: _root_.scala.Boole""".stripMargin) + new String(s"""|an = true
      |      override def longConstant: _root_.scala.Option[scala.meta.internal.semanticdb.LongConstant] = Some(value)
      |      override def number: _root_.scala.Int = 7
      |    }
      |    @SerialVersionUID(0L)
      |    final case class FloatConstant(value: scala.meta.internal.semanticdb.FloatConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.FloatConstant
      |      override def isFloatConstant: _root_.scala.Boolean = true
      |      override def floatConstant: _root_.scala.Option[scala.meta.internal.semanticdb.FloatConstant] = Some(value)
      |      override def number: _root_.scala.Int = 8
      |    }
      |    @SerialVersionUID(0L)
      |    final case class DoubleConstant(value: scala.meta.internal.semanticdb.DoubleConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.DoubleConstant
      |      override def isDoubleConstant: _root_.scala.Boolean = true
      |      override def doubleConstant: _root_.scala.Option[scala.meta.internal.semanticdb.DoubleConstant] = Some(value)
      |      override def number: _root_.scala.Int = 9
      |    }
      |    @SerialVersionUID(0L)
      |    final case class StringConstant(value: scala.meta.internal.semanticdb.StringConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.StringConstant
      |      override def isStringConstant: _root_.scala.Boolean = true
      |      override def stringConstant: _root_.scala.Option[scala.meta.internal.semanticdb.StringConstant] = Some(value)
      |      override def number: _root_.scala.Int = 10
      |    }
      |    @SerialVersionUID(0L)
      |    final case class NullConstant(value: scala.meta.internal.semanticdb.NullConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.NullConstant
      |      override def isNullConstant: _root_.scala.Boolean = true
      |      override def nullConstant: _root_.scala.Option[scala.meta.internal.semanticdb.NullConstant] = Some(value)
      |      override def number: _root_.scala.Int = 11
      |    }
      |  }
      |  implicit class ConstantMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ConstantMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ConstantMessage](_l) {
      |    def unitConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UnitConstant] = field(_.getUnitConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(f_)))
      |    def booleanConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.BooleanConstant] = field(_.getBooleanConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(f_)))
      |    def byteConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ByteConstant] = field(_.getByteConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(f_)))
      |    def shortConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ShortConstant] = field(_.getShortConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(f_)))
      |    def charConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.CharConstant] = field(_.getCharConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(f_)))
      |    def intConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IntConstant] = field(_.getIntConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(f_)))
      |    def longConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.LongConstant] = field(_.getLongConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(f_)))
      |    def floatConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.FloatConstant] = field(_.getFloatConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(f_)))
      |    def doubleConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.DoubleConstant] = field(_.getDoubleConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(f_)))
      |    def stringConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.StringConstant] = field(_.getStringConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(f_)))
      |    def nullConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.NullConstant] = field(_.getNullConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.seman""".stripMargin) + new String(s"""|ticdb.ConstantMessage.SealedValue.NullConstant(f_)))
      |    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ConstantMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
      |  }
      |  final val UNIT_CONSTANT_FIELD_NUMBER = 1
      |  final val BOOLEAN_CONSTANT_FIELD_NUMBER = 2
      |  final val BYTE_CONSTANT_FIELD_NUMBER = 3
      |  final val SHORT_CONSTANT_FIELD_NUMBER = 4
      |  final val CHAR_CONSTANT_FIELD_NUMBER = 5
      |  final val INT_CONSTANT_FIELD_NUMBER = 6
      |  final val LONG_CONSTANT_FIELD_NUMBER = 7
      |  final val FLOAT_CONSTANT_FIELD_NUMBER = 8
      |  final val DOUBLE_CONSTANT_FIELD_NUMBER = 9
      |  final val STRING_CONSTANT_FIELD_NUMBER = 10
      |  final val NULL_CONSTANT_FIELD_NUMBER = 11
      |  def of(
      |    sealedValue: scala.meta.internal.semanticdb.ConstantMessage.SealedValue
      |  ): _root_.scala.meta.internal.semanticdb.ConstantMessage = _root_.scala.meta.internal.semanticdb.ConstantMessage(
      |    sealedValue
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class UnitConstant(
      |    ) extends scala.meta.internal.semanticdb.Constant with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[UnitConstant] with scalapb.lenses.Updatable[UnitConstant] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.UnitConstant = {
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.UnitConstant(
      |      )
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.UnitConstant
      |}
      |
      |object UnitConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnitConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnitConstant] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.UnitConstant = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    scala.meta.internal.semanticdb.UnitConstant(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.UnitConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.UnitConstant(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(22)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(22)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.UnitConstant(
      |  )
      |  implicit class UnitConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UnitConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.UnitConstant](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.UnitConstant = _root_.scala.meta.internal.semanticdb.UnitConstant(
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class BooleanConstant(
      |    value: _root_.scala.Boolean = false
      |    ) extends scala.meta.internal.semanticdb.Constant with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[BooleanConstant] with scalapb.lenses.Updatable[BooleanConstant] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != false) {
      |          __size += _roo""".stripMargin) + new String(s"""|t_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != false) {
      |          _output__.writeBool(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.BooleanConstant = {
      |      var __value = this.value
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 8 =>
      |            __value = _input__.readBool()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.BooleanConstant(
      |          value = __value
      |      )
      |    }
      |    def withValue(__v: _root_.scala.Boolean): BooleanConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != false) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PBoolean(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.BooleanConstant
      |}
      |
      |object BooleanConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.BooleanConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.BooleanConstant] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.BooleanConstant = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.BooleanConstant(
      |      __fieldsMap.getOrElse(__fields.get(0), false).asInstanceOf[_root_.scala.Boolean]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.BooleanConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.BooleanConstant(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(23)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(23)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.BooleanConstant(
      |    value = false
      |  )
      |  implicit class BooleanConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.BooleanConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.BooleanConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Boolean
      |  ): _root_.scala.meta.internal.semanticdb.BooleanConstant = _root_.scala.meta.internal.semanticdb.BooleanConstant(
      |    value
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ByteConstant(
      |    value: _root_.scala.Int = 0
      |    ) extends scala.meta.internal.semanticdb.Constant with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ByteConstant] with scalapb.lenses.Updatable[ByteConstant] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _roo""".stripMargin) + new String(s"""|t_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0) {
      |          _output__.writeInt32(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ByteConstant = {
      |      var __value = this.value
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 8 =>
      |            __value = _input__.readInt32()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ByteConstant(
      |          value = __value
      |      )
      |    }
      |    def withValue(__v: _root_.scala.Int): ByteConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PInt(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ByteConstant
      |}
      |
      |object ByteConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByteConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByteConstant] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ByteConstant = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.ByteConstant(
      |      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ByteConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ByteConstant(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(24)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(24)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ByteConstant(
      |    value = 0
      |  )
      |  implicit class ByteConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ByteConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ByteConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Int
      |  ): _root_.scala.meta.internal.semanticdb.ByteConstant = _root_.scala.meta.internal.semanticdb.ByteConstant(
      |    value
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ShortConstant(
      |    value: _root_.scala.Int = 0
      |    ) extends scala.meta.internal.semanticdb.Constant with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ShortConstant] wi""".stripMargin) + new String(s"""|th scalapb.lenses.Updatable[ShortConstant] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0) {
      |          _output__.writeInt32(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ShortConstant = {
      |      var __value = this.value
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 8 =>
      |            __value = _input__.readInt32()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ShortConstant(
      |          value = __value
      |      )
      |    }
      |    def withValue(__v: _root_.scala.Int): ShortConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PInt(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ShortConstant
      |}
      |
      |object ShortConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ShortConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ShortConstant] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ShortConstant = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.ShortConstant(
      |      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ShortConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ShortConstant(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(25)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(25)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ShortConstant(
      |    value = 0
      |  )
      |  implicit class ShortConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ShortConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ShortConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Int
      |  ): _root_.scala.meta.internal.semanticdb.ShortConstant = _root_.scala.meta.internal.semanticdb.ShortConstant(
      |    value
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class CharConstant(
      |    value: _root_.scala.Int = 0
      |    ) extends scala.meta.internal.semanticdb.""".stripMargin) + new String(s"""|Constant with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[CharConstant] with scalapb.lenses.Updatable[CharConstant] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0) {
      |          _output__.writeInt32(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.CharConstant = {
      |      var __value = this.value
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 8 =>
      |            __value = _input__.readInt32()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.CharConstant(
      |          value = __value
      |      )
      |    }
      |    def withValue(__v: _root_.scala.Int): CharConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PInt(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.CharConstant
      |}
      |
      |object CharConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.CharConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.CharConstant] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.CharConstant = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.CharConstant(
      |      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.CharConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.CharConstant(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(26)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(26)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.CharConstant(
      |    value = 0
      |  )
      |  implicit class CharConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.CharConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.CharConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Int
      |  ): _root_.scala.meta.internal.semanticdb.CharConstant = _root_.scala.meta.internal.semanticdb.CharConstant(
      |    value
      |  )
      |}
      |
      |@SerialVersionUID(""".stripMargin) + new String(s"""|0L)
      |final case class IntConstant(
      |    value: _root_.scala.Int = 0
      |    ) extends scala.meta.internal.semanticdb.Constant with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[IntConstant] with scalapb.lenses.Updatable[IntConstant] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0) {
      |          _output__.writeInt32(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.IntConstant = {
      |      var __value = this.value
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 8 =>
      |            __value = _input__.readInt32()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.IntConstant(
      |          value = __value
      |      )
      |    }
      |    def withValue(__v: _root_.scala.Int): IntConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PInt(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.IntConstant
      |}
      |
      |object IntConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntConstant] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.IntConstant = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.IntConstant(
      |      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.IntConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.IntConstant(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(27)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(27)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.IntConstant(
      |    value = 0
      |  )
      |  implicit class IntConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IntConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.IntConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Int
      |  ): _root_.scala.meta.internal.semanticdb.IntConst""".stripMargin) + new String(s"""|ant = _root_.scala.meta.internal.semanticdb.IntConstant(
      |    value
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class LongConstant(
      |    value: _root_.scala.Long = 0L
      |    ) extends scala.meta.internal.semanticdb.Constant with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[LongConstant] with scalapb.lenses.Updatable[LongConstant] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0L) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0L) {
      |          _output__.writeInt64(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.LongConstant = {
      |      var __value = this.value
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 8 =>
      |            __value = _input__.readInt64()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.LongConstant(
      |          value = __value
      |      )
      |    }
      |    def withValue(__v: _root_.scala.Long): LongConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0L) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PLong(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.LongConstant
      |}
      |
      |object LongConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.LongConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.LongConstant] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.LongConstant = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.LongConstant(
      |      __fieldsMap.getOrElse(__fields.get(0), 0L).asInstanceOf[_root_.scala.Long]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.LongConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.LongConstant(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(28)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(28)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.LongConstant(
      |    value = 0L
      |  )
      |  implicit class LongConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.LongConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.LongConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      | """.stripMargin) + new String(s"""| final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Long
      |  ): _root_.scala.meta.internal.semanticdb.LongConstant = _root_.scala.meta.internal.semanticdb.LongConstant(
      |    value
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class FloatConstant(
      |    value: _root_.scala.Float = 0.0f
      |    ) extends scala.meta.internal.semanticdb.Constant with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[FloatConstant] with scalapb.lenses.Updatable[FloatConstant] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0.0f) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0.0f) {
      |          _output__.writeFloat(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.FloatConstant = {
      |      var __value = this.value
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 13 =>
      |            __value = _input__.readFloat()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.FloatConstant(
      |          value = __value
      |      )
      |    }
      |    def withValue(__v: _root_.scala.Float): FloatConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0.0f) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PFloat(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.FloatConstant
      |}
      |
      |object FloatConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.FloatConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.FloatConstant] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.FloatConstant = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.FloatConstant(
      |      __fieldsMap.getOrElse(__fields.get(0), 0.0f).asInstanceOf[_root_.scala.Float]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.FloatConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.FloatConstant(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(29)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(29)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.FloatConstant(
      |    value = 0.0f
      |  )
      |  implicit class FloatConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.FloatConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.in""".stripMargin) + new String(s"""|ternal.semanticdb.FloatConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Float
      |  ): _root_.scala.meta.internal.semanticdb.FloatConstant = _root_.scala.meta.internal.semanticdb.FloatConstant(
      |    value
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class DoubleConstant(
      |    value: _root_.scala.Double = 0.0
      |    ) extends scala.meta.internal.semanticdb.Constant with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[DoubleConstant] with scalapb.lenses.Updatable[DoubleConstant] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0.0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0.0) {
      |          _output__.writeDouble(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.DoubleConstant = {
      |      var __value = this.value
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 9 =>
      |            __value = _input__.readDouble()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.DoubleConstant(
      |          value = __value
      |      )
      |    }
      |    def withValue(__v: _root_.scala.Double): DoubleConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0.0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PDouble(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.DoubleConstant
      |}
      |
      |object DoubleConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.DoubleConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.DoubleConstant] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.DoubleConstant = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.DoubleConstant(
      |      __fieldsMap.getOrElse(__fields.get(0), 0.0).asInstanceOf[_root_.scala.Double]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.DoubleConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.DoubleConstant(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Double]).getOrElse(0.0)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(30)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(30)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.DoubleConstant(
      |    value = 0.0
      |  )
      |  implicit """.stripMargin) + new String(s"""|class DoubleConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.DoubleConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.DoubleConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Double
      |  ): _root_.scala.meta.internal.semanticdb.DoubleConstant = _root_.scala.meta.internal.semanticdb.DoubleConstant(
      |    value
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class StringConstant(
      |    value: _root_.scala.Predef.String = ""
      |    ) extends scala.meta.internal.semanticdb.Constant with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[StringConstant] with scalapb.lenses.Updatable[StringConstant] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != "") {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.StringConstant = {
      |      var __value = this.value
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __value = _input__.readString()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.StringConstant(
      |          value = __value
      |      )
      |    }
      |    def withValue(__v: _root_.scala.Predef.String): StringConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.StringConstant
      |}
      |
      |object StringConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.StringConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.StringConstant] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.StringConstant = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.StringConstant(
      |      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.StringConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.StringConstant(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(31)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(31)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__field""".stripMargin) + new String(s"""|Number: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.StringConstant(
      |    value = ""
      |  )
      |  implicit class StringConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.StringConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.StringConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.StringConstant = _root_.scala.meta.internal.semanticdb.StringConstant(
      |    value
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class NullConstant(
      |    ) extends scala.meta.internal.semanticdb.Constant with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[NullConstant] with scalapb.lenses.Updatable[NullConstant] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.NullConstant = {
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.NullConstant(
      |      )
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.NullConstant
      |}
      |
      |object NullConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.NullConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.NullConstant] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.NullConstant = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    scala.meta.internal.semanticdb.NullConstant(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.NullConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.NullConstant(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(32)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(32)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.NullConstant(
      |  )
      |  implicit class NullConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.NullConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.NullConstant](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.NullConstant = _root_.scala.meta.internal.semanticdb.NullConstant(
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Diagnostic.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Diagnostic(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None,
      |    severity: scala.meta.internal.semanticdb.Diagnostic.Severity = scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY,
      |    message: _root_.scala.Predef.String = ""
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[Diagnostic] with scalapb.lenses.Updatable[Diagnostic] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (range.isDefined) {
      |        val __value = range.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      
      |      {
      |        val __value = severity
      |        if (__value != scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value.value)
      |        }
      |      };
      |      
      |      {
      |        val __value = message
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      range.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = severity
      |        if (__v != scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY) {
      |          _output__.writeEnum(2, __v.value)
      |        }
      |      };
      |      {
      |        val __v = message
      |        if (__v != "") {
      |          _output__.writeString(3, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Diagnostic = {
      |      var __range = this.range
      |      var __severity = this.severity
      |      var __message = this.message
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __range = Option(_root_.scalapb.LiteParser.readMessage(_input__, __range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)))
      |          case 16 =>
      |            __severity = scala.meta.internal.semanticdb.Diagnostic.Severity.fromValue(_input__.readEnum())
      |          case 26 =>
      |            __message = _input__.readString()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.Diagnostic(
      |          range = __range,
      |          severity = __severity,
      |          message = __message
      |      )
      |    }
      |    def getRange: scala.meta.internal.semanticdb.Range = range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)
      |    def clearRange: Diagnostic = copy(range = _root_.scala.None)
      |    def withRange(__v: scala.meta.internal.semanticdb.Range): Diagnostic = copy(range = Option(__v))
      |    def withSeverity(__v: scala.meta.internal.semanticdb.Diagnostic.Severity): Diagnostic = copy(severity = __v)
      |    def withMessage(__v: _root_.scala.Predef.String): Diagnostic = copy(message = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => range.orNull
      |        case 2 => {
      |          val __t = severity.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |        case 3 => {
      |          val __t = message
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => _root_.scalapb.descriptors.PEnum(severity.scalaValueDescriptor)
      |        case 3 => _root_.scalapb.descriptors.PString(message)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.Diagnostic
      |}
      |
      |object Diagnostic extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Diagnostic] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semantic""".stripMargin) + new String(s"""|db.Diagnostic] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.Diagnostic = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.Diagnostic(
      |      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Range]],
      |      scala.meta.internal.semanticdb.Diagnostic.Severity.fromValue(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      |      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Diagnostic] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Diagnostic(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Range]]),
      |        scala.meta.internal.semanticdb.Diagnostic.Severity.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY.scalaValueDescriptor).number),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(50)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(50)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Range
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      |    (__fieldNumber: @_root_.scala.unchecked) match {
      |      case 2 => scala.meta.internal.semanticdb.Diagnostic.Severity
      |    }
      |  }
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Diagnostic(
      |    range = _root_.scala.None,
      |    severity = scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY,
      |    message = ""
      |  )
      |  sealed trait Severity extends _root_.scalapb.GeneratedEnum {
      |    type EnumType = Severity
      |    def isUnknownSeverity: _root_.scala.Boolean = false
      |    def isError: _root_.scala.Boolean = false
      |    def isWarning: _root_.scala.Boolean = false
      |    def isInformation: _root_.scala.Boolean = false
      |    def isHint: _root_.scala.Boolean = false
      |    def companion: _root_.scalapb.GeneratedEnumCompanion[Severity] = scala.meta.internal.semanticdb.Diagnostic.Severity
      |  }
      |  
      |  object Severity extends _root_.scalapb.GeneratedEnumCompanion[Severity] {
      |    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Severity] = this
      |    @SerialVersionUID(0L)
      |    case object UNKNOWN_SEVERITY extends Severity {
      |      val value = 0
      |      val index = 0
      |      val name = "UNKNOWN_SEVERITY"
      |      override def isUnknownSeverity: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object ERROR extends Severity {
      |      val value = 1
      |      val index = 1
      |      val name = "ERROR"
      |      override def isError: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object WARNING extends Severity {
      |      val value = 2
      |      val index = 2
      |      val name = "WARNING"
      |      override def isWarning: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object INFORMATION extends Severity {
      |      val value = 3
      |      val index = 3
      |      val name = "INFORMATION"
      |      override def isInformation: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object HINT extends Severity {
      |      val value = 4
      |      val index = 4
      |      val name = "HINT"
      |      override def isHint: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    final case class Unrecognized(value: _root_.scala.Int) extends Severity with _root_.scalapb.UnrecognizedEnum
      |    
      |    lazy val values = scala.collection.immutable.Seq(UNKNOWN_SEVERITY, ERROR, WARNING, I""".stripMargin) + new String(s"""|NFORMATION, HINT)
      |    def fromValue(value: _root_.scala.Int): Severity = value match {
      |      case 0 => UNKNOWN_SEVERITY
      |      case 1 => ERROR
      |      case 2 => WARNING
      |      case 3 => INFORMATION
      |      case 4 => HINT
      |      case __other => Unrecognized(__other)
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb.Diagnostic.javaDescriptor.getEnumTypes.get(0)
      |    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb.Diagnostic.scalaDescriptor.enums(0)
      |  }
      |  implicit class DiagnosticLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Diagnostic]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Diagnostic](_l) {
      |    def range: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
      |    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Range]] = field(_.range)((c_, f_) => c_.copy(range = f_))
      |    def severity: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Diagnostic.Severity] = field(_.severity)((c_, f_) => c_.copy(severity = f_))
      |    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
      |  }
      |  final val RANGE_FIELD_NUMBER = 1
      |  final val SEVERITY_FIELD_NUMBER = 2
      |  final val MESSAGE_FIELD_NUMBER = 3
      |  def of(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range],
      |    severity: scala.meta.internal.semanticdb.Diagnostic.Severity,
      |    message: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.Diagnostic = _root_.scala.meta.internal.semanticdb.Diagnostic(
      |    range,
      |    severity,
      |    message
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Documentation.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Documentation(
      |    message: _root_.scala.Predef.String = "",
      |    format: scala.meta.internal.semanticdb.Documentation.Format = scala.meta.internal.semanticdb.Documentation.Format.HTML
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[Documentation] with scalapb.lenses.Updatable[Documentation] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = message
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = format
      |        if (__value != scala.meta.internal.semanticdb.Documentation.Format.HTML) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value.value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = message
      |        if (__v != "") {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |      {
      |        val __v = format
      |        if (__v != scala.meta.internal.semanticdb.Documentation.Format.HTML) {
      |          _output__.writeEnum(2, __v.value)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Documentation = {
      |      var __message = this.message
      |      var __format = this.format
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __message = _input__.readString()
      |          case 16 =>
      |            __format = scala.meta.internal.semanticdb.Documentation.Format.fromValue(_input__.readEnum())
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.Documentation(
      |          message = __message,
      |          format = __format
      |      )
      |    }
      |    def withMessage(__v: _root_.scala.Predef.String): Documentation = copy(message = __v)
      |    def withFormat(__v: scala.meta.internal.semanticdb.Documentation.Format): Documentation = copy(format = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = message
      |          if (__t != "") __t else null
      |        }
      |        case 2 => {
      |          val __t = format.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(message)
      |        case 2 => _root_.scalapb.descriptors.PEnum(format.scalaValueDescriptor)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.Documentation
      |}
      |
      |object Documentation extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Documentation] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Documentation] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.Documentation = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.Documentation(
      |      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      |      scala.meta.internal.semanticdb.Documentation.Format.fromValue(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.Documentation.Format.HTML.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Documentation] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescripto""".stripMargin) + new String(s"""|r does not match message type.")
      |      scala.meta.internal.semanticdb.Documentation(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        scala.meta.internal.semanticdb.Documentation.Format.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.Documentation.Format.HTML.scalaValueDescriptor).number)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(39)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(39)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      |    (__fieldNumber: @_root_.scala.unchecked) match {
      |      case 2 => scala.meta.internal.semanticdb.Documentation.Format
      |    }
      |  }
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Documentation(
      |    message = "",
      |    format = scala.meta.internal.semanticdb.Documentation.Format.HTML
      |  )
      |  sealed trait Format extends _root_.scalapb.GeneratedEnum {
      |    type EnumType = Format
      |    def isHtml: _root_.scala.Boolean = false
      |    def isMarkdown: _root_.scala.Boolean = false
      |    def isJavadoc: _root_.scala.Boolean = false
      |    def isScaladoc: _root_.scala.Boolean = false
      |    def isKdoc: _root_.scala.Boolean = false
      |    def companion: _root_.scalapb.GeneratedEnumCompanion[Format] = scala.meta.internal.semanticdb.Documentation.Format
      |  }
      |  
      |  object Format extends _root_.scalapb.GeneratedEnumCompanion[Format] {
      |    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Format] = this
      |    @SerialVersionUID(0L)
      |    case object HTML extends Format {
      |      val value = 0
      |      val index = 0
      |      val name = "HTML"
      |      override def isHtml: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object MARKDOWN extends Format {
      |      val value = 1
      |      val index = 1
      |      val name = "MARKDOWN"
      |      override def isMarkdown: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object JAVADOC extends Format {
      |      val value = 2
      |      val index = 2
      |      val name = "JAVADOC"
      |      override def isJavadoc: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object SCALADOC extends Format {
      |      val value = 3
      |      val index = 3
      |      val name = "SCALADOC"
      |      override def isScaladoc: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object KDOC extends Format {
      |      val value = 4
      |      val index = 4
      |      val name = "KDOC"
      |      override def isKdoc: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    final case class Unrecognized(value: _root_.scala.Int) extends Format with _root_.scalapb.UnrecognizedEnum
      |    
      |    lazy val values = scala.collection.immutable.Seq(HTML, MARKDOWN, JAVADOC, SCALADOC, KDOC)
      |    def fromValue(value: _root_.scala.Int): Format = value match {
      |      case 0 => HTML
      |      case 1 => MARKDOWN
      |      case 2 => JAVADOC
      |      case 3 => SCALADOC
      |      case 4 => KDOC
      |      case __other => Unrecognized(__other)
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb.Documentation.javaDescriptor.getEnumTypes.get(0)
      |    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb.Documentation.scalaDescriptor.enums(0)
      |  }
      |  implicit class DocumentationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Documentation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Documentation](_l) {
      |    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
      |    def format: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Documentation.Format] = field(_.format)((c_, f_) => c_.copy(format = f_))
      |  }
      |  final val MESSAGE_FIELD_NUMBER = 1
      |  final val FORMAT_FIELD_NUMBER = 2
      |  def of(
      |    message: _root_.scala.Predef.String,
      |    format: scala.meta.internal.semanticdb.Documentation.Format
      |  ): _root_.scala.meta.internal.semanticdb.Documentation = _root_.scala.meta.internal.semanticdb.Documentation(
      |    message,
      |    format
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Language.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed trait Language extends _root_.scalapb.GeneratedEnum {
      |  type EnumType = Language
      |  def isUnknownLanguage: _root_.scala.Boolean = false
      |  def isScala: _root_.scala.Boolean = false
      |  def isJava: _root_.scala.Boolean = false
      |  def companion: _root_.scalapb.GeneratedEnumCompanion[Language] = scala.meta.internal.semanticdb.Language
      |}
      |
      |object Language extends _root_.scalapb.GeneratedEnumCompanion[Language] {
      |  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Language] = this
      |  @SerialVersionUID(0L)
      |  case object UNKNOWN_LANGUAGE extends Language {
      |    val value = 0
      |    val index = 0
      |    val name = "UNKNOWN_LANGUAGE"
      |    override def isUnknownLanguage: _root_.scala.Boolean = true
      |  }
      |  
      |  @SerialVersionUID(0L)
      |  case object SCALA extends Language {
      |    val value = 1
      |    val index = 1
      |    val name = "SCALA"
      |    override def isScala: _root_.scala.Boolean = true
      |  }
      |  
      |  @SerialVersionUID(0L)
      |  case object JAVA extends Language {
      |    val value = 2
      |    val index = 2
      |    val name = "JAVA"
      |    override def isJava: _root_.scala.Boolean = true
      |  }
      |  
      |  @SerialVersionUID(0L)
      |  final case class Unrecognized(value: _root_.scala.Int) extends Language with _root_.scalapb.UnrecognizedEnum
      |  
      |  lazy val values = scala.collection.immutable.Seq(UNKNOWN_LANGUAGE, SCALA, JAVA)
      |  def fromValue(value: _root_.scala.Int): Language = value match {
      |    case 0 => UNKNOWN_LANGUAGE
      |    case 1 => SCALA
      |    case 2 => JAVA
      |    case __other => Unrecognized(__other)
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = SemanticdbProto.javaDescriptor.getEnumTypes.get(1)
      |  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = SemanticdbProto.scalaDescriptor.enums(1)
      |}""".stripMargin
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Location.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Location(
      |    uri: _root_.scala.Predef.String = "",
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[Location] with scalapb.lenses.Updatable[Location] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = uri
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      if (range.isDefined) {
      |        val __value = range.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = uri
      |        if (__v != "") {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |      range.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Location = {
      |      var __uri = this.uri
      |      var __range = this.range
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __uri = _input__.readString()
      |          case 18 =>
      |            __range = Option(_root_.scalapb.LiteParser.readMessage(_input__, __range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.Location(
      |          uri = __uri,
      |          range = __range
      |      )
      |    }
      |    def withUri(__v: _root_.scala.Predef.String): Location = copy(uri = __v)
      |    def getRange: scala.meta.internal.semanticdb.Range = range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)
      |    def clearRange: Location = copy(range = _root_.scala.None)
      |    def withRange(__v: scala.meta.internal.semanticdb.Range): Location = copy(range = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = uri
      |          if (__t != "") __t else null
      |        }
      |        case 2 => range.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(uri)
      |        case 2 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.Location
      |}
      |
      |object Location extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Location] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Location] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.Location = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.Location(
      |      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      |      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Range]]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Location] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Location(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        __""".stripMargin) + new String(s"""|fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Range]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(3)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(3)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 2 => __out = scala.meta.internal.semanticdb.Range
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Location(
      |    uri = "",
      |    range = _root_.scala.None
      |  )
      |  implicit class LocationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Location]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Location](_l) {
      |    def uri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.uri)((c_, f_) => c_.copy(uri = f_))
      |    def range: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
      |    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Range]] = field(_.range)((c_, f_) => c_.copy(range = f_))
      |  }
      |  final val URI_FIELD_NUMBER = 1
      |  final val RANGE_FIELD_NUMBER = 2
      |  def of(
      |    uri: _root_.scala.Predef.String,
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range]
      |  ): _root_.scala.meta.internal.semanticdb.Location = _root_.scala.meta.internal.semanticdb.Location(
      |    uri,
      |    range
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Range.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Range(
      |    startLine: _root_.scala.Int = 0,
      |    startCharacter: _root_.scala.Int = 0,
      |    endLine: _root_.scala.Int = 0,
      |    endCharacter: _root_.scala.Int = 0
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[Range] with scalapb.lenses.Updatable[Range] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = startLine
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = startCharacter
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = endLine
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = endCharacter
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = startLine
      |        if (__v != 0) {
      |          _output__.writeInt32(1, __v)
      |        }
      |      };
      |      {
      |        val __v = startCharacter
      |        if (__v != 0) {
      |          _output__.writeInt32(2, __v)
      |        }
      |      };
      |      {
      |        val __v = endLine
      |        if (__v != 0) {
      |          _output__.writeInt32(3, __v)
      |        }
      |      };
      |      {
      |        val __v = endCharacter
      |        if (__v != 0) {
      |          _output__.writeInt32(4, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Range = {
      |      var __startLine = this.startLine
      |      var __startCharacter = this.startCharacter
      |      var __endLine = this.endLine
      |      var __endCharacter = this.endCharacter
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 8 =>
      |            __startLine = _input__.readInt32()
      |          case 16 =>
      |            __startCharacter = _input__.readInt32()
      |          case 24 =>
      |            __endLine = _input__.readInt32()
      |          case 32 =>
      |            __endCharacter = _input__.readInt32()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.Range(
      |          startLine = __startLine,
      |          startCharacter = __startCharacter,
      |          endLine = __endLine,
      |          endCharacter = __endCharacter
      |      )
      |    }
      |    def withStartLine(__v: _root_.scala.Int): Range = copy(startLine = __v)
      |    def withStartCharacter(__v: _root_.scala.Int): Range = copy(startCharacter = __v)
      |    def withEndLine(__v: _root_.scala.Int): Range = copy(endLine = __v)
      |    def withEndCharacter(__v: _root_.scala.Int): Range = copy(endCharacter = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = startLine
      |          if (__t != 0) __t else null
      |        }
      |        case 2 => {
      |          val __t = startCharacter
      |          if (__t != 0) __t else null
      |        }
      |        case 3 => {
      |          val __t = endLine
      |          if (__t != 0) __t else null
      |        }
      |        case 4 => {
      |          val __t = endCharacter
      |          if (__t != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PInt(startLine)
      |        case 2 => _root_.scalapb.descriptors.PInt(startCharacter)
      |        case 3 => _root_.scalapb.descriptors.PInt(endLine)
      |        case 4 => _root_.scalapb.descriptors.PInt(endCharacter)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.Range
      |}
      |
      |object Range extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Range] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Range] = this
      |  def fromFieldsMap(__fiel""".stripMargin) + new String(s"""|dsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.Range = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.Range(
      |      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      |      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int],
      |      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int],
      |      __fieldsMap.getOrElse(__fields.get(3), 0).asInstanceOf[_root_.scala.Int]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Range] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Range(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(2)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(2)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Range(
      |    startLine = 0,
      |    startCharacter = 0,
      |    endLine = 0,
      |    endCharacter = 0
      |  )
      |  implicit class RangeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Range](_l) {
      |    def startLine: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.startLine)((c_, f_) => c_.copy(startLine = f_))
      |    def startCharacter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.startCharacter)((c_, f_) => c_.copy(startCharacter = f_))
      |    def endLine: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.endLine)((c_, f_) => c_.copy(endLine = f_))
      |    def endCharacter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.endCharacter)((c_, f_) => c_.copy(endCharacter = f_))
      |  }
      |  final val START_LINE_FIELD_NUMBER = 1
      |  final val START_CHARACTER_FIELD_NUMBER = 2
      |  final val END_LINE_FIELD_NUMBER = 3
      |  final val END_CHARACTER_FIELD_NUMBER = 4
      |  def of(
      |    startLine: _root_.scala.Int,
      |    startCharacter: _root_.scala.Int,
      |    endLine: _root_.scala.Int,
      |    endCharacter: _root_.scala.Int
      |  ): _root_.scala.meta.internal.semanticdb.Range = _root_.scala.meta.internal.semanticdb.Range(
      |    startLine,
      |    startCharacter,
      |    endLine,
      |    endCharacter
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Schema.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed trait Schema extends _root_.scalapb.GeneratedEnum {
      |  type EnumType = Schema
      |  def isLegacy: _root_.scala.Boolean = false
      |  def isSemanticdb3: _root_.scala.Boolean = false
      |  def isSemanticdb4: _root_.scala.Boolean = false
      |  def companion: _root_.scalapb.GeneratedEnumCompanion[Schema] = scala.meta.internal.semanticdb.Schema
      |}
      |
      |object Schema extends _root_.scalapb.GeneratedEnumCompanion[Schema] {
      |  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Schema] = this
      |  @SerialVersionUID(0L)
      |  case object LEGACY extends Schema {
      |    val value = 0
      |    val index = 0
      |    val name = "LEGACY"
      |    override def isLegacy: _root_.scala.Boolean = true
      |  }
      |  
      |  @SerialVersionUID(0L)
      |  case object SEMANTICDB3 extends Schema {
      |    val value = 3
      |    val index = 1
      |    val name = "SEMANTICDB3"
      |    override def isSemanticdb3: _root_.scala.Boolean = true
      |  }
      |  
      |  @SerialVersionUID(0L)
      |  case object SEMANTICDB4 extends Schema {
      |    val value = 4
      |    val index = 2
      |    val name = "SEMANTICDB4"
      |    override def isSemanticdb4: _root_.scala.Boolean = true
      |  }
      |  
      |  @SerialVersionUID(0L)
      |  final case class Unrecognized(value: _root_.scala.Int) extends Schema with _root_.scalapb.UnrecognizedEnum
      |  
      |  lazy val values = scala.collection.immutable.Seq(LEGACY, SEMANTICDB3, SEMANTICDB4)
      |  def fromValue(value: _root_.scala.Int): Schema = value match {
      |    case 0 => LEGACY
      |    case 3 => SEMANTICDB3
      |    case 4 => SEMANTICDB4
      |    case __other => Unrecognized(__other)
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = SemanticdbProto.javaDescriptor.getEnumTypes.get(0)
      |  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = SemanticdbProto.scalaDescriptor.enums(0)
      |}""".stripMargin
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Scope.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Scope(
      |    symlinks: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      |    hardlinks: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[Scope] with scalapb.lenses.Updatable[Scope] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      symlinks.foreach { __item =>
      |        val __value = __item
      |        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |      }
      |      hardlinks.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      symlinks.foreach { __v =>
      |        val __m = __v
      |        _output__.writeString(1, __m)
      |      };
      |      hardlinks.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Scope = {
      |      val __symlinks = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.symlinks)
      |      val __hardlinks = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.SymbolInformation] ++= this.hardlinks)
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __symlinks += _input__.readString()
      |          case 18 =>
      |            __hardlinks += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.SymbolInformation.defaultInstance)
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.Scope(
      |          symlinks = __symlinks.result(),
      |          hardlinks = __hardlinks.result()
      |      )
      |    }
      |    def clearSymlinks = copy(symlinks = _root_.scala.Seq.empty)
      |    def addSymlinks(__vs: _root_.scala.Predef.String*): Scope = addAllSymlinks(__vs)
      |    def addAllSymlinks(__vs: Iterable[_root_.scala.Predef.String]): Scope = copy(symlinks = symlinks ++ __vs)
      |    def withSymlinks(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Scope = copy(symlinks = __v)
      |    def clearHardlinks = copy(hardlinks = _root_.scala.Seq.empty)
      |    def addHardlinks(__vs: scala.meta.internal.semanticdb.SymbolInformation*): Scope = addAllHardlinks(__vs)
      |    def addAllHardlinks(__vs: Iterable[scala.meta.internal.semanticdb.SymbolInformation]): Scope = copy(hardlinks = hardlinks ++ __vs)
      |    def withHardlinks(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]): Scope = copy(hardlinks = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => symlinks
      |        case 2 => hardlinks
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(symlinks.iterator.map(_root_.scalapb.descriptors.PString).toVector)
      |        case 2 => _root_.scalapb.descriptors.PRepeated(hardlinks.iterator.map(_.toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.Scope
      |}
      |
      |object Scope extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Scope] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Scope] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.Scope = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.Scope(
      |      __fieldsMap.getOrElse(__fields.get(0), N""".stripMargin) + new String(s"""|il).asInstanceOf[_root_.scala.Seq[_root_.scala.Predef.String]],
      |      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Scope] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Scope(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]]).getOrElse(_root_.scala.Seq.empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(4)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(4)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 2 => __out = scala.meta.internal.semanticdb.SymbolInformation
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Scope(
      |    symlinks = _root_.scala.Seq.empty,
      |    hardlinks = _root_.scala.Seq.empty
      |  )
      |  implicit class ScopeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Scope](_l) {
      |    def symlinks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.symlinks)((c_, f_) => c_.copy(symlinks = f_))
      |    def hardlinks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]] = field(_.hardlinks)((c_, f_) => c_.copy(hardlinks = f_))
      |  }
      |  final val SYMLINKS_FIELD_NUMBER = 1
      |  final val HARDLINKS_FIELD_NUMBER = 2
      |  def of(
      |    symlinks: _root_.scala.Seq[_root_.scala.Predef.String],
      |    hardlinks: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]
      |  ): _root_.scala.meta.internal.semanticdb.Scope = _root_.scala.meta.internal.semanticdb.Scope(
      |    symlinks,
      |    hardlinks
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/SemanticdbProto.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |object SemanticdbProto extends _root_.scalapb.GeneratedFileObject {
      |  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
      |    scalapb.options.ScalapbProto
      |  )
      |  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      |    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      |      scala.meta.internal.semanticdb.TextDocuments,
      |      scala.meta.internal.semanticdb.TextDocument,
      |      scala.meta.internal.semanticdb.Range,
      |      scala.meta.internal.semanticdb.Location,
      |      scala.meta.internal.semanticdb.Scope,
      |      scala.meta.internal.semanticdb.TypeMessage,
      |      scala.meta.internal.semanticdb.TypeRef,
      |      scala.meta.internal.semanticdb.SingleType,
      |      scala.meta.internal.semanticdb.ThisType,
      |      scala.meta.internal.semanticdb.SuperType,
      |      scala.meta.internal.semanticdb.ConstantType,
      |      scala.meta.internal.semanticdb.IntersectionType,
      |      scala.meta.internal.semanticdb.UnionType,
      |      scala.meta.internal.semanticdb.WithType,
      |      scala.meta.internal.semanticdb.StructuralType,
      |      scala.meta.internal.semanticdb.AnnotatedType,
      |      scala.meta.internal.semanticdb.ExistentialType,
      |      scala.meta.internal.semanticdb.UniversalType,
      |      scala.meta.internal.semanticdb.ByNameType,
      |      scala.meta.internal.semanticdb.RepeatedType,
      |      scala.meta.internal.semanticdb.MatchType,
      |      scala.meta.internal.semanticdb.ConstantMessage,
      |      scala.meta.internal.semanticdb.UnitConstant,
      |      scala.meta.internal.semanticdb.BooleanConstant,
      |      scala.meta.internal.semanticdb.ByteConstant,
      |      scala.meta.internal.semanticdb.ShortConstant,
      |      scala.meta.internal.semanticdb.CharConstant,
      |      scala.meta.internal.semanticdb.IntConstant,
      |      scala.meta.internal.semanticdb.LongConstant,
      |      scala.meta.internal.semanticdb.FloatConstant,
      |      scala.meta.internal.semanticdb.DoubleConstant,
      |      scala.meta.internal.semanticdb.StringConstant,
      |      scala.meta.internal.semanticdb.NullConstant,
      |      scala.meta.internal.semanticdb.SignatureMessage,
      |      scala.meta.internal.semanticdb.ClassSignature,
      |      scala.meta.internal.semanticdb.MethodSignature,
      |      scala.meta.internal.semanticdb.TypeSignature,
      |      scala.meta.internal.semanticdb.ValueSignature,
      |      scala.meta.internal.semanticdb.SymbolInformation,
      |      scala.meta.internal.semanticdb.Documentation,
      |      scala.meta.internal.semanticdb.Annotation,
      |      scala.meta.internal.semanticdb.AccessMessage,
      |      scala.meta.internal.semanticdb.PrivateAccess,
      |      scala.meta.internal.semanticdb.PrivateThisAccess,
      |      scala.meta.internal.semanticdb.PrivateWithinAccess,
      |      scala.meta.internal.semanticdb.ProtectedAccess,
      |      scala.meta.internal.semanticdb.ProtectedThisAccess,
      |      scala.meta.internal.semanticdb.ProtectedWithinAccess,
      |      scala.meta.internal.semanticdb.PublicAccess,
      |      scala.meta.internal.semanticdb.SymbolOccurrence,
      |      scala.meta.internal.semanticdb.Diagnostic,
      |      scala.meta.internal.semanticdb.Synthetic,
      |      scala.meta.internal.semanticdb.TreeMessage,
      |      scala.meta.internal.semanticdb.ApplyTree,
      |      scala.meta.internal.semanticdb.FunctionTree,
      |      scala.meta.internal.semanticdb.IdTree,
      |      scala.meta.internal.semanticdb.LiteralTree,
      |      scala.meta.internal.semanticdb.MacroExpansionTree,
      |      scala.meta.internal.semanticdb.OriginalTree,
      |      scala.meta.internal.semanticdb.SelectTree,
      |      scala.meta.internal.semanticdb.TypeApplyTree
      |    )
      |  private lazy val ProtoBytes: Array[Byte] =
      |      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
      |  ${"\"" * 3}ChBzZW1hbnRpY2RiLnByb3RvEh5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIaFXNjYWxhcGIvc2NhbGFwYi5wcm90b
      |  yJrCg1UZXh0RG9jdW1lbnRzEloKCWRvY3VtZW50cxgBIAMoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UZXh0R
      |  G9jdW1lbnRCDuI/CxIJZG9jdW1lbnRzUglkb2N1bWVudHMilgUKDFRleHREb2N1bWVudBJLCgZzY2hlbWEYASABKA4yJi5zY2FsY
      |  S5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2NoZW1hQgviPwgSBnNjaGVtYVIGc2NoZW1hEhoKA3VyaRgCIAEoCUII4j8FEgN1c
      |  mlSA3VyaRIdCgR0ZXh0GAMgASgJQgniPwYSBHRleHRSBHRleHQSGgoDbWQ1GAsgASgJQgjiPwUSA21kNVIDbWQ1ElMKCGxhbmd1Y
      |  WdlGAogASgOMiguc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkxhbmd1YWdlQg3iPwoSCGxhbmd1YWdlUghsYW5ndWFnZ
      |  RJZCgdzeW1ib2xzGAUgAygLMjEuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlN5bWJvbEluZm9ybWF0aW9uQgziPwkSB
      |  3N5bWJvbHNSB3N5bWJvbHMSZAoLb2NjdXJyZW5jZXMYBiADKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3ltY
      |  m9sT2NjdXJyZW5jZUIQ4j8NEgtvY2N1cnJlbmNlc1ILb2NjdXJyZW5jZXMSXgoLZGlhZ25vc3RpY3MYByADKAsyKi5zY2FsYS5tZ
      |  XRhLmludGVybmFsLnNlbWFudGljZGIuRGlhZ25vc3RpY0IQ4j8NEgtkaWFnbm9zdGljc1ILZGlhZ25vc3RpY3MSWgoKc3ludGhld
      |  GljcxgMIAMoCzIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW50aGV0aWNCD+I/DBIKc3ludGhldGljc1IKc3lud
      |  GhldGljc0oECAQQBUoECAgQCUoECAkQCiLVAQoFUmFuZ2USLQoKc3RhcnRfbGluZRgBIAEoBUIO4j8LE""".stripMargin) + new String(s"""|glzdGFydExpbmVSCXN0Y
      |  XJ0TGluZRI8Cg9zdGFydF9jaGFyYWN0ZXIYAiABKAVCE+I/EBIOc3RhcnRDaGFyYWN0ZXJSDnN0YXJ0Q2hhcmFjdGVyEicKCGVuZ
      |  F9saW5lGAMgASgFQgziPwkSB2VuZExpbmVSB2VuZExpbmUSNgoNZW5kX2NoYXJhY3RlchgEIAEoBUIR4j8OEgxlbmRDaGFyYWN0Z
      |  XJSDGVuZENoYXJhY3RlciJvCghMb2NhdGlvbhIaCgN1cmkYASABKAlCCOI/BRIDdXJpUgN1cmkSRwoFcmFuZ2UYAiABKAsyJS5zY
      |  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuUmFuZ2VCCuI/BxIFcmFuZ2VSBXJhbmdlIpMBCgVTY29wZRIpCghzeW1saW5rc
      |  xgBIAMoCUIN4j8KEghzeW1saW5rc1IIc3ltbGlua3MSXwoJaGFyZGxpbmtzGAIgAygLMjEuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
      |  W1hbnRpY2RiLlN5bWJvbEluZm9ybWF0aW9uQg7iPwsSCWhhcmRsaW5rc1IJaGFyZGxpbmtzIqkMCgRUeXBlElIKCHR5cGVfcmVmG
      |  AIgASgLMicuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSZWZCDOI/CRIHdHlwZVJlZkgAUgd0eXBlUmVmEl4KC
      |  3NpbmdsZV90eXBlGBQgASgLMiouc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNpbmdsZVR5cGVCD+I/DBIKc2luZ2xlV
      |  HlwZUgAUgpzaW5nbGVUeXBlElYKCXRoaXNfdHlwZRgVIAEoCzIoLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UaGlzV
      |  HlwZUIN4j8KEgh0aGlzVHlwZUgAUgh0aGlzVHlwZRJaCgpzdXBlcl90eXBlGBYgASgLMikuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
      |  W1hbnRpY2RiLlN1cGVyVHlwZUIO4j8LEglzdXBlclR5cGVIAFIJc3VwZXJUeXBlEmYKDWNvbnN0YW50X3R5cGUYFyABKAsyLC5zY
      |  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQ29uc3RhbnRUeXBlQhHiPw4SDGNvbnN0YW50VHlwZUgAUgxjb25zdGFudFR5c
      |  GUSdgoRaW50ZXJzZWN0aW9uX3R5cGUYESABKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuSW50ZXJzZWN0aW9uV
      |  HlwZUIV4j8SEhBpbnRlcnNlY3Rpb25UeXBlSABSEGludGVyc2VjdGlvblR5cGUSWgoKdW5pb25fdHlwZRgSIAEoCzIpLnNjYWxhL
      |  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5VbmlvblR5cGVCDuI/CxIJdW5pb25UeXBlSABSCXVuaW9uVHlwZRJWCgl3aXRoX3R5c
      |  GUYEyABKAsyKC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuV2l0aFR5cGVCDeI/ChIId2l0aFR5cGVIAFIId2l0aFR5c
      |  GUSbgoPc3RydWN0dXJhbF90eXBlGAcgASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlN0cnVjdHVyYWxUeXBlQ
      |  hPiPxASDnN0cnVjdHVyYWxUeXBlSABSDnN0cnVjdHVyYWxUeXBlEmoKDmFubm90YXRlZF90eXBlGAggASgLMi0uc2NhbGEubWV0Y
      |  S5pbnRlcm5hbC5zZW1hbnRpY2RiLkFubm90YXRlZFR5cGVCEuI/DxINYW5ub3RhdGVkVHlwZUgAUg1hbm5vdGF0ZWRUeXBlEnIKE
      |  GV4aXN0ZW50aWFsX3R5cGUYCSABKAsyLy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuRXhpc3RlbnRpYWxUeXBlQhTiP
      |  xESD2V4aXN0ZW50aWFsVHlwZUgAUg9leGlzdGVudGlhbFR5cGUSagoOdW5pdmVyc2FsX3R5cGUYCiABKAsyLS5zY2FsYS5tZXRhL
      |  mludGVybmFsLnNlbWFudGljZGIuVW5pdmVyc2FsVHlwZUIS4j8PEg11bml2ZXJzYWxUeXBlSABSDXVuaXZlcnNhbFR5cGUSXwoMY
      |  nlfbmFtZV90eXBlGA0gASgLMiouc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkJ5TmFtZVR5cGVCD+I/DBIKYnlOYW1lV
      |  HlwZUgAUgpieU5hbWVUeXBlEmYKDXJlcGVhdGVkX3R5cGUYDiABKAsyLC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU
      |  mVwZWF0ZWRUeXBlQhHiPw4SDHJlcGVhdGVkVHlwZUgAUgxyZXBlYXRlZFR5cGUSWgoKbWF0Y2hfdHlwZRgZIAEoCzIpLnNjYWxhL
      |  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5NYXRjaFR5cGVCDuI/CxIJbWF0Y2hUeXBlSABSCW1hdGNoVHlwZUIOCgxzZWFsZWRfd
      |  mFsdWVKBAgBEAJKBAgDEARKBAgEEAVKBAgFEAZKBAgGEAdKBAgLEAxKBAgMEA1KBAgPEBBKBAgQEBEi2gEKB1R5cGVSZWYSSQoGc
      |  HJlZml4GAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVCC+I/CBIGcHJlZml4UgZwcmVmaXgSIwoGc
      |  3ltYm9sGAIgASgJQgviPwgSBnN5bWJvbFIGc3ltYm9sEl8KDnR5cGVfYXJndW1lbnRzGAMgAygLMiQuc2NhbGEubWV0YS5pbnRlc
      |  m5hbC5zZW1hbnRpY2RiLlR5cGVCEuI/DxINdHlwZUFyZ3VtZW50c1INdHlwZUFyZ3VtZW50cyJ8CgpTaW5nbGVUeXBlEkkKBnByZ
      |  WZpeBgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlQgviPwgSBnByZWZpeFIGcHJlZml4EiMKBnN5b
      |  WJvbBgCIAEoCUIL4j8IEgZzeW1ib2xSBnN5bWJvbCIvCghUaGlzVHlwZRIjCgZzeW1ib2wYASABKAlCC+I/CBIGc3ltYm9sUgZze
      |  W1ib2wiewoJU3VwZXJUeXBlEkkKBnByZWZpeBgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlQgviP
      |  wgSBnByZWZpeFIGcHJlZml4EiMKBnN5bWJvbBgCIAEoCUIL4j8IEgZzeW1ib2xSBnN5bWJvbCJjCgxDb25zdGFudFR5cGUSUwoIY
      |  29uc3RhbnQYASABKAsyKC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQ29uc3RhbnRCDeI/ChIIY29uc3RhbnRSCGNvb
      |  nN0YW50IloKEEludGVyc2VjdGlvblR5cGUSRgoFdHlwZXMYASADKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuV
      |  HlwZUIK4j8HEgV0eXBlc1IFdHlwZXMiUwoJVW5pb25UeXBlEkYKBXR5cGVzGAEgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
      |  W1hbnRpY2RiLlR5cGVCCuI/BxIFdHlwZXNSBXR5cGVzIlIKCFdpdGhUeXBlEkYKBXR5cGVzGAEgAygLMiQuc2NhbGEubWV0YS5pb
      |  nRlcm5hbC5zZW1hbnRpY2RiLlR5cGVCCuI/BxIFdHlwZXNSBXR5cGVzIsIBCg5TdHJ1Y3R1cmFsVHlwZRJACgN0cGUYBCABKAsyJ
      |  C5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUII4j8FEgN0cGVSA3RwZRJcCgxkZWNsYXJhdGlvbnMYBSABKAsyJ
      |  S5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2NvcGVCEeI/DhIMZGVjbGFyYXRpb25zUgxkZWNsYXJhdGlvbnNKBAgBE
      |  AJKBAgCEANKBAgDEAQitwEKDUFubm90YXRlZFR5cGUSXgoLYW5ub3RhdGlvbnMYAyADKAsyKi5zY2FsYS5tZXRhLmludGVybmFsL
      |  nNlbWFudGljZGIuQW5ub3RhdGlvbkIQ4j8NEgthbm5vdGF0aW9uc1ILYW5ub3RhdGlvbnMSQAoDdHBlGAEgASgLMiQuc2NhbGEub
      |  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVCCOI/BRIDdHBlUgN0cGVKBAgCEAMitwEKD0V4aXN0ZW50aWFsVHlwZRJACgN0c
      |  GUYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUII4j8FEgN0cGVSA3RwZRJcCgxkZWNsYXJhdGlvb
      |  nMYAyABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2NvcGVCEeI/DhIMZGVjbGFyYXRpb25zUgxkZWNsYXJhd
      |  GlvbnNKBAgCEAMivAEKDVVuaXZlcnNhbFR5cGUSYwoPdHlwZV9wYXJhbWV0ZXJzGAMgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hb
      |  C5zZW1hbnRpY2RiLlNjb3BlQhPiPxASDnR5cGVQYXJhbWV0ZXJzUg50eXBlUGFyYW1ldGVycxJACgN0cGUYAiABKAsyJC5zY2FsY
      |  S5tZXRhLmludGVybmFsLnNlbWFudGljZG""".stripMargin) + new String(s"""|IuVHlwZUII4j8FEgN0cGVSA3RwZUoECAEQAiJOCgpCeU5hbWVUeXBlEkAKA3RwZRgBI
      |  AEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlQgjiPwUSA3RwZVIDdHBlIlAKDFJlcGVhdGVkVHlwZRJAC
      |  gN0cGUYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUII4j8FEgN0cGVSA3RwZSLJAgoJTWF0Y2hUe
      |  XBlElIKCXNjcnV0aW5lZRgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlQg7iPwsSCXNjcnV0aW5lZ
      |  VIJc2NydXRpbmVlElQKBWNhc2VzGAIgAygLMjIuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLk1hdGNoVHlwZS5DYXNlV
      |  HlwZUIK4j8HEgVjYXNlc1IFY2FzZXMakQEKCENhc2VUeXBlEkAKA2tleRgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtY
      |  W50aWNkYi5UeXBlQgjiPwUSA2tleVIDa2V5EkMKBGJvZHkYAiABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuV
      |  HlwZUIJ4j8GEgRib2R5UgRib2R5IrIJCghDb25zdGFudBJmCg11bml0X2NvbnN0YW50GAEgASgLMiwuc2NhbGEubWV0YS5pbnRlc
      |  m5hbC5zZW1hbnRpY2RiLlVuaXRDb25zdGFudEIR4j8OEgx1bml0Q29uc3RhbnRIAFIMdW5pdENvbnN0YW50EnIKEGJvb2xlYW5fY
      |  29uc3RhbnQYAiABKAsyLy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQm9vbGVhbkNvbnN0YW50QhTiPxESD2Jvb2xlY
      |  W5Db25zdGFudEgAUg9ib29sZWFuQ29uc3RhbnQSZgoNYnl0ZV9jb25zdGFudBgDIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc
      |  2VtYW50aWNkYi5CeXRlQ29uc3RhbnRCEeI/DhIMYnl0ZUNvbnN0YW50SABSDGJ5dGVDb25zdGFudBJqCg5zaG9ydF9jb25zdGFud
      |  BgEIAEoCzItLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TaG9ydENvbnN0YW50QhLiPw8SDXNob3J0Q29uc3RhbnRIA
      |  FINc2hvcnRDb25zdGFudBJmCg1jaGFyX2NvbnN0YW50GAUgASgLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkNoY
      |  XJDb25zdGFudEIR4j8OEgxjaGFyQ29uc3RhbnRIAFIMY2hhckNvbnN0YW50EmIKDGludF9jb25zdGFudBgGIAEoCzIrLnNjYWxhL
      |  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5JbnRDb25zdGFudEIQ4j8NEgtpbnRDb25zdGFudEgAUgtpbnRDb25zdGFudBJmCg1sb
      |  25nX2NvbnN0YW50GAcgASgLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkxvbmdDb25zdGFudEIR4j8OEgxsb25nQ
      |  29uc3RhbnRIAFIMbG9uZ0NvbnN0YW50EmoKDmZsb2F0X2NvbnN0YW50GAggASgLMi0uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hb
      |  nRpY2RiLkZsb2F0Q29uc3RhbnRCEuI/DxINZmxvYXRDb25zdGFudEgAUg1mbG9hdENvbnN0YW50Em4KD2RvdWJsZV9jb25zdGFud
      |  BgJIAEoCzIuLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Eb3VibGVDb25zdGFudEIT4j8QEg5kb3VibGVDb25zdGFud
      |  EgAUg5kb3VibGVDb25zdGFudBJuCg9zdHJpbmdfY29uc3RhbnQYCiABKAsyLi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
      |  GIuU3RyaW5nQ29uc3RhbnRCE+I/EBIOc3RyaW5nQ29uc3RhbnRIAFIOc3RyaW5nQ29uc3RhbnQSZgoNbnVsbF9jb25zdGFudBgLI
      |  AEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5OdWxsQ29uc3RhbnRCEeI/DhIMbnVsbENvbnN0YW50SABSDG51b
      |  GxDb25zdGFudEIOCgxzZWFsZWRfdmFsdWUiDgoMVW5pdENvbnN0YW50IjMKD0Jvb2xlYW5Db25zdGFudBIgCgV2YWx1ZRgBIAEoC
      |  EIK4j8HEgV2YWx1ZVIFdmFsdWUiMAoMQnl0ZUNvbnN0YW50EiAKBXZhbHVlGAEgASgFQgriPwcSBXZhbHVlUgV2YWx1ZSIxCg1Ta
      |  G9ydENvbnN0YW50EiAKBXZhbHVlGAEgASgFQgriPwcSBXZhbHVlUgV2YWx1ZSIwCgxDaGFyQ29uc3RhbnQSIAoFdmFsdWUYASABK
      |  AVCCuI/BxIFdmFsdWVSBXZhbHVlIi8KC0ludENvbnN0YW50EiAKBXZhbHVlGAEgASgFQgriPwcSBXZhbHVlUgV2YWx1ZSIwCgxMb
      |  25nQ29uc3RhbnQSIAoFdmFsdWUYASABKANCCuI/BxIFdmFsdWVSBXZhbHVlIjEKDUZsb2F0Q29uc3RhbnQSIAoFdmFsdWUYASABK
      |  AJCCuI/BxIFdmFsdWVSBXZhbHVlIjIKDkRvdWJsZUNvbnN0YW50EiAKBXZhbHVlGAEgASgBQgriPwcSBXZhbHVlUgV2YWx1ZSIyC
      |  g5TdHJpbmdDb25zdGFudBIgCgV2YWx1ZRgBIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWUiDgoMTnVsbENvbnN0YW50ItsDCglTaWduY
      |  XR1cmUSbgoPY2xhc3Nfc2lnbmF0dXJlGAEgASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkNsYXNzU2lnbmF0d
      |  XJlQhPiPxASDmNsYXNzU2lnbmF0dXJlSABSDmNsYXNzU2lnbmF0dXJlEnIKEG1ldGhvZF9zaWduYXR1cmUYAiABKAsyLy5zY2FsY
      |  S5tZXRhLmludGVybmFsLnNlbWFudGljZGIuTWV0aG9kU2lnbmF0dXJlQhTiPxESD21ldGhvZFNpZ25hdHVyZUgAUg9tZXRob2RTa
      |  WduYXR1cmUSagoOdHlwZV9zaWduYXR1cmUYAyABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVNpZ25hd
      |  HVyZUIS4j8PEg10eXBlU2lnbmF0dXJlSABSDXR5cGVTaWduYXR1cmUSbgoPdmFsdWVfc2lnbmF0dXJlGAQgASgLMi4uc2NhbGEub
      |  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlZhbHVlU2lnbmF0dXJlQhPiPxASDnZhbHVlU2lnbmF0dXJlSABSDnZhbHVlU2lnbmF0d
      |  XJlQg4KDHNlYWxlZF92YWx1ZSLmAgoOQ2xhc3NTaWduYXR1cmUSYwoPdHlwZV9wYXJhbWV0ZXJzGAEgASgLMiUuc2NhbGEubWV0Y
      |  S5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlQhPiPxASDnR5cGVQYXJhbWV0ZXJzUg50eXBlUGFyYW1ldGVycxJMCgdwYXJlbnRzG
      |  AIgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVCDOI/CRIHcGFyZW50c1IHcGFyZW50cxJDCgRzZWxmG
      |  AMgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVCCeI/BhIEc2VsZlIEc2VsZhJcCgxkZWNsYXJhdGlvb
      |  nMYBCABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2NvcGVCEeI/DhIMZGVjbGFyYXRpb25zUgxkZWNsYXJhd
      |  GlvbnMiswIKD01ldGhvZFNpZ25hdHVyZRJjCg90eXBlX3BhcmFtZXRlcnMYASABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlb
      |  WFudGljZGIuU2NvcGVCE+I/EBIOdHlwZVBhcmFtZXRlcnNSDnR5cGVQYXJhbWV0ZXJzEmMKD3BhcmFtZXRlcl9saXN0cxgCIAMoC
      |  zIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZUIT4j8QEg5wYXJhbWV0ZXJMaXN0c1IOcGFyYW1ldGVyTGlzd
      |  HMSVgoLcmV0dXJuX3R5cGUYAyABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUIP4j8MEgpyZXR1cm5Ue
      |  XBlUgpyZXR1cm5UeXBlIqQCCg1UeXBlU2lnbmF0dXJlEmMKD3R5cGVfcGFyYW1ldGVycxgBIAEoCzIlLnNjYWxhLm1ldGEuaW50Z
      |  XJuYWwuc2VtYW50aWNkYi5TY29wZUIT4j8QEg50eXBlUGFyYW1ldGVyc1IOdHlwZVBhcmFtZXRlcnMSVgoLbG93ZXJfYm91bmQYA
      |  iABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUIP4j8MEgpsb3dlckJvdW5kUgpsb3dlckJvdW5kElYKC
      |  3VwcGVyX2JvdW5kGAMgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVCD+I/DBIKdXBwZX""".stripMargin) + new String(s"""|JCb3VuZFIKd
      |  XBwZXJCb3VuZCJSCg5WYWx1ZVNpZ25hdHVyZRJACgN0cGUYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuV
      |  HlwZUII4j8FEgN0cGVSA3RwZSKHCwoRU3ltYm9sSW5mb3JtYXRpb24SIwoGc3ltYm9sGAEgASgJQgviPwgSBnN5bWJvbFIGc3ltY
      |  m9sElMKCGxhbmd1YWdlGBAgASgOMiguc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkxhbmd1YWdlQg3iPwoSCGxhbmd1Y
      |  WdlUghsYW5ndWFnZRJVCgRraW5kGAMgASgOMjYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlN5bWJvbEluZm9ybWF0a
      |  W9uLktpbmRCCeI/BhIEa2luZFIEa2luZBIvCgpwcm9wZXJ0aWVzGAQgASgFQg/iPwwSCnByb3BlcnRpZXNSCnByb3BlcnRpZXMSM
      |  woMZGlzcGxheV9uYW1lGAUgASgJQhDiPw0SC2Rpc3BsYXlOYW1lUgtkaXNwbGF5TmFtZRJXCglzaWduYXR1cmUYESABKAsyKS5zY
      |  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2lnbmF0dXJlQg7iPwsSCXNpZ25hdHVyZVIJc2lnbmF0dXJlEl4KC2Fubm90Y
      |  XRpb25zGA0gAygLMiouc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkFubm90YXRpb25CEOI/DRILYW5ub3RhdGlvbnNSC
      |  2Fubm90YXRpb25zEksKBmFjY2VzcxgSIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5BY2Nlc3NCC+I/CBIGY
      |  WNjZXNzUgZhY2Nlc3MSRQoSb3ZlcnJpZGRlbl9zeW1ib2xzGBMgAygJQhbiPxMSEW92ZXJyaWRkZW5TeW1ib2xzUhFvdmVycmlkZ
      |  GVuU3ltYm9scxJnCg1kb2N1bWVudGF0aW9uGBQgASgLMi0uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkRvY3VtZW50Y
      |  XRpb25CEuI/DxINZG9jdW1lbnRhdGlvblINZG9jdW1lbnRhdGlvbiKNAgoES2luZBIQCgxVTktOT1dOX0tJTkQQABIJCgVMT0NBT
      |  BATEgkKBUZJRUxEEBQSCgoGTUVUSE9EEAMSDwoLQ09OU1RSVUNUT1IQFRIJCgVNQUNSTxAGEggKBFRZUEUQBxINCglQQVJBTUVUR
      |  VIQCBISCg5TRUxGX1BBUkFNRVRFUhAREhIKDlRZUEVfUEFSQU1FVEVSEAkSCgoGT0JKRUNUEAoSCwoHUEFDS0FHRRALEhIKDlBBQ
      |  0tBR0VfT0JKRUNUEAwSCQoFQ0xBU1MQDRIJCgVUUkFJVBAOEg0KCUlOVEVSRkFDRRASIgQIARABIgQIAhACIgQIBBAEIgQIBRAFI
      |  gQIDxAPIgQIEBAQIrgCCghQcm9wZXJ0eRIUChBVTktOT1dOX1BST1BFUlRZEAASDAoIQUJTVFJBQ1QQBBIJCgVGSU5BTBAIEgoKB
      |  lNFQUxFRBAQEgwKCElNUExJQ0lUECASCAoETEFaWRBAEgkKBENBU0UQgAESDgoJQ09WQVJJQU5UEIACEhIKDUNPTlRSQVZBUklBT
      |  lQQgAQSCAoDVkFMEIAIEggKA1ZBUhCAEBILCgZTVEFUSUMQgCASDAoHUFJJTUFSWRCAQBIKCgRFTlVNEICAARINCgdERUZBVUxUE
      |  ICAAhILCgVHSVZFThCAgAQSDAoGSU5MSU5FEICACBIKCgRPUEVOEICAEBIRCgtUUkFOU1BBUkVOVBCAgCASCwoFSU5GSVgQgIBAE
      |  g0KBk9QQVFVRRCAgIABIgQIARABIgQIAhACSgQIAhADSgQIBhAHSgQIBxAISgQICBAJSgQICRAKSgQIChALSgQICxAMSgQIDBANS
      |  gQIDhAPSgQIDxAQItkBCg1Eb2N1bWVudGF0aW9uEiYKB21lc3NhZ2UYASABKAlCDOI/CRIHbWVzc2FnZVIHbWVzc2FnZRJZCgZmb
      |  3JtYXQYAiABKA4yNC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuRG9jdW1lbnRhdGlvbi5Gb3JtYXRCC+I/CBIGZm9yb
      |  WF0UgZmb3JtYXQiRQoGRm9ybWF0EggKBEhUTUwQABIMCghNQVJLRE9XThABEgsKB0pBVkFET0MQAhIMCghTQ0FMQURPQxADEggKB
      |  EtET0MQBCJOCgpBbm5vdGF0aW9uEkAKA3RwZRgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlQgjiP
      |  wUSA3RwZVIDdHBlIvcGCgZBY2Nlc3MSagoOcHJpdmF0ZV9hY2Nlc3MYASABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFud
      |  GljZGIuUHJpdmF0ZUFjY2Vzc0IS4j8PEg1wcml2YXRlQWNjZXNzSABSDXByaXZhdGVBY2Nlc3MSewoTcHJpdmF0ZV90aGlzX2FjY
      |  2VzcxgCIAEoCzIxLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Qcml2YXRlVGhpc0FjY2Vzc0IW4j8TEhFwcml2YXRlV
      |  Ghpc0FjY2Vzc0gAUhFwcml2YXRlVGhpc0FjY2VzcxKDAQoVcHJpdmF0ZV93aXRoaW5fYWNjZXNzGAMgASgLMjMuc2NhbGEubWV0Y
      |  S5pbnRlcm5hbC5zZW1hbnRpY2RiLlByaXZhdGVXaXRoaW5BY2Nlc3NCGOI/FRITcHJpdmF0ZVdpdGhpbkFjY2Vzc0gAUhNwcml2Y
      |  XRlV2l0aGluQWNjZXNzEnIKEHByb3RlY3RlZF9hY2Nlc3MYBCABKAsyLy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU
      |  HJvdGVjdGVkQWNjZXNzQhTiPxESD3Byb3RlY3RlZEFjY2Vzc0gAUg9wcm90ZWN0ZWRBY2Nlc3MSgwEKFXByb3RlY3RlZF90aGlzX
      |  2FjY2VzcxgFIAEoCzIzLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Qcm90ZWN0ZWRUaGlzQWNjZXNzQhjiPxUSE3Byb
      |  3RlY3RlZFRoaXNBY2Nlc3NIAFITcHJvdGVjdGVkVGhpc0FjY2VzcxKLAQoXcHJvdGVjdGVkX3dpdGhpbl9hY2Nlc3MYBiABKAsyN
      |  S5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuUHJvdGVjdGVkV2l0aGluQWNjZXNzQhriPxcSFXByb3RlY3RlZFdpdGhpb
      |  kFjY2Vzc0gAUhVwcm90ZWN0ZWRXaXRoaW5BY2Nlc3MSZgoNcHVibGljX2FjY2VzcxgHIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuY
      |  Wwuc2VtYW50aWNkYi5QdWJsaWNBY2Nlc3NCEeI/DhIMcHVibGljQWNjZXNzSABSDHB1YmxpY0FjY2Vzc0IOCgxzZWFsZWRfdmFsd
      |  WUiDwoNUHJpdmF0ZUFjY2VzcyITChFQcml2YXRlVGhpc0FjY2VzcyI6ChNQcml2YXRlV2l0aGluQWNjZXNzEiMKBnN5bWJvbBgBI
      |  AEoCUIL4j8IEgZzeW1ib2xSBnN5bWJvbCIRCg9Qcm90ZWN0ZWRBY2Nlc3MiFQoTUHJvdGVjdGVkVGhpc0FjY2VzcyI8ChVQcm90Z
      |  WN0ZWRXaXRoaW5BY2Nlc3MSIwoGc3ltYm9sGAEgASgJQgviPwgSBnN5bWJvbFIGc3ltYm9sIg4KDFB1YmxpY0FjY2VzcyKPAgoQU
      |  3ltYm9sT2NjdXJyZW5jZRJHCgVyYW5nZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZUIK4j8HE
      |  gVyYW5nZVIFcmFuZ2USIwoGc3ltYm9sGAIgASgJQgviPwgSBnN5bWJvbFIGc3ltYm9sElQKBHJvbGUYAyABKA4yNS5zY2FsYS5tZ
      |  XRhLmludGVybmFsLnNlbWFudGljZGIuU3ltYm9sT2NjdXJyZW5jZS5Sb2xlQgniPwYSBHJvbGVSBHJvbGUiNwoEUm9sZRIQCgxVT
      |  ktOT1dOX1JPTEUQABINCglSRUZFUkVOQ0UQARIOCgpERUZJTklUSU9OEAIisgIKCkRpYWdub3N0aWMSRwoFcmFuZ2UYASABKAsyJ
      |  S5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuUmFuZ2VCCuI/BxIFcmFuZ2VSBXJhbmdlEl4KCHNldmVyaXR5GAIgASgOM
      |  jMuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkRpYWdub3N0aWMuU2V2ZXJpdHlCDeI/ChIIc2V2ZXJpdHlSCHNldmVya
      |  XR5EiYKB21lc3NhZ2UYAyABKAlCDOI/CRIHbWVzc2FnZVIHbWVzc2FnZSJTCghTZXZlcml0eRIUChBVTktOT1dOX1NFVkVSSVRZE
      |  AASCQoFRVJST1IQARILCgdXQVJOSU5HEAISDwoLSU5GT1JNQVRJT04QAxIICgRISU5UEAQimQEKCVN5bnRoZXRpYxJHCgVyYW5nZ
      |  RgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZUIK4j8HEgVyYW5nZVIFcmFuZ2USQwoEdHJlZRgCI
      |  AEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW5""".stripMargin) + new String(s"""|0aWNkYi5UcmVlQgniPwYSBHRyZWVSBHRyZWUixAYKBFRyZWUSWgoKYXBwb
      |  HlfdHJlZRgBIAEoCzIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5BcHBseVRyZWVCDuI/CxIJYXBwbHlUcmVlSABSC
      |  WFwcGx5VHJlZRJmCg1mdW5jdGlvbl90cmVlGAIgASgLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkZ1bmN0aW9uV
      |  HJlZUIR4j8OEgxmdW5jdGlvblRyZWVIAFIMZnVuY3Rpb25UcmVlEk4KB2lkX3RyZWUYAyABKAsyJi5zY2FsYS5tZXRhLmludGVyb
      |  mFsLnNlbWFudGljZGIuSWRUcmVlQgviPwgSBmlkVHJlZUgAUgZpZFRyZWUSYgoMbGl0ZXJhbF90cmVlGAQgASgLMisuc2NhbGEub
      |  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkxpdGVyYWxUcmVlQhDiPw0SC2xpdGVyYWxUcmVlSABSC2xpdGVyYWxUcmVlEn8KFG1hY
      |  3JvX2V4cGFuc2lvbl90cmVlGAUgASgLMjIuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLk1hY3JvRXhwYW5zaW9uVHJlZ
      |  UIX4j8UEhJtYWNyb0V4cGFuc2lvblRyZWVIAFISbWFjcm9FeHBhbnNpb25UcmVlEmYKDW9yaWdpbmFsX3RyZWUYBiABKAsyLC5zY
      |  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuT3JpZ2luYWxUcmVlQhHiPw4SDG9yaWdpbmFsVHJlZUgAUgxvcmlnaW5hbFRyZ
      |  WUSXgoLc2VsZWN0X3RyZWUYByABKAsyKi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2VsZWN0VHJlZUIP4j8MEgpzZ
      |  WxlY3RUcmVlSABSCnNlbGVjdFRyZWUSawoPdHlwZV9hcHBseV90cmVlGAggASgLMi0uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hb
      |  nRpY2RiLlR5cGVBcHBseVRyZWVCEuI/DxINdHlwZUFwcGx5VHJlZUgAUg10eXBlQXBwbHlUcmVlQg4KDHNlYWxlZF92YWx1ZSKwA
      |  QoJQXBwbHlUcmVlEk8KCGZ1bmN0aW9uGAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlRyZWVCDeI/ChIIZ
      |  nVuY3Rpb25SCGZ1bmN0aW9uElIKCWFyZ3VtZW50cxgCIAMoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UcmVlQ
      |  g7iPwsSCWFyZ3VtZW50c1IJYXJndW1lbnRzIqwBCgxGdW5jdGlvblRyZWUSVwoKcGFyYW1ldGVycxgBIAMoCzImLnNjYWxhLm1ld
      |  GEuaW50ZXJuYWwuc2VtYW50aWNkYi5JZFRyZWVCD+I/DBIKcGFyYW1ldGVyc1IKcGFyYW1ldGVycxJDCgRib2R5GAIgASgLMiQuc
      |  2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlRyZWVCCeI/BhIEYm9keVIEYm9keSItCgZJZFRyZWUSIwoGc3ltYm9sGAEgA
      |  SgJQgviPwgSBnN5bWJvbFIGc3ltYm9sImIKC0xpdGVyYWxUcmVlElMKCGNvbnN0YW50GAEgASgLMiguc2NhbGEubWV0YS5pbnRlc
      |  m5hbC5zZW1hbnRpY2RiLkNvbnN0YW50Qg3iPwoSCGNvbnN0YW50Ughjb25zdGFudCK9AQoSTWFjcm9FeHBhbnNpb25UcmVlEmUKE
      |  GJlZm9yZV9leHBhbnNpb24YASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHJlZUIU4j8REg9iZWZvcmVFe
      |  HBhbnNpb25SD2JlZm9yZUV4cGFuc2lvbhJACgN0cGUYAiABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZ
      |  UII4j8FEgN0cGVSA3RwZSJXCgxPcmlnaW5hbFRyZWUSRwoFcmFuZ2UYASABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFud
      |  GljZGIuUmFuZ2VCCuI/BxIFcmFuZ2VSBXJhbmdlIqEBCgpTZWxlY3RUcmVlElIKCXF1YWxpZmllchgBIAEoCzIkLnNjYWxhLm1ld
      |  GEuaW50ZXJuYWwuc2VtYW50aWNkYi5UcmVlQg7iPwsSCXF1YWxpZmllclIJcXVhbGlmaWVyEj8KAmlkGAIgASgLMiYuc2NhbGEub
      |  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLklkVHJlZUIH4j8EEgJpZFICaWQiwQEKDVR5cGVBcHBseVRyZWUSTwoIZnVuY3Rpb24YA
      |  SABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHJlZUIN4j8KEghmdW5jdGlvblIIZnVuY3Rpb24SXwoOdHlwZ
      |  V9hcmd1bWVudHMYAiADKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUIS4j8PEg10eXBlQXJndW1lbnRzU
      |  g10eXBlQXJndW1lbnRzKjYKBlNjaGVtYRIKCgZMRUdBQ1kQABIPCgtTRU1BTlRJQ0RCMxADEg8KC1NFTUFOVElDREI0EAQqNQoIT
      |  GFuZ3VhZ2USFAoQVU5LTk9XTl9MQU5HVUFHRRAAEgkKBVNDQUxBEAESCAoESkFWQRACQgXiPwJIAGIGcHJvdG8z${"\"" * 3}
      |      ).mkString)
      |  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
      |    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
      |    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
      |  }
      |  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
      |    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
      |    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      |      scalapb.options.ScalapbProto.javaDescriptor
      |    ))
      |  }
      |  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
      |  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Signature.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed trait Signature extends scalapb.GeneratedSealedOneof {
      |  type MessageType = scala.meta.internal.semanticdb.SignatureMessage
      |  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Signature.Empty.type]
      |  final def isDefined = !isEmpty
      |  final def asMessage: scala.meta.internal.semanticdb.SignatureMessage = scala.meta.internal.semanticdb.Signature.SignatureTypeMapper.toBase(this)
      |  final def asNonEmpty: Option[scala.meta.internal.semanticdb.Signature.NonEmpty] = if (isEmpty) None else Some(this.asInstanceOf[scala.meta.internal.semanticdb.Signature.NonEmpty])
      |}
      |
      |object Signature {
      |  case object Empty extends scala.meta.internal.semanticdb.Signature
      |  
      |  sealed trait NonEmpty extends scala.meta.internal.semanticdb.Signature
      |  
      |  def defaultInstance: scala.meta.internal.semanticdb.Signature = Empty
      |  
      |  implicit val SignatureTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SignatureMessage, scala.meta.internal.semanticdb.Signature] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SignatureMessage, scala.meta.internal.semanticdb.Signature] {
      |    override def toCustom(__base: scala.meta.internal.semanticdb.SignatureMessage): scala.meta.internal.semanticdb.Signature = __base.sealedValue match {
      |      case __v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature => __v.value
      |      case __v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature => __v.value
      |      case __v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature => __v.value
      |      case __v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature => __v.value
      |      case scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty => Empty
      |    }
      |    override def toBase(__custom: scala.meta.internal.semanticdb.Signature): scala.meta.internal.semanticdb.SignatureMessage = scala.meta.internal.semanticdb.SignatureMessage(__custom match {
      |      case __v: scala.meta.internal.semanticdb.ClassSignature => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(__v)
      |      case __v: scala.meta.internal.semanticdb.MethodSignature => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(__v)
      |      case __v: scala.meta.internal.semanticdb.TypeSignature => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(__v)
      |      case __v: scala.meta.internal.semanticdb.ValueSignature => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(__v)
      |      case Empty => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty
      |    })
      |  }
      |}
      |@SerialVersionUID(0L)
      |final case class SignatureMessage(
      |    sealedValue: scala.meta.internal.semanticdb.SignatureMessage.SealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[SignatureMessage] with scalapb.lenses.Updatable[SignatureMessage] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (sealedValue.classSignature.isDefined) {
      |        val __value = sealedValue.classSignature.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.methodSignature.isDefined) {
      |        val __value = sealedValue.methodSignature.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.typeSignature.isDefined) {
      |        val __value = sealedValue.typeSignature.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.valueSignature.isDefined) {
      |        val __value = sealedValue.valueSignature.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      sealedValue.classSignature.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.methodSignature.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32""".stripMargin) + new String(s"""|NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.typeSignature.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.valueSignature.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(4, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SignatureMessage = {
      |      var __sealedValue = this.sealedValue
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.classSignature.getOrElse(scala.meta.internal.semanticdb.ClassSignature.defaultInstance)))
      |          case 18 =>
      |            __sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.methodSignature.getOrElse(scala.meta.internal.semanticdb.MethodSignature.defaultInstance)))
      |          case 26 =>
      |            __sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.typeSignature.getOrElse(scala.meta.internal.semanticdb.TypeSignature.defaultInstance)))
      |          case 34 =>
      |            __sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.valueSignature.getOrElse(scala.meta.internal.semanticdb.ValueSignature.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.SignatureMessage(
      |          sealedValue = __sealedValue
      |      )
      |    }
      |    def getClassSignature: scala.meta.internal.semanticdb.ClassSignature = sealedValue.classSignature.getOrElse(scala.meta.internal.semanticdb.ClassSignature.defaultInstance)
      |    def withClassSignature(__v: scala.meta.internal.semanticdb.ClassSignature): SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(__v))
      |    def getMethodSignature: scala.meta.internal.semanticdb.MethodSignature = sealedValue.methodSignature.getOrElse(scala.meta.internal.semanticdb.MethodSignature.defaultInstance)
      |    def withMethodSignature(__v: scala.meta.internal.semanticdb.MethodSignature): SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(__v))
      |    def getTypeSignature: scala.meta.internal.semanticdb.TypeSignature = sealedValue.typeSignature.getOrElse(scala.meta.internal.semanticdb.TypeSignature.defaultInstance)
      |    def withTypeSignature(__v: scala.meta.internal.semanticdb.TypeSignature): SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(__v))
      |    def getValueSignature: scala.meta.internal.semanticdb.ValueSignature = sealedValue.valueSignature.getOrElse(scala.meta.internal.semanticdb.ValueSignature.defaultInstance)
      |    def withValueSignature(__v: scala.meta.internal.semanticdb.ValueSignature): SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(__v))
      |    def clearSealedValue: SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty)
      |    def withSealedValue(__v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue): SignatureMessage = copy(sealedValue = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.classSignature.orNull
      |        case 2 => sealedValue.methodSignature.orNull
      |        case 3 => sealedValue.typeSignature.orNull
      |        case 4 => sealedValue.valueSignature.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.classSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => sealedValue.methodSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 3 => sealedValue.typeSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 4 => sealedValue.valueSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion """.stripMargin) + new String(s"""|= scala.meta.internal.semanticdb.SignatureMessage
      |    def toSignature: scala.meta.internal.semanticdb.Signature = scala.meta.internal.semanticdb.Signature.SignatureTypeMapper.toCustom(this)
      |}
      |
      |object SignatureMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SignatureMessage] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SignatureMessage] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.SignatureMessage = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.SignatureMessage(
      |      sealedValue = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ClassSignature]].map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature)
      |    .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.MethodSignature]].map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature))
      |    .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.TypeSignature]].map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature))
      |    .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ValueSignature]].map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature))
      |    .getOrElse(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty)
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SignatureMessage] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.SignatureMessage(
      |        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ClassSignature]]).map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature)
      |    .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.MethodSignature]]).map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature))
      |    .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.TypeSignature]]).map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature))
      |    .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ValueSignature]]).map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature))
      |    .getOrElse(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(33)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(33)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.ClassSignature
      |      case 2 => __out = scala.meta.internal.semanticdb.MethodSignature
      |      case 3 => __out = scala.meta.internal.semanticdb.TypeSignature
      |      case 4 => __out = scala.meta.internal.semanticdb.ValueSignature
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.SignatureMessage(
      |    sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty
      |  )
      |  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
      |    def isEmpty: _root_.scala.Boolean = false
      |    def """.stripMargin) + new String(s"""|isDefined: _root_.scala.Boolean = true
      |    def isClassSignature: _root_.scala.Boolean = false
      |    def isMethodSignature: _root_.scala.Boolean = false
      |    def isTypeSignature: _root_.scala.Boolean = false
      |    def isValueSignature: _root_.scala.Boolean = false
      |    def classSignature: _root_.scala.Option[scala.meta.internal.semanticdb.ClassSignature] = _root_.scala.None
      |    def methodSignature: _root_.scala.Option[scala.meta.internal.semanticdb.MethodSignature] = _root_.scala.None
      |    def typeSignature: _root_.scala.Option[scala.meta.internal.semanticdb.TypeSignature] = _root_.scala.None
      |    def valueSignature: _root_.scala.Option[scala.meta.internal.semanticdb.ValueSignature] = _root_.scala.None
      |  }
      |  object SealedValue extends {
      |    @SerialVersionUID(0L)
      |    case object Empty extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      |      type ValueType = _root_.scala.Nothing
      |      override def isEmpty: _root_.scala.Boolean = true
      |      override def isDefined: _root_.scala.Boolean = false
      |      override def number: _root_.scala.Int = 0
      |      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      |    }
      |  
      |    @SerialVersionUID(0L)
      |    final case class ClassSignature(value: scala.meta.internal.semanticdb.ClassSignature) extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ClassSignature
      |      override def isClassSignature: _root_.scala.Boolean = true
      |      override def classSignature: _root_.scala.Option[scala.meta.internal.semanticdb.ClassSignature] = Some(value)
      |      override def number: _root_.scala.Int = 1
      |    }
      |    @SerialVersionUID(0L)
      |    final case class MethodSignature(value: scala.meta.internal.semanticdb.MethodSignature) extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.MethodSignature
      |      override def isMethodSignature: _root_.scala.Boolean = true
      |      override def methodSignature: _root_.scala.Option[scala.meta.internal.semanticdb.MethodSignature] = Some(value)
      |      override def number: _root_.scala.Int = 2
      |    }
      |    @SerialVersionUID(0L)
      |    final case class TypeSignature(value: scala.meta.internal.semanticdb.TypeSignature) extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.TypeSignature
      |      override def isTypeSignature: _root_.scala.Boolean = true
      |      override def typeSignature: _root_.scala.Option[scala.meta.internal.semanticdb.TypeSignature] = Some(value)
      |      override def number: _root_.scala.Int = 3
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ValueSignature(value: scala.meta.internal.semanticdb.ValueSignature) extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ValueSignature
      |      override def isValueSignature: _root_.scala.Boolean = true
      |      override def valueSignature: _root_.scala.Option[scala.meta.internal.semanticdb.ValueSignature] = Some(value)
      |      override def number: _root_.scala.Int = 4
      |    }
      |  }
      |  implicit class SignatureMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SignatureMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SignatureMessage](_l) {
      |    def classSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ClassSignature] = field(_.getClassSignature)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(f_)))
      |    def methodSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MethodSignature] = field(_.getMethodSignature)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(f_)))
      |    def typeSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeSignature] = field(_.getTypeSignature)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(f_)))
      |    def valueSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ValueSignature] = field(_.getValueSignature)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(f_)))
      |    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SignatureMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
      |  }
      |  final val CLASS_SIGNATURE_FIELD_NUMBER = 1
      |  final val METHOD_SIGNATURE_FIELD_NUMBER = 2
      |  final val TYPE_SIGNATURE_FIELD_NUMBER = 3
      |  final val VALUE_SIGNATURE_FIELD_NUMBER = 4
      |  def of(
      |    sealedValue: scala.meta.internal.semanticdb.SignatureMessage.SealedValue
      |  ): _root_.scala.meta.internal.semanticdb.SignatureMessage = _root_.scala.meta.internal.semanticdb.SignatureMessage(
      |    sealedValue
      |  )
      |}
      |
      |@SerialVersionUID(0""".stripMargin) + new String(s"""|L)
      |final case class ClassSignature(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None,
      |    parents: _root_.scala.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.Seq.empty,
      |    self: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    ) extends scala.meta.internal.semanticdb.Signature with scala.meta.internal.semanticdb.Signature.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ClassSignature] with scalapb.lenses.Updatable[ClassSignature] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (typeParameters.isDefined) {
      |        val __value = typeParameters.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      parents.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(self)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      if (declarations.isDefined) {
      |        val __value = declarations.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      typeParameters.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      parents.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toBase(__v)
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(self)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(3, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      declarations.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(4, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ClassSignature = {
      |      var __typeParameters = this.typeParameters
      |      val __parents = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.parents)
      |      var __self = this.self
      |      var __declarations = this.declarations
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __typeParameters = Option(_root_.scalapb.LiteParser.readMessage(_input__, __typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
      |          case 18 =>
      |            __parents += scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |          case 26 =>
      |            __self = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(__self)))
      |          case 34 =>
      |            __declarations = Option(_root_.scalapb.LiteParser.readMessage(_input__, __declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ClassSignature(
      |          typeParameters = __typeParameters,
      |          parents = __parents.result(),
      |          self = __self,
      |          declarations = __declarations
      |      )
      |    }
      |    def getTypeParameters""".stripMargin) + new String(s"""|: scala.meta.internal.semanticdb.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearTypeParameters: ClassSignature = copy(typeParameters = _root_.scala.None)
      |    def withTypeParameters(__v: scala.meta.internal.semanticdb.Scope): ClassSignature = copy(typeParameters = Option(__v))
      |    def clearParents = copy(parents = _root_.scala.Seq.empty)
      |    def addParents(__vs: scala.meta.internal.semanticdb.Type*): ClassSignature = addAllParents(__vs)
      |    def addAllParents(__vs: Iterable[scala.meta.internal.semanticdb.Type]): ClassSignature = copy(parents = parents ++ __vs)
      |    def withParents(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]): ClassSignature = copy(parents = __v)
      |    def withSelf(__v: scala.meta.internal.semanticdb.Type): ClassSignature = copy(self = __v)
      |    def getDeclarations: scala.meta.internal.semanticdb.Scope = declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearDeclarations: ClassSignature = copy(declarations = _root_.scala.None)
      |    def withDeclarations(__v: scala.meta.internal.semanticdb.Scope): ClassSignature = copy(declarations = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => typeParameters.orNull
      |        case 2 => parents.iterator.map(scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toBase).toSeq
      |        case 3 => {
      |          val __t = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(self)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 4 => declarations.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => _root_.scalapb.descriptors.PRepeated(parents.iterator.map(scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toBase(_).toPMessage).toVector)
      |        case 3 => scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(self).toPMessage
      |        case 4 => declarations.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ClassSignature
      |}
      |
      |object ClassSignature extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ClassSignature] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ClassSignature] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ClassSignature = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.ClassSignature(
      |      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]],
      |      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]].iterator.map(scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toCustom).toSeq,
      |      scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(__fieldsMap.getOrElse(__fields.get(2), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      |      __fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ClassSignature] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ClassSignature(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toCustom).toSeq,
      |        scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[scala.meta.internal.semanticdb.T""".stripMargin) + new String(s"""|ypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(34)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(34)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Scope
      |      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 3 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 4 => __out = scala.meta.internal.semanticdb.Scope
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ClassSignature(
      |    typeParameters = _root_.scala.None,
      |    parents = _root_.scala.Seq.empty,
      |    self = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    declarations = _root_.scala.None
      |  )
      |  implicit class ClassSignatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ClassSignature]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ClassSignature](_l) {
      |    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
      |    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
      |    def parents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Type]] = field(_.parents)((c_, f_) => c_.copy(parents = f_))
      |    def self: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.self)((c_, f_) => c_.copy(self = f_))
      |    def declarations: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getDeclarations)((c_, f_) => c_.copy(declarations = Option(f_)))
      |    def optionalDeclarations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.declarations)((c_, f_) => c_.copy(declarations = f_))
      |  }
      |  final val TYPE_PARAMETERS_FIELD_NUMBER = 1
      |  final val PARENTS_FIELD_NUMBER = 2
      |  final val SELF_FIELD_NUMBER = 3
      |  final val DECLARATIONS_FIELD_NUMBER = 4
      |  @transient
      |  private val _typemapper_parents: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  @transient
      |  private val _typemapper_self: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope],
      |    parents: _root_.scala.Seq[scala.meta.internal.semanticdb.Type],
      |    self: scala.meta.internal.semanticdb.Type,
      |    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope]
      |  ): _root_.scala.meta.internal.semanticdb.ClassSignature = _root_.scala.meta.internal.semanticdb.ClassSignature(
      |    typeParameters,
      |    parents,
      |    self,
      |    declarations
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class MethodSignature(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None,
      |    parameterLists: _root_.scala.Seq[scala.meta.internal.semanticdb.Scope] = _root_.scala.Seq.empty,
      |    returnType: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scala.meta.internal.semanticdb.Signature with scala.meta.internal.semanticdb.Signature.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[MethodSignature] with scalapb.lenses.Updatable[MethodSignature] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (typeParameters.isDefined) {
      |        val """.stripMargin) + new String(s"""|__value = typeParameters.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      parameterLists.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(returnType)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      typeParameters.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      parameterLists.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(returnType)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(3, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.MethodSignature = {
      |      var __typeParameters = this.typeParameters
      |      val __parameterLists = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Scope] ++= this.parameterLists)
      |      var __returnType = this.returnType
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __typeParameters = Option(_root_.scalapb.LiteParser.readMessage(_input__, __typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
      |          case 18 =>
      |            __parameterLists += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.Scope.defaultInstance)
      |          case 26 =>
      |            __returnType = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(__returnType)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.MethodSignature(
      |          typeParameters = __typeParameters,
      |          parameterLists = __parameterLists.result(),
      |          returnType = __returnType
      |      )
      |    }
      |    def getTypeParameters: scala.meta.internal.semanticdb.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearTypeParameters: MethodSignature = copy(typeParameters = _root_.scala.None)
      |    def withTypeParameters(__v: scala.meta.internal.semanticdb.Scope): MethodSignature = copy(typeParameters = Option(__v))
      |    def clearParameterLists = copy(parameterLists = _root_.scala.Seq.empty)
      |    def addParameterLists(__vs: scala.meta.internal.semanticdb.Scope*): MethodSignature = addAllParameterLists(__vs)
      |    def addAllParameterLists(__vs: Iterable[scala.meta.internal.semanticdb.Scope]): MethodSignature = copy(parameterLists = parameterLists ++ __vs)
      |    def withParameterLists(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Scope]): MethodSignature = copy(parameterLists = __v)
      |    def withReturnType(__v: scala.meta.internal.semanticdb.Type): MethodSignature = copy(returnType = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => typeParameters.orNull
      |        case 2 => parameterLists
      |        case 3 => {
      |          val __t = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(returnType)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => _ro""".stripMargin) + new String(s"""|ot_.scalapb.descriptors.PRepeated(parameterLists.iterator.map(_.toPMessage).toVector)
      |        case 3 => scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(returnType).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.MethodSignature
      |}
      |
      |object MethodSignature extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MethodSignature] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MethodSignature] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.MethodSignature = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.MethodSignature(
      |      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]],
      |      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.Scope]],
      |      scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toCustom(__fieldsMap.getOrElse(__fields.get(2), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.MethodSignature] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.MethodSignature(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.Scope]]).getOrElse(_root_.scala.Seq.empty),
      |        scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(35)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(35)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Scope
      |      case 2 => __out = scala.meta.internal.semanticdb.Scope
      |      case 3 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.MethodSignature(
      |    typeParameters = _root_.scala.None,
      |    parameterLists = _root_.scala.Seq.empty,
      |    returnType = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class MethodSignatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MethodSignature]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.MethodSignature](_l) {
      |    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
      |    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
      |    def parameterLists: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Scope]] = field(_.parameterLists)((c_, f_) => c_.copy(parameterLists = f_))
      |    def returnType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.returnType)((c_, f_) => c_.copy(returnType = f_))
      |  }
      |  final val TYPE_PARAMETERS_FIELD_NUMBER = 1
      |  final val PARAMETER_LISTS_FIELD_NUMBER = 2
      |  final val RETURN_TYPE_FIELD_NUMBER = 3
      |  @transient
      |  private val _typemap""".stripMargin) + new String(s"""|per_returnType: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope],
      |    parameterLists: _root_.scala.Seq[scala.meta.internal.semanticdb.Scope],
      |    returnType: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.MethodSignature = _root_.scala.meta.internal.semanticdb.MethodSignature(
      |    typeParameters,
      |    parameterLists,
      |    returnType
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class TypeSignature(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None,
      |    lowerBound: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    upperBound: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scala.meta.internal.semanticdb.Signature with scala.meta.internal.semanticdb.Signature.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[TypeSignature] with scalapb.lenses.Updatable[TypeSignature] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (typeParameters.isDefined) {
      |        val __value = typeParameters.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(lowerBound)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(upperBound)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      typeParameters.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(lowerBound)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(2, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(upperBound)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(3, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TypeSignature = {
      |      var __typeParameters = this.typeParameters
      |      var __lowerBound = this.lowerBound
      |      var __upperBound = this.upperBound
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __typeParameters = Option(_root_.scalapb.LiteParser.readMessage(_input__, __typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
      |          case 18 =>
      |            __lowerBound = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(__lowerBound)))
      |          case 26 =>
      |            __upperBound = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(__upperBound)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.TypeSigna""".stripMargin) + new String(s"""|ture(
      |          typeParameters = __typeParameters,
      |          lowerBound = __lowerBound,
      |          upperBound = __upperBound
      |      )
      |    }
      |    def getTypeParameters: scala.meta.internal.semanticdb.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearTypeParameters: TypeSignature = copy(typeParameters = _root_.scala.None)
      |    def withTypeParameters(__v: scala.meta.internal.semanticdb.Scope): TypeSignature = copy(typeParameters = Option(__v))
      |    def withLowerBound(__v: scala.meta.internal.semanticdb.Type): TypeSignature = copy(lowerBound = __v)
      |    def withUpperBound(__v: scala.meta.internal.semanticdb.Type): TypeSignature = copy(upperBound = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => typeParameters.orNull
      |        case 2 => {
      |          val __t = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(lowerBound)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 3 => {
      |          val __t = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(upperBound)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(lowerBound).toPMessage
      |        case 3 => scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(upperBound).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.TypeSignature
      |}
      |
      |object TypeSignature extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeSignature] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeSignature] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.TypeSignature = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.TypeSignature(
      |      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]],
      |      scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      |      scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(__fieldsMap.getOrElse(__fields.get(2), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TypeSignature] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TypeSignature(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]),
      |        scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(36)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(36)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) m""".stripMargin) + new String(s"""|atch {
      |      case 1 => __out = scala.meta.internal.semanticdb.Scope
      |      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 3 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TypeSignature(
      |    typeParameters = _root_.scala.None,
      |    lowerBound = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    upperBound = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class TypeSignatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeSignature]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TypeSignature](_l) {
      |    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
      |    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
      |    def lowerBound: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.lowerBound)((c_, f_) => c_.copy(lowerBound = f_))
      |    def upperBound: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.upperBound)((c_, f_) => c_.copy(upperBound = f_))
      |  }
      |  final val TYPE_PARAMETERS_FIELD_NUMBER = 1
      |  final val LOWER_BOUND_FIELD_NUMBER = 2
      |  final val UPPER_BOUND_FIELD_NUMBER = 3
      |  @transient
      |  private val _typemapper_lowerBound: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  @transient
      |  private val _typemapper_upperBound: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope],
      |    lowerBound: scala.meta.internal.semanticdb.Type,
      |    upperBound: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.TypeSignature = _root_.scala.meta.internal.semanticdb.TypeSignature(
      |    typeParameters,
      |    lowerBound,
      |    upperBound
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ValueSignature(
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scala.meta.internal.semanticdb.Signature with scala.meta.internal.semanticdb.Signature.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ValueSignature] with scalapb.lenses.Updatable[ValueSignature] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(tpe)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(tpe)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ValueSignature = {
      |      var __tpe = this.tpe
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __tpe = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(_root_.scalap""".stripMargin) + new String(s"""|b.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(__tpe)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ValueSignature(
      |          tpe = __tpe
      |      )
      |    }
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): ValueSignature = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ValueSignature
      |}
      |
      |object ValueSignature extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ValueSignature] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ValueSignature] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ValueSignature = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.ValueSignature(
      |      scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ValueSignature] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ValueSignature(
      |        scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(37)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(37)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ValueSignature(
      |    tpe = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class ValueSignatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ValueSignature]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ValueSignature](_l) {
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val TPE_FIELD_NUMBER = 1
      |  @transient
      |  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.ValueSignature = _root_.scala.meta.internal.semanticdb.ValueSignature(
      |    tpe
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/SymbolInformation.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class SymbolInformation(
      |    symbol: _root_.scala.Predef.String = "",
      |    language: scala.meta.internal.semanticdb.Language = scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE,
      |    kind: scala.meta.internal.semanticdb.SymbolInformation.Kind = scala.meta.internal.semanticdb.SymbolInformation.Kind.UNKNOWN_KIND,
      |    properties: _root_.scala.Int = 0,
      |    displayName: _root_.scala.Predef.String = "",
      |    signature: scala.meta.internal.semanticdb.Signature = scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toCustom(scala.meta.internal.semanticdb.SignatureMessage.defaultInstance),
      |    annotations: _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation] = _root_.scala.Seq.empty,
      |    access: scala.meta.internal.semanticdb.Access = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toCustom(scala.meta.internal.semanticdb.AccessMessage.defaultInstance),
      |    overriddenSymbols: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      |    documentation: _root_.scala.Option[scala.meta.internal.semanticdb.Documentation] = _root_.scala.None
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[SymbolInformation] with scalapb.lenses.Updatable[SymbolInformation] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = symbol
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = language
      |        if (__value != scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(16, __value.value)
      |        }
      |      };
      |      
      |      {
      |        val __value = kind
      |        if (__value != scala.meta.internal.semanticdb.SymbolInformation.Kind.UNKNOWN_KIND) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value.value)
      |        }
      |      };
      |      
      |      {
      |        val __value = properties
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = displayName
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toBase(signature)
      |        if (__value != scala.meta.internal.semanticdb.SignatureMessage.defaultInstance) {
      |          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      annotations.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toBase(access)
      |        if (__value != scala.meta.internal.semanticdb.AccessMessage.defaultInstance) {
      |          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      overriddenSymbols.foreach { __item =>
      |        val __value = __item
      |        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(19, __value)
      |      }
      |      if (documentation.isDefined) {
      |        val __value = documentation.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = symbol
      |        if (__v != "") {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |      {
      |        val __v = kind
      |        if (__v != scala.meta.internal.semanticdb.SymbolInformation.Kind.UNKNOWN_KIND) {
      |          _output__.writeEnum(3, __v.value)
      |        }
      |      };
      |      {
      |        val __v = properties
      |        if (__v != 0) {
      |          _output__.writeInt32(4, __v)
      |        }
      |      };
      |      {
      |        val __v = displayName
      |        if (__v != "") {
      |          _output__.writeString(5, __v)
      |        }
      |      };
      |      annotations.foreach { __v =>
      |        val __m = __v
      |        _output__.wr""".stripMargin) + new String(s"""|iteTag(13, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = language
      |        if (__v != scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE) {
      |          _output__.writeEnum(16, __v.value)
      |        }
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toBase(signature)
      |        if (__v != scala.meta.internal.semanticdb.SignatureMessage.defaultInstance) {
      |          _output__.writeTag(17, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toBase(access)
      |        if (__v != scala.meta.internal.semanticdb.AccessMessage.defaultInstance) {
      |          _output__.writeTag(18, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      overriddenSymbols.foreach { __v =>
      |        val __m = __v
      |        _output__.writeString(19, __m)
      |      };
      |      documentation.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(20, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SymbolInformation = {
      |      var __symbol = this.symbol
      |      var __language = this.language
      |      var __kind = this.kind
      |      var __properties = this.properties
      |      var __displayName = this.displayName
      |      var __signature = this.signature
      |      val __annotations = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Annotation] ++= this.annotations)
      |      var __access = this.access
      |      val __overriddenSymbols = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.overriddenSymbols)
      |      var __documentation = this.documentation
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __symbol = _input__.readString()
      |          case 128 =>
      |            __language = scala.meta.internal.semanticdb.Language.fromValue(_input__.readEnum())
      |          case 24 =>
      |            __kind = scala.meta.internal.semanticdb.SymbolInformation.Kind.fromValue(_input__.readEnum())
      |          case 32 =>
      |            __properties = _input__.readInt32()
      |          case 42 =>
      |            __displayName = _input__.readString()
      |          case 138 =>
      |            __signature = scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toBase(__signature)))
      |          case 106 =>
      |            __annotations += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.Annotation.defaultInstance)
      |          case 146 =>
      |            __access = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toBase(__access)))
      |          case 154 =>
      |            __overriddenSymbols += _input__.readString()
      |          case 162 =>
      |            __documentation = Option(_root_.scalapb.LiteParser.readMessage(_input__, __documentation.getOrElse(scala.meta.internal.semanticdb.Documentation.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.SymbolInformation(
      |          symbol = __symbol,
      |          language = __language,
      |          kind = __kind,
      |          properties = __properties,
      |          displayName = __displayName,
      |          signature = __signature,
      |          annotations = __annotations.result(),
      |          access = __access,
      |          overriddenSymbols = __overriddenSymbols.result(),
      |          documentation = __documentation
      |      )
      |    }
      |    def withSymbol(__v: _root_.scala.Predef.String): SymbolInformation = copy(symbol = __v)
      |    def withLanguage(__v: scala.meta.internal.semanticdb.Language): SymbolInformation = copy(language = __v)
      |    def withKind(__v: scala.meta.internal.semanticdb.SymbolInformation.Kind): SymbolInformation = copy(kind = __v)
      |    def withProperties(__v: _root_.scala.Int): SymbolInformation = copy(properties = __v)
      |    def withDisplayName(__v: _root_.scala.Predef.String): SymbolInformation = copy(displayName = __v)
      |    def withSignature(__v: scala.meta.internal.semanticdb.Signature): SymbolInformation = copy(signature = __v)
      |    def clearAnnotations = copy(annotations = _root_.scala.Seq.empty)
      |    def addAnnotations(__vs: scala.meta.internal.semanticdb.Annotation*): SymbolInformation = addAllAnnotations(__vs)
      |    def addAllAnnotations(__vs: Iterable[scala.meta.internal.semanticdb.Annotation]): SymbolInformation = copy(annotations = annot""".stripMargin) + new String(s"""|ations ++ __vs)
      |    def withAnnotations(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]): SymbolInformation = copy(annotations = __v)
      |    def withAccess(__v: scala.meta.internal.semanticdb.Access): SymbolInformation = copy(access = __v)
      |    def clearOverriddenSymbols = copy(overriddenSymbols = _root_.scala.Seq.empty)
      |    def addOverriddenSymbols(__vs: _root_.scala.Predef.String*): SymbolInformation = addAllOverriddenSymbols(__vs)
      |    def addAllOverriddenSymbols(__vs: Iterable[_root_.scala.Predef.String]): SymbolInformation = copy(overriddenSymbols = overriddenSymbols ++ __vs)
      |    def withOverriddenSymbols(__v: _root_.scala.Seq[_root_.scala.Predef.String]): SymbolInformation = copy(overriddenSymbols = __v)
      |    def getDocumentation: scala.meta.internal.semanticdb.Documentation = documentation.getOrElse(scala.meta.internal.semanticdb.Documentation.defaultInstance)
      |    def clearDocumentation: SymbolInformation = copy(documentation = _root_.scala.None)
      |    def withDocumentation(__v: scala.meta.internal.semanticdb.Documentation): SymbolInformation = copy(documentation = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |        case 16 => {
      |          val __t = language.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |        case 3 => {
      |          val __t = kind.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |        case 4 => {
      |          val __t = properties
      |          if (__t != 0) __t else null
      |        }
      |        case 5 => {
      |          val __t = displayName
      |          if (__t != "") __t else null
      |        }
      |        case 17 => {
      |          val __t = scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toBase(signature)
      |          if (__t != scala.meta.internal.semanticdb.SignatureMessage.defaultInstance) __t else null
      |        }
      |        case 13 => annotations
      |        case 18 => {
      |          val __t = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toBase(access)
      |          if (__t != scala.meta.internal.semanticdb.AccessMessage.defaultInstance) __t else null
      |        }
      |        case 19 => overriddenSymbols
      |        case 20 => documentation.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(symbol)
      |        case 16 => _root_.scalapb.descriptors.PEnum(language.scalaValueDescriptor)
      |        case 3 => _root_.scalapb.descriptors.PEnum(kind.scalaValueDescriptor)
      |        case 4 => _root_.scalapb.descriptors.PInt(properties)
      |        case 5 => _root_.scalapb.descriptors.PString(displayName)
      |        case 17 => scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toBase(signature).toPMessage
      |        case 13 => _root_.scalapb.descriptors.PRepeated(annotations.iterator.map(_.toPMessage).toVector)
      |        case 18 => scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toBase(access).toPMessage
      |        case 19 => _root_.scalapb.descriptors.PRepeated(overriddenSymbols.iterator.map(_root_.scalapb.descriptors.PString).toVector)
      |        case 20 => documentation.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.SymbolInformation
      |}
      |
      |object SymbolInformation extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SymbolInformation] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SymbolInformation] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.SymbolInformation = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.SymbolInformation(
      |      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      |      scala.meta.internal.semanticdb.Language.fromValue(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      |      scala.meta.internal.semanticdb.SymbolInformation.Kind.fromValue(__fieldsMap.getOrElse(__fields.get(2), scala.meta.internal.semanticdb.SymbolInformation.Kind.UNKNOWN_KIND.javaValueDescriptor).asInstanceOf[_root_.co""".stripMargin) + new String(s"""|m.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      |      __fieldsMap.getOrElse(__fields.get(3), 0).asInstanceOf[_root_.scala.Int],
      |      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String],
      |      scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toCustom(__fieldsMap.getOrElse(__fields.get(5), scala.meta.internal.semanticdb.SignatureMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.SignatureMessage]),
      |      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]],
      |      scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toCustom(__fieldsMap.getOrElse(__fields.get(7), scala.meta.internal.semanticdb.AccessMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.AccessMessage]),
      |      __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.Seq[_root_.scala.Predef.String]],
      |      __fieldsMap.get(__fields.get(9)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Documentation]]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SymbolInformation] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.SymbolInformation(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        scala.meta.internal.semanticdb.Language.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE.scalaValueDescriptor).number),
      |        scala.meta.internal.semanticdb.SymbolInformation.Kind.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.SymbolInformation.Kind.UNKNOWN_KIND.scalaValueDescriptor).number),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[scala.meta.internal.semanticdb.SignatureMessage]).getOrElse(scala.meta.internal.semanticdb.SignatureMessage.defaultInstance)),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]]).getOrElse(_root_.scala.Seq.empty),
      |        scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).map(_.as[scala.meta.internal.semanticdb.AccessMessage]).getOrElse(scala.meta.internal.semanticdb.AccessMessage.defaultInstance)),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Documentation]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(38)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(38)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 17 => __out = scala.meta.internal.semanticdb.SignatureMessage
      |      case 13 => __out = scala.meta.internal.semanticdb.Annotation
      |      case 18 => __out = scala.meta.internal.semanticdb.AccessMessage
      |      case 20 => __out = scala.meta.internal.semanticdb.Documentation
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      |    (__fieldNumber: @_root_.scala.unchecked) match {
      |      case 16 => scala.meta.internal.semanticdb.Language
      |      case 3 => scala.meta.internal.semanticdb.SymbolInformation.Kind
      |    }
      |  }
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.SymbolInformation(
      |    symbol = "",
      |    language = scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE,
      |    kind = scala.meta.internal.semanticdb.SymbolInformation.Kind.UNKNOWN_KIND,
      |    properties = """.stripMargin) + new String(s"""|0,
      |    displayName = "",
      |    signature = scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toCustom(scala.meta.internal.semanticdb.SignatureMessage.defaultInstance),
      |    annotations = _root_.scala.Seq.empty,
      |    access = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toCustom(scala.meta.internal.semanticdb.AccessMessage.defaultInstance),
      |    overriddenSymbols = _root_.scala.Seq.empty,
      |    documentation = _root_.scala.None
      |  )
      |  sealed trait Kind extends _root_.scalapb.GeneratedEnum {
      |    type EnumType = Kind
      |    def isUnknownKind: _root_.scala.Boolean = false
      |    def isLocal: _root_.scala.Boolean = false
      |    def isField: _root_.scala.Boolean = false
      |    def isMethod: _root_.scala.Boolean = false
      |    def isConstructor: _root_.scala.Boolean = false
      |    def isMacro: _root_.scala.Boolean = false
      |    def isType: _root_.scala.Boolean = false
      |    def isParameter: _root_.scala.Boolean = false
      |    def isSelfParameter: _root_.scala.Boolean = false
      |    def isTypeParameter: _root_.scala.Boolean = false
      |    def isObject: _root_.scala.Boolean = false
      |    def isPackage: _root_.scala.Boolean = false
      |    def isPackageObject: _root_.scala.Boolean = false
      |    def isClass: _root_.scala.Boolean = false
      |    def isTrait: _root_.scala.Boolean = false
      |    def isInterface: _root_.scala.Boolean = false
      |    def companion: _root_.scalapb.GeneratedEnumCompanion[Kind] = scala.meta.internal.semanticdb.SymbolInformation.Kind
      |  }
      |  
      |  object Kind extends _root_.scalapb.GeneratedEnumCompanion[Kind] {
      |    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Kind] = this
      |    @SerialVersionUID(0L)
      |    case object UNKNOWN_KIND extends Kind {
      |      val value = 0
      |      val index = 0
      |      val name = "UNKNOWN_KIND"
      |      override def isUnknownKind: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object LOCAL extends Kind {
      |      val value = 19
      |      val index = 1
      |      val name = "LOCAL"
      |      override def isLocal: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object FIELD extends Kind {
      |      val value = 20
      |      val index = 2
      |      val name = "FIELD"
      |      override def isField: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object METHOD extends Kind {
      |      val value = 3
      |      val index = 3
      |      val name = "METHOD"
      |      override def isMethod: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object CONSTRUCTOR extends Kind {
      |      val value = 21
      |      val index = 4
      |      val name = "CONSTRUCTOR"
      |      override def isConstructor: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object MACRO extends Kind {
      |      val value = 6
      |      val index = 5
      |      val name = "MACRO"
      |      override def isMacro: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object TYPE extends Kind {
      |      val value = 7
      |      val index = 6
      |      val name = "TYPE"
      |      override def isType: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object PARAMETER extends Kind {
      |      val value = 8
      |      val index = 7
      |      val name = "PARAMETER"
      |      override def isParameter: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object SELF_PARAMETER extends Kind {
      |      val value = 17
      |      val index = 8
      |      val name = "SELF_PARAMETER"
      |      override def isSelfParameter: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object TYPE_PARAMETER extends Kind {
      |      val value = 9
      |      val index = 9
      |      val name = "TYPE_PARAMETER"
      |      override def isTypeParameter: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object OBJECT extends Kind {
      |      val value = 10
      |      val index = 10
      |      val name = "OBJECT"
      |      override def isObject: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object PACKAGE extends Kind {
      |      val value = 11
      |      val index = 11
      |      val name = "PACKAGE"
      |      override def isPackage: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object PACKAGE_OBJECT extends Kind {
      |      val value = 12
      |      val index = 12
      |      val name = "PACKAGE_OBJECT"
      |      override def isPackageObject: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object CLASS extends Kind {
      |      val value = 13
      |      val index = 13
      |      val name = "CLASS"
      |      override def isClass: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object TRAIT extends Kind {
      |      val value = 14
      |      val index = 14
      |      val name = "TRAIT"
      |      override def isTrait: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object INTERFACE extends Kind {
      |      val value = 18
      |      val index = 15
      |      val name = "INTERFACE"
      |      override def isInterface: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    final case class Unrecognized(value: _root_.scala.Int) extends Kind w""".stripMargin) + new String(s"""|ith _root_.scalapb.UnrecognizedEnum
      |    
      |    lazy val values = scala.collection.immutable.Seq(UNKNOWN_KIND, LOCAL, FIELD, METHOD, CONSTRUCTOR, MACRO, TYPE, PARAMETER, SELF_PARAMETER, TYPE_PARAMETER, OBJECT, PACKAGE, PACKAGE_OBJECT, CLASS, TRAIT, INTERFACE)
      |    def fromValue(value: _root_.scala.Int): Kind = value match {
      |      case 0 => UNKNOWN_KIND
      |      case 3 => METHOD
      |      case 6 => MACRO
      |      case 7 => TYPE
      |      case 8 => PARAMETER
      |      case 9 => TYPE_PARAMETER
      |      case 10 => OBJECT
      |      case 11 => PACKAGE
      |      case 12 => PACKAGE_OBJECT
      |      case 13 => CLASS
      |      case 14 => TRAIT
      |      case 17 => SELF_PARAMETER
      |      case 18 => INTERFACE
      |      case 19 => LOCAL
      |      case 20 => FIELD
      |      case 21 => CONSTRUCTOR
      |      case __other => Unrecognized(__other)
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb.SymbolInformation.javaDescriptor.getEnumTypes.get(0)
      |    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb.SymbolInformation.scalaDescriptor.enums(0)
      |  }
      |  sealed trait Property extends _root_.scalapb.GeneratedEnum {
      |    type EnumType = Property
      |    def isUnknownProperty: _root_.scala.Boolean = false
      |    def isAbstract: _root_.scala.Boolean = false
      |    def isFinal: _root_.scala.Boolean = false
      |    def isSealed: _root_.scala.Boolean = false
      |    def isImplicit: _root_.scala.Boolean = false
      |    def isLazy: _root_.scala.Boolean = false
      |    def isCase: _root_.scala.Boolean = false
      |    def isCovariant: _root_.scala.Boolean = false
      |    def isContravariant: _root_.scala.Boolean = false
      |    def isVal: _root_.scala.Boolean = false
      |    def isVar: _root_.scala.Boolean = false
      |    def isStatic: _root_.scala.Boolean = false
      |    def isPrimary: _root_.scala.Boolean = false
      |    def isEnum: _root_.scala.Boolean = false
      |    def isDefault: _root_.scala.Boolean = false
      |    def isGiven: _root_.scala.Boolean = false
      |    def isInline: _root_.scala.Boolean = false
      |    def isOpen: _root_.scala.Boolean = false
      |    def isTransparent: _root_.scala.Boolean = false
      |    def isInfix: _root_.scala.Boolean = false
      |    def isOpaque: _root_.scala.Boolean = false
      |    def companion: _root_.scalapb.GeneratedEnumCompanion[Property] = scala.meta.internal.semanticdb.SymbolInformation.Property
      |  }
      |  
      |  object Property extends _root_.scalapb.GeneratedEnumCompanion[Property] {
      |    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Property] = this
      |    @SerialVersionUID(0L)
      |    case object UNKNOWN_PROPERTY extends Property {
      |      val value = 0
      |      val index = 0
      |      val name = "UNKNOWN_PROPERTY"
      |      override def isUnknownProperty: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object ABSTRACT extends Property {
      |      val value = 4
      |      val index = 1
      |      val name = "ABSTRACT"
      |      override def isAbstract: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object FINAL extends Property {
      |      val value = 8
      |      val index = 2
      |      val name = "FINAL"
      |      override def isFinal: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object SEALED extends Property {
      |      val value = 16
      |      val index = 3
      |      val name = "SEALED"
      |      override def isSealed: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object IMPLICIT extends Property {
      |      val value = 32
      |      val index = 4
      |      val name = "IMPLICIT"
      |      override def isImplicit: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object LAZY extends Property {
      |      val value = 64
      |      val index = 5
      |      val name = "LAZY"
      |      override def isLazy: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object CASE extends Property {
      |      val value = 128
      |      val index = 6
      |      val name = "CASE"
      |      override def isCase: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object COVARIANT extends Property {
      |      val value = 256
      |      val index = 7
      |      val name = "COVARIANT"
      |      override def isCovariant: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object CONTRAVARIANT extends Property {
      |      val value = 512
      |      val index = 8
      |      val name = "CONTRAVARIANT"
      |      override def isContravariant: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object VAL extends Property {
      |      val value = 1024
      |      val index = 9
      |      val name = "VAL"
      |      override def isVal: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object VAR extends Property {
      |      val value = 2048
      |      val index = 10
      |      val name = "VAR"
      |      override def isVar: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object STATIC extends Property {
      |      val value = 4096
      |      val index = 11
      |      val name = "STATIC"
      |      override def isStatic: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    cas""".stripMargin) + new String(s"""|e object PRIMARY extends Property {
      |      val value = 8192
      |      val index = 12
      |      val name = "PRIMARY"
      |      override def isPrimary: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object ENUM extends Property {
      |      val value = 16384
      |      val index = 13
      |      val name = "ENUM"
      |      override def isEnum: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object DEFAULT extends Property {
      |      val value = 32768
      |      val index = 14
      |      val name = "DEFAULT"
      |      override def isDefault: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object GIVEN extends Property {
      |      val value = 65536
      |      val index = 15
      |      val name = "GIVEN"
      |      override def isGiven: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object INLINE extends Property {
      |      val value = 131072
      |      val index = 16
      |      val name = "INLINE"
      |      override def isInline: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object OPEN extends Property {
      |      val value = 262144
      |      val index = 17
      |      val name = "OPEN"
      |      override def isOpen: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object TRANSPARENT extends Property {
      |      val value = 524288
      |      val index = 18
      |      val name = "TRANSPARENT"
      |      override def isTransparent: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object INFIX extends Property {
      |      val value = 1048576
      |      val index = 19
      |      val name = "INFIX"
      |      override def isInfix: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object OPAQUE extends Property {
      |      val value = 2097152
      |      val index = 20
      |      val name = "OPAQUE"
      |      override def isOpaque: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    final case class Unrecognized(value: _root_.scala.Int) extends Property with _root_.scalapb.UnrecognizedEnum
      |    
      |    lazy val values = scala.collection.immutable.Seq(UNKNOWN_PROPERTY, ABSTRACT, FINAL, SEALED, IMPLICIT, LAZY, CASE, COVARIANT, CONTRAVARIANT, VAL, VAR, STATIC, PRIMARY, ENUM, DEFAULT, GIVEN, INLINE, OPEN, TRANSPARENT, INFIX, OPAQUE)
      |    def fromValue(value: _root_.scala.Int): Property = value match {
      |      case 0 => UNKNOWN_PROPERTY
      |      case 4 => ABSTRACT
      |      case 8 => FINAL
      |      case 16 => SEALED
      |      case 32 => IMPLICIT
      |      case 64 => LAZY
      |      case 128 => CASE
      |      case 256 => COVARIANT
      |      case 512 => CONTRAVARIANT
      |      case 1024 => VAL
      |      case 2048 => VAR
      |      case 4096 => STATIC
      |      case 8192 => PRIMARY
      |      case 16384 => ENUM
      |      case 32768 => DEFAULT
      |      case 65536 => GIVEN
      |      case 131072 => INLINE
      |      case 262144 => OPEN
      |      case 524288 => TRANSPARENT
      |      case 1048576 => INFIX
      |      case 2097152 => OPAQUE
      |      case __other => Unrecognized(__other)
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb.SymbolInformation.javaDescriptor.getEnumTypes.get(1)
      |    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb.SymbolInformation.scalaDescriptor.enums(1)
      |  }
      |  implicit class SymbolInformationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SymbolInformation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SymbolInformation](_l) {
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |    def language: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Language] = field(_.language)((c_, f_) => c_.copy(language = f_))
      |    def kind: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SymbolInformation.Kind] = field(_.kind)((c_, f_) => c_.copy(kind = f_))
      |    def properties: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.properties)((c_, f_) => c_.copy(properties = f_))
      |    def displayName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.displayName)((c_, f_) => c_.copy(displayName = f_))
      |    def signature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Signature] = field(_.signature)((c_, f_) => c_.copy(signature = f_))
      |    def annotations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]] = field(_.annotations)((c_, f_) => c_.copy(annotations = f_))
      |    def access: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Access] = field(_.access)((c_, f_) => c_.copy(access = f_))
      |    def overriddenSymbols: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.overriddenSymbols)((c_, f_) => c_.copy(overriddenSymbols = f_))
      |    def documentation: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Documentation] = field(_.getDocumentation)((c_, f_) => c_.copy(documentation = Opt""".stripMargin) + new String(s"""|ion(f_)))
      |    def optionalDocumentation: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Documentation]] = field(_.documentation)((c_, f_) => c_.copy(documentation = f_))
      |  }
      |  final val SYMBOL_FIELD_NUMBER = 1
      |  final val LANGUAGE_FIELD_NUMBER = 16
      |  final val KIND_FIELD_NUMBER = 3
      |  final val PROPERTIES_FIELD_NUMBER = 4
      |  final val DISPLAY_NAME_FIELD_NUMBER = 5
      |  final val SIGNATURE_FIELD_NUMBER = 17
      |  final val ANNOTATIONS_FIELD_NUMBER = 13
      |  final val ACCESS_FIELD_NUMBER = 18
      |  final val OVERRIDDEN_SYMBOLS_FIELD_NUMBER = 19
      |  final val DOCUMENTATION_FIELD_NUMBER = 20
      |  @transient
      |  private val _typemapper_signature: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SignatureMessage, scala.meta.internal.semanticdb.Signature] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SignatureMessage, scala.meta.internal.semanticdb.Signature]]
      |  @transient
      |  private val _typemapper_access: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.AccessMessage, scala.meta.internal.semanticdb.Access] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.AccessMessage, scala.meta.internal.semanticdb.Access]]
      |  def of(
      |    symbol: _root_.scala.Predef.String,
      |    language: scala.meta.internal.semanticdb.Language,
      |    kind: scala.meta.internal.semanticdb.SymbolInformation.Kind,
      |    properties: _root_.scala.Int,
      |    displayName: _root_.scala.Predef.String,
      |    signature: scala.meta.internal.semanticdb.Signature,
      |    annotations: _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation],
      |    access: scala.meta.internal.semanticdb.Access,
      |    overriddenSymbols: _root_.scala.Seq[_root_.scala.Predef.String],
      |    documentation: _root_.scala.Option[scala.meta.internal.semanticdb.Documentation]
      |  ): _root_.scala.meta.internal.semanticdb.SymbolInformation = _root_.scala.meta.internal.semanticdb.SymbolInformation(
      |    symbol,
      |    language,
      |    kind,
      |    properties,
      |    displayName,
      |    signature,
      |    annotations,
      |    access,
      |    overriddenSymbols,
      |    documentation
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/SymbolOccurrence.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class SymbolOccurrence(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None,
      |    symbol: _root_.scala.Predef.String = "",
      |    role: scala.meta.internal.semanticdb.SymbolOccurrence.Role = scala.meta.internal.semanticdb.SymbolOccurrence.Role.UNKNOWN_ROLE
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[SymbolOccurrence] with scalapb.lenses.Updatable[SymbolOccurrence] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (range.isDefined) {
      |        val __value = range.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      
      |      {
      |        val __value = symbol
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = role
      |        if (__value != scala.meta.internal.semanticdb.SymbolOccurrence.Role.UNKNOWN_ROLE) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value.value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      range.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = symbol
      |        if (__v != "") {
      |          _output__.writeString(2, __v)
      |        }
      |      };
      |      {
      |        val __v = role
      |        if (__v != scala.meta.internal.semanticdb.SymbolOccurrence.Role.UNKNOWN_ROLE) {
      |          _output__.writeEnum(3, __v.value)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SymbolOccurrence = {
      |      var __range = this.range
      |      var __symbol = this.symbol
      |      var __role = this.role
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __range = Option(_root_.scalapb.LiteParser.readMessage(_input__, __range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)))
      |          case 18 =>
      |            __symbol = _input__.readString()
      |          case 24 =>
      |            __role = scala.meta.internal.semanticdb.SymbolOccurrence.Role.fromValue(_input__.readEnum())
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.SymbolOccurrence(
      |          range = __range,
      |          symbol = __symbol,
      |          role = __role
      |      )
      |    }
      |    def getRange: scala.meta.internal.semanticdb.Range = range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)
      |    def clearRange: SymbolOccurrence = copy(range = _root_.scala.None)
      |    def withRange(__v: scala.meta.internal.semanticdb.Range): SymbolOccurrence = copy(range = Option(__v))
      |    def withSymbol(__v: _root_.scala.Predef.String): SymbolOccurrence = copy(symbol = __v)
      |    def withRole(__v: scala.meta.internal.semanticdb.SymbolOccurrence.Role): SymbolOccurrence = copy(role = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => range.orNull
      |        case 2 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |        case 3 => {
      |          val __t = role.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => _root_.scalapb.descriptors.PString(symbol)
      |        case 3 => _root_.scalapb.descriptors.PEnum(role.scalaValueDescriptor)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.SymbolOccurrence
      |}
      |
      |object SymbolOccurrence extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SymbolOccurrence] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.inter""".stripMargin) + new String(s"""|nal.semanticdb.SymbolOccurrence] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.SymbolOccurrence = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.SymbolOccurrence(
      |      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Range]],
      |      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      |      scala.meta.internal.semanticdb.SymbolOccurrence.Role.fromValue(__fieldsMap.getOrElse(__fields.get(2), scala.meta.internal.semanticdb.SymbolOccurrence.Role.UNKNOWN_ROLE.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber)
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SymbolOccurrence] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.SymbolOccurrence(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Range]]),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        scala.meta.internal.semanticdb.SymbolOccurrence.Role.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.SymbolOccurrence.Role.UNKNOWN_ROLE.scalaValueDescriptor).number)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(49)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(49)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Range
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      |    (__fieldNumber: @_root_.scala.unchecked) match {
      |      case 3 => scala.meta.internal.semanticdb.SymbolOccurrence.Role
      |    }
      |  }
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.SymbolOccurrence(
      |    range = _root_.scala.None,
      |    symbol = "",
      |    role = scala.meta.internal.semanticdb.SymbolOccurrence.Role.UNKNOWN_ROLE
      |  )
      |  sealed trait Role extends _root_.scalapb.GeneratedEnum {
      |    type EnumType = Role
      |    def isUnknownRole: _root_.scala.Boolean = false
      |    def isReference: _root_.scala.Boolean = false
      |    def isDefinition: _root_.scala.Boolean = false
      |    def companion: _root_.scalapb.GeneratedEnumCompanion[Role] = scala.meta.internal.semanticdb.SymbolOccurrence.Role
      |  }
      |  
      |  object Role extends _root_.scalapb.GeneratedEnumCompanion[Role] {
      |    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Role] = this
      |    @SerialVersionUID(0L)
      |    case object UNKNOWN_ROLE extends Role {
      |      val value = 0
      |      val index = 0
      |      val name = "UNKNOWN_ROLE"
      |      override def isUnknownRole: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object REFERENCE extends Role {
      |      val value = 1
      |      val index = 1
      |      val name = "REFERENCE"
      |      override def isReference: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object DEFINITION extends Role {
      |      val value = 2
      |      val index = 2
      |      val name = "DEFINITION"
      |      override def isDefinition: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    final case class Unrecognized(value: _root_.scala.Int) extends Role with _root_.scalapb.UnrecognizedEnum
      |    
      |    lazy val values = scala.collection.immutable.Seq(UNKNOWN_ROLE, REFERENCE, DEFINITION)
      |    def fromValue(value: _root_.scala.Int): Role = value match {
      |      case 0 => UNKNOWN_ROLE
      |      case 1 => REFERENCE
      |      case 2 => DEFINITION
      |      case __other => Unrecognized(__other)
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb.SymbolOccurrence.javaDescriptor.getEnumTypes.get(0)
      |    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb.SymbolOccurrence.scalaDescripto""".stripMargin) + new String(s"""|r.enums(0)
      |  }
      |  implicit class SymbolOccurrenceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SymbolOccurrence]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SymbolOccurrence](_l) {
      |    def range: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
      |    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Range]] = field(_.range)((c_, f_) => c_.copy(range = f_))
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |    def role: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SymbolOccurrence.Role] = field(_.role)((c_, f_) => c_.copy(role = f_))
      |  }
      |  final val RANGE_FIELD_NUMBER = 1
      |  final val SYMBOL_FIELD_NUMBER = 2
      |  final val ROLE_FIELD_NUMBER = 3
      |  def of(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range],
      |    symbol: _root_.scala.Predef.String,
      |    role: scala.meta.internal.semanticdb.SymbolOccurrence.Role
      |  ): _root_.scala.meta.internal.semanticdb.SymbolOccurrence = _root_.scala.meta.internal.semanticdb.SymbolOccurrence(
      |    range,
      |    symbol,
      |    role
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Synthetic.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Synthetic(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None,
      |    tree: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[Synthetic] with scalapb.lenses.Updatable[Synthetic] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (range.isDefined) {
      |        val __value = range.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toBase(tree)
      |        if (__value != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      range.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toBase(tree)
      |        if (__v != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
      |          _output__.writeTag(2, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Synthetic = {
      |      var __range = this.range
      |      var __tree = this.tree
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __range = Option(_root_.scalapb.LiteParser.readMessage(_input__, __range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)))
      |          case 18 =>
      |            __tree = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toBase(__tree)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.Synthetic(
      |          range = __range,
      |          tree = __tree
      |      )
      |    }
      |    def getRange: scala.meta.internal.semanticdb.Range = range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)
      |    def clearRange: Synthetic = copy(range = _root_.scala.None)
      |    def withRange(__v: scala.meta.internal.semanticdb.Range): Synthetic = copy(range = Option(__v))
      |    def withTree(__v: scala.meta.internal.semanticdb.Tree): Synthetic = copy(tree = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => range.orNull
      |        case 2 => {
      |          val __t = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toBase(tree)
      |          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toBase(tree).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.Synthetic
      |}
      |
      |object Synthetic extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Synthetic] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Synthetic] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.Synthetic = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor),""".stripMargin) + new String(s"""| "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.Synthetic(
      |      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Range]],
      |      scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.TreeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TreeMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Synthetic] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Synthetic(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Range]]),
      |        scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(51)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(51)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Range
      |      case 2 => __out = scala.meta.internal.semanticdb.TreeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Synthetic(
      |    range = _root_.scala.None,
      |    tree = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)
      |  )
      |  implicit class SyntheticLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Synthetic]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Synthetic](_l) {
      |    def range: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
      |    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Range]] = field(_.range)((c_, f_) => c_.copy(range = f_))
      |    def tree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.tree)((c_, f_) => c_.copy(tree = f_))
      |  }
      |  final val RANGE_FIELD_NUMBER = 1
      |  final val TREE_FIELD_NUMBER = 2
      |  @transient
      |  private val _typemapper_tree: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  def of(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range],
      |    tree: scala.meta.internal.semanticdb.Tree
      |  ): _root_.scala.meta.internal.semanticdb.Synthetic = _root_.scala.meta.internal.semanticdb.Synthetic(
      |    range,
      |    tree
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/TextDocument.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class TextDocument(
      |    schema: scala.meta.internal.semanticdb.Schema = scala.meta.internal.semanticdb.Schema.LEGACY,
      |    uri: _root_.scala.Predef.String = "",
      |    text: _root_.scala.Predef.String = "",
      |    md5: _root_.scala.Predef.String = "",
      |    language: scala.meta.internal.semanticdb.Language = scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE,
      |    symbols: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation] = _root_.scala.Seq.empty,
      |    occurrences: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolOccurrence] = _root_.scala.Seq.empty,
      |    diagnostics: _root_.scala.Seq[scala.meta.internal.semanticdb.Diagnostic] = _root_.scala.Seq.empty,
      |    synthetics: _root_.scala.Seq[scala.meta.internal.semanticdb.Synthetic] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[TextDocument] with scalapb.lenses.Updatable[TextDocument] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = schema
      |        if (__value != scala.meta.internal.semanticdb.Schema.LEGACY) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value.value)
      |        }
      |      };
      |      
      |      {
      |        val __value = uri
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = text
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = md5
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = language
      |        if (__value != scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(10, __value.value)
      |        }
      |      };
      |      symbols.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      occurrences.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      diagnostics.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      synthetics.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = schema
      |        if (__v != scala.meta.internal.semanticdb.Schema.LEGACY) {
      |          _output__.writeEnum(1, __v.value)
      |        }
      |      };
      |      {
      |        val __v = uri
      |        if (__v != "") {
      |          _output__.writeString(2, __v)
      |        }
      |      };
      |      {
      |        val __v = text
      |        if (__v != "") {
      |          _output__.writeString(3, __v)
      |        }
      |      };
      |      symbols.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(5, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      occurrences.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(6, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      diagnostics.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(7, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = language
      |        if (__v != scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE) {
      |          _output__.writeEnum(10, __v.value)
      |        }
      |      };
      |      {
      |        val __v = md5
      |        if (__v != "") {
      |          _output__.writeString(11, __v)
      |        }
      |      };
      |      synthetics.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(12, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputS""".stripMargin) + new String(s"""|tream): scala.meta.internal.semanticdb.TextDocument = {
      |      var __schema = this.schema
      |      var __uri = this.uri
      |      var __text = this.text
      |      var __md5 = this.md5
      |      var __language = this.language
      |      val __symbols = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.SymbolInformation] ++= this.symbols)
      |      val __occurrences = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.SymbolOccurrence] ++= this.occurrences)
      |      val __diagnostics = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Diagnostic] ++= this.diagnostics)
      |      val __synthetics = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Synthetic] ++= this.synthetics)
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 8 =>
      |            __schema = scala.meta.internal.semanticdb.Schema.fromValue(_input__.readEnum())
      |          case 18 =>
      |            __uri = _input__.readString()
      |          case 26 =>
      |            __text = _input__.readString()
      |          case 90 =>
      |            __md5 = _input__.readString()
      |          case 80 =>
      |            __language = scala.meta.internal.semanticdb.Language.fromValue(_input__.readEnum())
      |          case 42 =>
      |            __symbols += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.SymbolInformation.defaultInstance)
      |          case 50 =>
      |            __occurrences += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.SymbolOccurrence.defaultInstance)
      |          case 58 =>
      |            __diagnostics += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.Diagnostic.defaultInstance)
      |          case 98 =>
      |            __synthetics += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.Synthetic.defaultInstance)
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.TextDocument(
      |          schema = __schema,
      |          uri = __uri,
      |          text = __text,
      |          md5 = __md5,
      |          language = __language,
      |          symbols = __symbols.result(),
      |          occurrences = __occurrences.result(),
      |          diagnostics = __diagnostics.result(),
      |          synthetics = __synthetics.result()
      |      )
      |    }
      |    def withSchema(__v: scala.meta.internal.semanticdb.Schema): TextDocument = copy(schema = __v)
      |    def withUri(__v: _root_.scala.Predef.String): TextDocument = copy(uri = __v)
      |    def withText(__v: _root_.scala.Predef.String): TextDocument = copy(text = __v)
      |    def withMd5(__v: _root_.scala.Predef.String): TextDocument = copy(md5 = __v)
      |    def withLanguage(__v: scala.meta.internal.semanticdb.Language): TextDocument = copy(language = __v)
      |    def clearSymbols = copy(symbols = _root_.scala.Seq.empty)
      |    def addSymbols(__vs: scala.meta.internal.semanticdb.SymbolInformation*): TextDocument = addAllSymbols(__vs)
      |    def addAllSymbols(__vs: Iterable[scala.meta.internal.semanticdb.SymbolInformation]): TextDocument = copy(symbols = symbols ++ __vs)
      |    def withSymbols(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]): TextDocument = copy(symbols = __v)
      |    def clearOccurrences = copy(occurrences = _root_.scala.Seq.empty)
      |    def addOccurrences(__vs: scala.meta.internal.semanticdb.SymbolOccurrence*): TextDocument = addAllOccurrences(__vs)
      |    def addAllOccurrences(__vs: Iterable[scala.meta.internal.semanticdb.SymbolOccurrence]): TextDocument = copy(occurrences = occurrences ++ __vs)
      |    def withOccurrences(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolOccurrence]): TextDocument = copy(occurrences = __v)
      |    def clearDiagnostics = copy(diagnostics = _root_.scala.Seq.empty)
      |    def addDiagnostics(__vs: scala.meta.internal.semanticdb.Diagnostic*): TextDocument = addAllDiagnostics(__vs)
      |    def addAllDiagnostics(__vs: Iterable[scala.meta.internal.semanticdb.Diagnostic]): TextDocument = copy(diagnostics = diagnostics ++ __vs)
      |    def withDiagnostics(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Diagnostic]): TextDocument = copy(diagnostics = __v)
      |    def clearSynthetics = copy(synthetics = _root_.scala.Seq.empty)
      |    def addSynthetics(__vs: scala.meta.internal.semanticdb.Synthetic*): TextDocument = addAllSynthetics(__vs)
      |    def addAllSynthetics(__vs: Iterable[scala.meta.internal.semanticdb.Synthetic]): TextDocument = copy(synthetics = synthetics ++ __vs)
      |    def withSynthetics(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Synthetic]): TextDocument = copy(synthetics = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = schema.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |        case 2 => {
      |          val __t = uri
      |       """.stripMargin) + new String(s"""|   if (__t != "") __t else null
      |        }
      |        case 3 => {
      |          val __t = text
      |          if (__t != "") __t else null
      |        }
      |        case 11 => {
      |          val __t = md5
      |          if (__t != "") __t else null
      |        }
      |        case 10 => {
      |          val __t = language.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |        case 5 => symbols
      |        case 6 => occurrences
      |        case 7 => diagnostics
      |        case 12 => synthetics
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PEnum(schema.scalaValueDescriptor)
      |        case 2 => _root_.scalapb.descriptors.PString(uri)
      |        case 3 => _root_.scalapb.descriptors.PString(text)
      |        case 11 => _root_.scalapb.descriptors.PString(md5)
      |        case 10 => _root_.scalapb.descriptors.PEnum(language.scalaValueDescriptor)
      |        case 5 => _root_.scalapb.descriptors.PRepeated(symbols.iterator.map(_.toPMessage).toVector)
      |        case 6 => _root_.scalapb.descriptors.PRepeated(occurrences.iterator.map(_.toPMessage).toVector)
      |        case 7 => _root_.scalapb.descriptors.PRepeated(diagnostics.iterator.map(_.toPMessage).toVector)
      |        case 12 => _root_.scalapb.descriptors.PRepeated(synthetics.iterator.map(_.toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.TextDocument
      |}
      |
      |object TextDocument extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TextDocument] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TextDocument] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.TextDocument = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.TextDocument(
      |      scala.meta.internal.semanticdb.Schema.fromValue(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.Schema.LEGACY.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      |      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      |      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      |      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      |      scala.meta.internal.semanticdb.Language.fromValue(__fieldsMap.getOrElse(__fields.get(4), scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      |      __fieldsMap.getOrElse(__fields.get(5), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]],
      |      __fieldsMap.getOrElse(__fields.get(6), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.SymbolOccurrence]],
      |      __fieldsMap.getOrElse(__fields.get(7), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.Diagnostic]],
      |      __fieldsMap.getOrElse(__fields.get(8), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.Synthetic]]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TextDocument] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TextDocument(
      |        scala.meta.internal.semanticdb.Schema.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.Schema.LEGACY.scalaValueDescriptor).number),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        scala.meta.internal.semanticdb.Language.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE.scalaValueDescriptor).number),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_""".stripMargin) + new String(s"""|root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]]).getOrElse(_root_.scala.Seq.empty),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.SymbolOccurrence]]).getOrElse(_root_.scala.Seq.empty),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.Diagnostic]]).getOrElse(_root_.scala.Seq.empty),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.Synthetic]]).getOrElse(_root_.scala.Seq.empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(1)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(1)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 5 => __out = scala.meta.internal.semanticdb.SymbolInformation
      |      case 6 => __out = scala.meta.internal.semanticdb.SymbolOccurrence
      |      case 7 => __out = scala.meta.internal.semanticdb.Diagnostic
      |      case 12 => __out = scala.meta.internal.semanticdb.Synthetic
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      |    (__fieldNumber: @_root_.scala.unchecked) match {
      |      case 1 => scala.meta.internal.semanticdb.Schema
      |      case 10 => scala.meta.internal.semanticdb.Language
      |    }
      |  }
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TextDocument(
      |    schema = scala.meta.internal.semanticdb.Schema.LEGACY,
      |    uri = "",
      |    text = "",
      |    md5 = "",
      |    language = scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE,
      |    symbols = _root_.scala.Seq.empty,
      |    occurrences = _root_.scala.Seq.empty,
      |    diagnostics = _root_.scala.Seq.empty,
      |    synthetics = _root_.scala.Seq.empty
      |  )
      |  implicit class TextDocumentLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TextDocument]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TextDocument](_l) {
      |    def schema: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Schema] = field(_.schema)((c_, f_) => c_.copy(schema = f_))
      |    def uri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.uri)((c_, f_) => c_.copy(uri = f_))
      |    def text: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.text)((c_, f_) => c_.copy(text = f_))
      |    def md5: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.md5)((c_, f_) => c_.copy(md5 = f_))
      |    def language: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Language] = field(_.language)((c_, f_) => c_.copy(language = f_))
      |    def symbols: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]] = field(_.symbols)((c_, f_) => c_.copy(symbols = f_))
      |    def occurrences: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolOccurrence]] = field(_.occurrences)((c_, f_) => c_.copy(occurrences = f_))
      |    def diagnostics: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Diagnostic]] = field(_.diagnostics)((c_, f_) => c_.copy(diagnostics = f_))
      |    def synthetics: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Synthetic]] = field(_.synthetics)((c_, f_) => c_.copy(synthetics = f_))
      |  }
      |  final val SCHEMA_FIELD_NUMBER = 1
      |  final val URI_FIELD_NUMBER = 2
      |  final val TEXT_FIELD_NUMBER = 3
      |  final val MD5_FIELD_NUMBER = 11
      |  final val LANGUAGE_FIELD_NUMBER = 10
      |  final val SYMBOLS_FIELD_NUMBER = 5
      |  final val OCCURRENCES_FIELD_NUMBER = 6
      |  final val DIAGNOSTICS_FIELD_NUMBER = 7
      |  final val SYNTHETICS_FIELD_NUMBER = 12
      |  def of(
      |    schema: scala.meta.internal.semanticdb.Schema,
      |    uri: _root_.scala.Predef.String,
      |    text: _root_.scala.Predef.String,
      |    md5: _root_.scala.Predef.String,
      |    language: scala.meta.internal.semanticdb.Language,
      |    symbols: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation],
      |    occurrences: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolOccurrence],
      |    diagnostics: _root_.scala.Seq[scala.meta.internal.semanticdb.Diagnostic],
      |    synthetics: _root_.scala.Seq[scala.meta.internal.semanticdb.Synthetic]
      |  ): _root_.scala.meta.internal.semanticdb.TextDocument = _root_.scala.meta.internal.semanticdb.TextDocument(
      |    schema,
      |    uri,
      |    text,
      |    md5,
      |    language,
      |    symbols,
      |    occurrences,
      |    diagnostic""".stripMargin) + new String(s"""|s,
      |    synthetics
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/TextDocuments.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class TextDocuments(
      |    documents: _root_.scala.Seq[scala.meta.internal.semanticdb.TextDocument] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[TextDocuments] with scalapb.lenses.Updatable[TextDocuments] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      documents.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      documents.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TextDocuments = {
      |      val __documents = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.TextDocument] ++= this.documents)
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __documents += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TextDocument.defaultInstance)
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.TextDocuments(
      |          documents = __documents.result()
      |      )
      |    }
      |    def clearDocuments = copy(documents = _root_.scala.Seq.empty)
      |    def addDocuments(__vs: scala.meta.internal.semanticdb.TextDocument*): TextDocuments = addAllDocuments(__vs)
      |    def addAllDocuments(__vs: Iterable[scala.meta.internal.semanticdb.TextDocument]): TextDocuments = copy(documents = documents ++ __vs)
      |    def withDocuments(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.TextDocument]): TextDocuments = copy(documents = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => documents
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(documents.iterator.map(_.toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.TextDocuments
      |}
      |
      |object TextDocuments extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TextDocuments] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TextDocuments] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.TextDocuments = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.TextDocuments(
      |      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.TextDocument]]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TextDocuments] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TextDocuments(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TextDocument]]).getOrElse(_root_.scala.Seq.empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(0)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(0)
      |  def messageCompanionForFieldNumber(_""".stripMargin) + new String(s"""|_number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TextDocument
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TextDocuments(
      |    documents = _root_.scala.Seq.empty
      |  )
      |  implicit class TextDocumentsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TextDocuments]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TextDocuments](_l) {
      |    def documents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.TextDocument]] = field(_.documents)((c_, f_) => c_.copy(documents = f_))
      |  }
      |  final val DOCUMENTS_FIELD_NUMBER = 1
      |  def of(
      |    documents: _root_.scala.Seq[scala.meta.internal.semanticdb.TextDocument]
      |  ): _root_.scala.meta.internal.semanticdb.TextDocuments = _root_.scala.meta.internal.semanticdb.TextDocuments(
      |    documents
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Tree.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed trait Tree extends scalapb.GeneratedSealedOneof {
      |  type MessageType = scala.meta.internal.semanticdb.TreeMessage
      |  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Tree.Empty.type]
      |  final def isDefined = !isEmpty
      |  final def asMessage: scala.meta.internal.semanticdb.TreeMessage = scala.meta.internal.semanticdb.Tree.TreeTypeMapper.toBase(this)
      |  final def asNonEmpty: Option[scala.meta.internal.semanticdb.Tree.NonEmpty] = if (isEmpty) None else Some(this.asInstanceOf[scala.meta.internal.semanticdb.Tree.NonEmpty])
      |}
      |
      |object Tree {
      |  case object Empty extends scala.meta.internal.semanticdb.Tree
      |  
      |  sealed trait NonEmpty extends scala.meta.internal.semanticdb.Tree
      |  
      |  def defaultInstance: scala.meta.internal.semanticdb.Tree = Empty
      |  
      |  implicit val TreeTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] {
      |    override def toCustom(__base: scala.meta.internal.semanticdb.TreeMessage): scala.meta.internal.semanticdb.Tree = __base.sealedValue match {
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree => __v.value
      |      case scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty => Empty
      |    }
      |    override def toBase(__custom: scala.meta.internal.semanticdb.Tree): scala.meta.internal.semanticdb.TreeMessage = scala.meta.internal.semanticdb.TreeMessage(__custom match {
      |      case __v: scala.meta.internal.semanticdb.ApplyTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(__v)
      |      case __v: scala.meta.internal.semanticdb.FunctionTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(__v)
      |      case __v: scala.meta.internal.semanticdb.IdTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(__v)
      |      case __v: scala.meta.internal.semanticdb.LiteralTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(__v)
      |      case __v: scala.meta.internal.semanticdb.MacroExpansionTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(__v)
      |      case __v: scala.meta.internal.semanticdb.OriginalTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(__v)
      |      case __v: scala.meta.internal.semanticdb.SelectTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(__v)
      |      case __v: scala.meta.internal.semanticdb.TypeApplyTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(__v)
      |      case Empty => scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty
      |    })
      |  }
      |}
      |@SerialVersionUID(0L)
      |final case class TreeMessage(
      |    sealedValue: scala.meta.internal.semanticdb.TreeMessage.SealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[TreeMessage] with scalapb.lenses.Updatable[TreeMessage] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (sealedValue.applyTree.isDefined) {
      |        val __value = sealedValue.applyTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.functionTree.isDefined) {
      |        val __value = sealedValue.functionTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.idTree.isDefined) {
      |        val __value = sealedValue.idTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.literalTree.isDefined) {
      |        val __value = sealedValue.literalTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedVa""".stripMargin) + new String(s"""|lue.macroExpansionTree.isDefined) {
      |        val __value = sealedValue.macroExpansionTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.originalTree.isDefined) {
      |        val __value = sealedValue.originalTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.selectTree.isDefined) {
      |        val __value = sealedValue.selectTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.typeApplyTree.isDefined) {
      |        val __value = sealedValue.typeApplyTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      sealedValue.applyTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.functionTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.idTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.literalTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(4, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.macroExpansionTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(5, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.originalTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(6, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.selectTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(7, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.typeApplyTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(8, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TreeMessage = {
      |      var __sealedValue = this.sealedValue
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.applyTree.getOrElse(scala.meta.internal.semanticdb.ApplyTree.defaultInstance)))
      |          case 18 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.functionTree.getOrElse(scala.meta.internal.semanticdb.FunctionTree.defaultInstance)))
      |          case 26 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.idTree.getOrElse(scala.meta.internal.semanticdb.IdTree.defaultInstance)))
      |          case 34 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.literalTree.getOrElse(scala.meta.internal.semanticdb.LiteralTree.defaultInstance)))
      |          case 42 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.macroExpansionTree.getOrElse(scala.meta.internal.semanticdb.MacroExpansionTree.defaultInstance)))
      |          case 50 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.originalTree.getOrElse(scala.meta.internal.semanticdb.OriginalTree.defaultInstance)))
      |          case 58 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.selectTree.getOrElse(sca""".stripMargin) + new String(s"""|la.meta.internal.semanticdb.SelectTree.defaultInstance)))
      |          case 66 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.typeApplyTree.getOrElse(scala.meta.internal.semanticdb.TypeApplyTree.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.TreeMessage(
      |          sealedValue = __sealedValue
      |      )
      |    }
      |    def getApplyTree: scala.meta.internal.semanticdb.ApplyTree = sealedValue.applyTree.getOrElse(scala.meta.internal.semanticdb.ApplyTree.defaultInstance)
      |    def withApplyTree(__v: scala.meta.internal.semanticdb.ApplyTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(__v))
      |    def getFunctionTree: scala.meta.internal.semanticdb.FunctionTree = sealedValue.functionTree.getOrElse(scala.meta.internal.semanticdb.FunctionTree.defaultInstance)
      |    def withFunctionTree(__v: scala.meta.internal.semanticdb.FunctionTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(__v))
      |    def getIdTree: scala.meta.internal.semanticdb.IdTree = sealedValue.idTree.getOrElse(scala.meta.internal.semanticdb.IdTree.defaultInstance)
      |    def withIdTree(__v: scala.meta.internal.semanticdb.IdTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(__v))
      |    def getLiteralTree: scala.meta.internal.semanticdb.LiteralTree = sealedValue.literalTree.getOrElse(scala.meta.internal.semanticdb.LiteralTree.defaultInstance)
      |    def withLiteralTree(__v: scala.meta.internal.semanticdb.LiteralTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(__v))
      |    def getMacroExpansionTree: scala.meta.internal.semanticdb.MacroExpansionTree = sealedValue.macroExpansionTree.getOrElse(scala.meta.internal.semanticdb.MacroExpansionTree.defaultInstance)
      |    def withMacroExpansionTree(__v: scala.meta.internal.semanticdb.MacroExpansionTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(__v))
      |    def getOriginalTree: scala.meta.internal.semanticdb.OriginalTree = sealedValue.originalTree.getOrElse(scala.meta.internal.semanticdb.OriginalTree.defaultInstance)
      |    def withOriginalTree(__v: scala.meta.internal.semanticdb.OriginalTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(__v))
      |    def getSelectTree: scala.meta.internal.semanticdb.SelectTree = sealedValue.selectTree.getOrElse(scala.meta.internal.semanticdb.SelectTree.defaultInstance)
      |    def withSelectTree(__v: scala.meta.internal.semanticdb.SelectTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(__v))
      |    def getTypeApplyTree: scala.meta.internal.semanticdb.TypeApplyTree = sealedValue.typeApplyTree.getOrElse(scala.meta.internal.semanticdb.TypeApplyTree.defaultInstance)
      |    def withTypeApplyTree(__v: scala.meta.internal.semanticdb.TypeApplyTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(__v))
      |    def clearSealedValue: TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty)
      |    def withSealedValue(__v: scala.meta.internal.semanticdb.TreeMessage.SealedValue): TreeMessage = copy(sealedValue = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.applyTree.orNull
      |        case 2 => sealedValue.functionTree.orNull
      |        case 3 => sealedValue.idTree.orNull
      |        case 4 => sealedValue.literalTree.orNull
      |        case 5 => sealedValue.macroExpansionTree.orNull
      |        case 6 => sealedValue.originalTree.orNull
      |        case 7 => sealedValue.selectTree.orNull
      |        case 8 => sealedValue.typeApplyTree.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.applyTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => sealedValue.functionTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 3 => sealedValue.idTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 4 => sealedValue.literalTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 5 => sealedValue.macroExpansionTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 6 => sealedValue.originalTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 7 => sealedValue.selectTree.map(_.toPMessage).getOrElse(""".stripMargin) + new String(s"""|_root_.scalapb.descriptors.PEmpty)
      |        case 8 => sealedValue.typeApplyTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.TreeMessage
      |    def toTree: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.Tree.TreeTypeMapper.toCustom(this)
      |}
      |
      |object TreeMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TreeMessage] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TreeMessage] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.TreeMessage = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.TreeMessage(
      |      sealedValue = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ApplyTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree)
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.FunctionTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree))
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.IdTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree))
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.LiteralTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree))
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.MacroExpansionTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree))
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(5)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.OriginalTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree))
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(6)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.SelectTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree))
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(__fields.get(7)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.TypeApplyTree]].map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree))
      |    .getOrElse(scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty)
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TreeMessage] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TreeMessage(
      |        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ApplyTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree)
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.FunctionTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree))
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.IdTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree))
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.LiteralTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree))
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.MacroExpansionTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree))
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescripto""".stripMargin) + new String(s"""|r.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.OriginalTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree))
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.SelectTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree))
      |    .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.TypeApplyTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree))
      |    .getOrElse(scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(52)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(52)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.ApplyTree
      |      case 2 => __out = scala.meta.internal.semanticdb.FunctionTree
      |      case 3 => __out = scala.meta.internal.semanticdb.IdTree
      |      case 4 => __out = scala.meta.internal.semanticdb.LiteralTree
      |      case 5 => __out = scala.meta.internal.semanticdb.MacroExpansionTree
      |      case 6 => __out = scala.meta.internal.semanticdb.OriginalTree
      |      case 7 => __out = scala.meta.internal.semanticdb.SelectTree
      |      case 8 => __out = scala.meta.internal.semanticdb.TypeApplyTree
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TreeMessage(
      |    sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty
      |  )
      |  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
      |    def isEmpty: _root_.scala.Boolean = false
      |    def isDefined: _root_.scala.Boolean = true
      |    def isApplyTree: _root_.scala.Boolean = false
      |    def isFunctionTree: _root_.scala.Boolean = false
      |    def isIdTree: _root_.scala.Boolean = false
      |    def isLiteralTree: _root_.scala.Boolean = false
      |    def isMacroExpansionTree: _root_.scala.Boolean = false
      |    def isOriginalTree: _root_.scala.Boolean = false
      |    def isSelectTree: _root_.scala.Boolean = false
      |    def isTypeApplyTree: _root_.scala.Boolean = false
      |    def applyTree: _root_.scala.Option[scala.meta.internal.semanticdb.ApplyTree] = _root_.scala.None
      |    def functionTree: _root_.scala.Option[scala.meta.internal.semanticdb.FunctionTree] = _root_.scala.None
      |    def idTree: _root_.scala.Option[scala.meta.internal.semanticdb.IdTree] = _root_.scala.None
      |    def literalTree: _root_.scala.Option[scala.meta.internal.semanticdb.LiteralTree] = _root_.scala.None
      |    def macroExpansionTree: _root_.scala.Option[scala.meta.internal.semanticdb.MacroExpansionTree] = _root_.scala.None
      |    def originalTree: _root_.scala.Option[scala.meta.internal.semanticdb.OriginalTree] = _root_.scala.None
      |    def selectTree: _root_.scala.Option[scala.meta.internal.semanticdb.SelectTree] = _root_.scala.None
      |    def typeApplyTree: _root_.scala.Option[scala.meta.internal.semanticdb.TypeApplyTree] = _root_.scala.None
      |  }
      |  object SealedValue extends {
      |    @SerialVersionUID(0L)
      |    case object Empty extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = _root_.scala.Nothing
      |      override def isEmpty: _root_.scala.Boolean = true
      |      override def isDefined: _root_.scala.Boolean = false
      |      override def number: _root_.scala.Int = 0
      |      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      |    }
      |  
      |    @SerialVersionUID(0L)
      |    final case class ApplyTree(value: scala.meta.internal.semanticdb.ApplyTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ApplyTree
      |      override def isApplyTree: _root_.scala.Boolean = true
      |      override def applyTree: _root_.scala.Option[scala.meta.internal.semanticdb.ApplyTree] = Some(value)
      |      override def number: _root_.scala.Int = 1
      |    }
      |    @SerialVersionUID(0L)
      |    final case class FunctionTree(value: scala.meta.internal.semanticdb.FunctionTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.FunctionTree
      |      override def isFunctionTree: _root_.scala.Boolea""".stripMargin) + new String(s"""|n = true
      |      override def functionTree: _root_.scala.Option[scala.meta.internal.semanticdb.FunctionTree] = Some(value)
      |      override def number: _root_.scala.Int = 2
      |    }
      |    @SerialVersionUID(0L)
      |    final case class IdTree(value: scala.meta.internal.semanticdb.IdTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.IdTree
      |      override def isIdTree: _root_.scala.Boolean = true
      |      override def idTree: _root_.scala.Option[scala.meta.internal.semanticdb.IdTree] = Some(value)
      |      override def number: _root_.scala.Int = 3
      |    }
      |    @SerialVersionUID(0L)
      |    final case class LiteralTree(value: scala.meta.internal.semanticdb.LiteralTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.LiteralTree
      |      override def isLiteralTree: _root_.scala.Boolean = true
      |      override def literalTree: _root_.scala.Option[scala.meta.internal.semanticdb.LiteralTree] = Some(value)
      |      override def number: _root_.scala.Int = 4
      |    }
      |    @SerialVersionUID(0L)
      |    final case class MacroExpansionTree(value: scala.meta.internal.semanticdb.MacroExpansionTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.MacroExpansionTree
      |      override def isMacroExpansionTree: _root_.scala.Boolean = true
      |      override def macroExpansionTree: _root_.scala.Option[scala.meta.internal.semanticdb.MacroExpansionTree] = Some(value)
      |      override def number: _root_.scala.Int = 5
      |    }
      |    @SerialVersionUID(0L)
      |    final case class OriginalTree(value: scala.meta.internal.semanticdb.OriginalTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.OriginalTree
      |      override def isOriginalTree: _root_.scala.Boolean = true
      |      override def originalTree: _root_.scala.Option[scala.meta.internal.semanticdb.OriginalTree] = Some(value)
      |      override def number: _root_.scala.Int = 6
      |    }
      |    @SerialVersionUID(0L)
      |    final case class SelectTree(value: scala.meta.internal.semanticdb.SelectTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.SelectTree
      |      override def isSelectTree: _root_.scala.Boolean = true
      |      override def selectTree: _root_.scala.Option[scala.meta.internal.semanticdb.SelectTree] = Some(value)
      |      override def number: _root_.scala.Int = 7
      |    }
      |    @SerialVersionUID(0L)
      |    final case class TypeApplyTree(value: scala.meta.internal.semanticdb.TypeApplyTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.TypeApplyTree
      |      override def isTypeApplyTree: _root_.scala.Boolean = true
      |      override def typeApplyTree: _root_.scala.Option[scala.meta.internal.semanticdb.TypeApplyTree] = Some(value)
      |      override def number: _root_.scala.Int = 8
      |    }
      |  }
      |  implicit class TreeMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TreeMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TreeMessage](_l) {
      |    def applyTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ApplyTree] = field(_.getApplyTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(f_)))
      |    def functionTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.FunctionTree] = field(_.getFunctionTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(f_)))
      |    def idTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IdTree] = field(_.getIdTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(f_)))
      |    def literalTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.LiteralTree] = field(_.getLiteralTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(f_)))
      |    def macroExpansionTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MacroExpansionTree] = field(_.getMacroExpansionTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(f_)))
      |    def originalTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.OriginalTree] = field(_.getOriginalTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(f_)))
      |    def selectTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SelectTree] = field(_.getSelectTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(f_)))
      |    def typeApplyTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeApplyTree] = field(_.getTypeAppl""".stripMargin) + new String(s"""|yTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(f_)))
      |    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TreeMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
      |  }
      |  final val APPLY_TREE_FIELD_NUMBER = 1
      |  final val FUNCTION_TREE_FIELD_NUMBER = 2
      |  final val ID_TREE_FIELD_NUMBER = 3
      |  final val LITERAL_TREE_FIELD_NUMBER = 4
      |  final val MACRO_EXPANSION_TREE_FIELD_NUMBER = 5
      |  final val ORIGINAL_TREE_FIELD_NUMBER = 6
      |  final val SELECT_TREE_FIELD_NUMBER = 7
      |  final val TYPE_APPLY_TREE_FIELD_NUMBER = 8
      |  def of(
      |    sealedValue: scala.meta.internal.semanticdb.TreeMessage.SealedValue
      |  ): _root_.scala.meta.internal.semanticdb.TreeMessage = _root_.scala.meta.internal.semanticdb.TreeMessage(
      |    sealedValue
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ApplyTree(
      |    function: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    arguments: _root_.scala.Seq[scala.meta.internal.semanticdb.Tree] = _root_.scala.Seq.empty
      |    ) extends scala.meta.internal.semanticdb.Tree with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ApplyTree] with scalapb.lenses.Updatable[ApplyTree] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toBase(function)
      |        if (__value != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      arguments.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.ApplyTree._typemapper_arguments.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toBase(function)
      |        if (__v != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      arguments.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.ApplyTree._typemapper_arguments.toBase(__v)
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ApplyTree = {
      |      var __function = this.function
      |      val __arguments = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Tree] ++= this.arguments)
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __function = scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toBase(__function)))
      |          case 18 =>
      |            __arguments += scala.meta.internal.semanticdb.ApplyTree._typemapper_arguments.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TreeMessage.defaultInstance))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ApplyTree(
      |          function = __function,
      |          arguments = __arguments.result()
      |      )
      |    }
      |    def withFunction(__v: scala.meta.internal.semanticdb.Tree): ApplyTree = copy(function = __v)
      |    def clearArguments = copy(arguments = _root_.scala.Seq.empty)
      |    def addArguments(__vs: scala.meta.internal.semanticdb.Tree*): ApplyTree = addAllArguments(__vs)
      |    def addAllArguments(__vs: Iterable[scala.meta.internal.semanticdb.Tree]): ApplyTree = copy(arguments = arguments ++ __vs)
      |    def withArguments(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Tree]): ApplyTree = copy(arguments = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.ApplyTree._typemap""".stripMargin) + new String(s"""|per_function.toBase(function)
      |          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => arguments.iterator.map(scala.meta.internal.semanticdb.ApplyTree._typemapper_arguments.toBase).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toBase(function).toPMessage
      |        case 2 => _root_.scalapb.descriptors.PRepeated(arguments.iterator.map(scala.meta.internal.semanticdb.ApplyTree._typemapper_arguments.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ApplyTree
      |}
      |
      |object ApplyTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ApplyTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ApplyTree] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ApplyTree = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.ApplyTree(
      |      scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TreeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TreeMessage]),
      |      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.TreeMessage]].iterator.map(scala.meta.internal.semanticdb.ApplyTree._typemapper_arguments.toCustom).toSeq
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ApplyTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ApplyTree(
      |        scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TreeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.ApplyTree._typemapper_arguments.toCustom).toSeq
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(53)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(53)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TreeMessage
      |      case 2 => __out = scala.meta.internal.semanticdb.TreeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ApplyTree(
      |    function = scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    arguments = _root_.scala.Seq.empty
      |  )
      |  implicit class ApplyTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ApplyTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ApplyTree](_l) {
      |    def function: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.function)((c_, f_) => c_.copy(function = f_))
      |    def arguments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Tree]] = field(_.arguments)((c_, f_) => c_.copy(arguments = f_))
      |  }
      |  final val FUNCTION_FIELD_NUMBER = 1
      |  final val ARGUMENTS_FIELD_NUMBER = 2
      |  @transient
      |  private val _typemapper_function: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal""".stripMargin) + new String(s"""|.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  @transient
      |  private val _typemapper_arguments: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  def of(
      |    function: scala.meta.internal.semanticdb.Tree,
      |    arguments: _root_.scala.Seq[scala.meta.internal.semanticdb.Tree]
      |  ): _root_.scala.meta.internal.semanticdb.ApplyTree = _root_.scala.meta.internal.semanticdb.ApplyTree(
      |    function,
      |    arguments
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class FunctionTree(
      |    parameters: _root_.scala.Seq[scala.meta.internal.semanticdb.IdTree] = _root_.scala.Seq.empty,
      |    body: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)
      |    ) extends scala.meta.internal.semanticdb.Tree with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[FunctionTree] with scalapb.lenses.Updatable[FunctionTree] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      parameters.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toBase(body)
      |        if (__value != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      parameters.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toBase(body)
      |        if (__v != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
      |          _output__.writeTag(2, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.FunctionTree = {
      |      val __parameters = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.IdTree] ++= this.parameters)
      |      var __body = this.body
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __parameters += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.IdTree.defaultInstance)
      |          case 18 =>
      |            __body = scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toBase(__body)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.FunctionTree(
      |          parameters = __parameters.result(),
      |          body = __body
      |      )
      |    }
      |    def clearParameters = copy(parameters = _root_.scala.Seq.empty)
      |    def addParameters(__vs: scala.meta.internal.semanticdb.IdTree*): FunctionTree = addAllParameters(__vs)
      |    def addAllParameters(__vs: Iterable[scala.meta.internal.semanticdb.IdTree]): FunctionTree = copy(parameters = parameters ++ __vs)
      |    def withParameters(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.IdTree]): FunctionTree = copy(parameters = __v)
      |    def withBody(__v: scala.meta.internal.semanticdb.Tree): FunctionTree = copy(body = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => parameters
      |        case 2 => {
      |          val __t = scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toBase(body)
      |          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      """.stripMargin) + new String(s"""|(__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(parameters.iterator.map(_.toPMessage).toVector)
      |        case 2 => scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toBase(body).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.FunctionTree
      |}
      |
      |object FunctionTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.FunctionTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.FunctionTree] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.FunctionTree = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.FunctionTree(
      |      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.IdTree]],
      |      scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.TreeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TreeMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.FunctionTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.FunctionTree(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.IdTree]]).getOrElse(_root_.scala.Seq.empty),
      |        scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(54)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(54)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.IdTree
      |      case 2 => __out = scala.meta.internal.semanticdb.TreeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.FunctionTree(
      |    parameters = _root_.scala.Seq.empty,
      |    body = scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)
      |  )
      |  implicit class FunctionTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.FunctionTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.FunctionTree](_l) {
      |    def parameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.IdTree]] = field(_.parameters)((c_, f_) => c_.copy(parameters = f_))
      |    def body: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.body)((c_, f_) => c_.copy(body = f_))
      |  }
      |  final val PARAMETERS_FIELD_NUMBER = 1
      |  final val BODY_FIELD_NUMBER = 2
      |  @transient
      |  private val _typemapper_body: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  def of(
      |    parameters: _root_.scala.Seq[scala.meta.internal.semanticdb.IdTree],
      |    body: scala.meta.internal.semanticdb.Tree
      |  ): _root_.scala.meta.internal.semanticdb.FunctionTree = _root_.scala.meta.internal.semanticdb.FunctionTree(
      |    parameters,
      |    body
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class IdTree(
      |    symbol: _root_.scala.Predef.String = ""
      |    ) extends scala.meta.internal.semanticdb.Tree with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[IdTree] with scalapb.lenses.Updatable[IdTree] {
      |    @transient
      |    private[thi""".stripMargin) + new String(s"""|s] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = symbol
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = symbol
      |        if (__v != "") {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.IdTree = {
      |      var __symbol = this.symbol
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __symbol = _input__.readString()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.IdTree(
      |          symbol = __symbol
      |      )
      |    }
      |    def withSymbol(__v: _root_.scala.Predef.String): IdTree = copy(symbol = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(symbol)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.IdTree
      |}
      |
      |object IdTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IdTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IdTree] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.IdTree = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.IdTree(
      |      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.IdTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.IdTree(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(55)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(55)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.IdTree(
      |    symbol = ""
      |  )
      |  implicit class IdTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IdTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.IdTree](_l) {
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |  }
      |  final val SYMBOL_FIELD_NUMBER = 1
      |  def of(
      |    symbol: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.IdTree = _root_.scala.meta.internal.semanticdb.IdTree(
      |    symbol
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class LiteralTree(
      |    constant: scala.meta.internal.semanticdb.Constant = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toCustom(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance""".stripMargin) + new String(s"""|)
      |    ) extends scala.meta.internal.semanticdb.Tree with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[LiteralTree] with scalapb.lenses.Updatable[LiteralTree] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toBase(constant)
      |        if (__value != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toBase(constant)
      |        if (__v != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.LiteralTree = {
      |      var __constant = this.constant
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __constant = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toBase(__constant)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.LiteralTree(
      |          constant = __constant
      |      )
      |    }
      |    def withConstant(__v: scala.meta.internal.semanticdb.Constant): LiteralTree = copy(constant = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toBase(constant)
      |          if (__t != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toBase(constant).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.LiteralTree
      |}
      |
      |object LiteralTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.LiteralTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.LiteralTree] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.LiteralTree = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.LiteralTree(
      |      scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.ConstantMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.ConstantMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.LiteralTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.LiteralTree(
      |        scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.ConstantMessage]).getOrElse(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(56)
      |  def scalaDes""".stripMargin) + new String(s"""|criptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(56)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.ConstantMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.LiteralTree(
      |    constant = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toCustom(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance)
      |  )
      |  implicit class LiteralTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.LiteralTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.LiteralTree](_l) {
      |    def constant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Constant] = field(_.constant)((c_, f_) => c_.copy(constant = f_))
      |  }
      |  final val CONSTANT_FIELD_NUMBER = 1
      |  @transient
      |  private val _typemapper_constant: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant]]
      |  def of(
      |    constant: scala.meta.internal.semanticdb.Constant
      |  ): _root_.scala.meta.internal.semanticdb.LiteralTree = _root_.scala.meta.internal.semanticdb.LiteralTree(
      |    constant
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class MacroExpansionTree(
      |    beforeExpansion: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scala.meta.internal.semanticdb.Tree with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[MacroExpansionTree] with scalapb.lenses.Updatable[MacroExpansionTree] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toBase(beforeExpansion)
      |        if (__value != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(tpe)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toBase(beforeExpansion)
      |        if (__v != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(tpe)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(2, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.MacroExpansionTree = {
      |      var __beforeExpansion = this.beforeExpansion
      |      var __tpe = this.tpe
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __beforeExpansion = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toCustom(_root_.scalapb.LiteParser.readMessage(_""".stripMargin) + new String(s"""|input__, scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toBase(__beforeExpansion)))
      |          case 18 =>
      |            __tpe = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(__tpe)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.MacroExpansionTree(
      |          beforeExpansion = __beforeExpansion,
      |          tpe = __tpe
      |      )
      |    }
      |    def withBeforeExpansion(__v: scala.meta.internal.semanticdb.Tree): MacroExpansionTree = copy(beforeExpansion = __v)
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): MacroExpansionTree = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toBase(beforeExpansion)
      |          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => {
      |          val __t = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toBase(beforeExpansion).toPMessage
      |        case 2 => scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.MacroExpansionTree
      |}
      |
      |object MacroExpansionTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MacroExpansionTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MacroExpansionTree] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.MacroExpansionTree = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.MacroExpansionTree(
      |      scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TreeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TreeMessage]),
      |      scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.MacroExpansionTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.MacroExpansionTree(
      |        scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
      |        scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(57)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(57)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TreeMessage
      |      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompani""".stripMargin) + new String(s"""|on[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.MacroExpansionTree(
      |    beforeExpansion = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    tpe = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class MacroExpansionTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MacroExpansionTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.MacroExpansionTree](_l) {
      |    def beforeExpansion: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.beforeExpansion)((c_, f_) => c_.copy(beforeExpansion = f_))
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val BEFORE_EXPANSION_FIELD_NUMBER = 1
      |  final val TPE_FIELD_NUMBER = 2
      |  @transient
      |  private val _typemapper_beforeExpansion: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  @transient
      |  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    beforeExpansion: scala.meta.internal.semanticdb.Tree,
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.MacroExpansionTree = _root_.scala.meta.internal.semanticdb.MacroExpansionTree(
      |    beforeExpansion,
      |    tpe
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class OriginalTree(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None
      |    ) extends scala.meta.internal.semanticdb.Tree with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[OriginalTree] with scalapb.lenses.Updatable[OriginalTree] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (range.isDefined) {
      |        val __value = range.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      range.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.OriginalTree = {
      |      var __range = this.range
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __range = Option(_root_.scalapb.LiteParser.readMessage(_input__, __range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.OriginalTree(
      |          range = __range
      |      )
      |    }
      |    def getRange: scala.meta.internal.semanticdb.Range = range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)
      |    def clearRange: OriginalTree = copy(range = _root_.scala.None)
      |    def withRange(__v: scala.meta.internal.semanticdb.Range): OriginalTree = copy(range = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => range.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.OriginalTree
      |}
      |
      |object OriginalTree exten""".stripMargin) + new String(s"""|ds scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.OriginalTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.OriginalTree] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.OriginalTree = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.OriginalTree(
      |      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Range]]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.OriginalTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.OriginalTree(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Range]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(58)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(58)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Range
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.OriginalTree(
      |    range = _root_.scala.None
      |  )
      |  implicit class OriginalTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.OriginalTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.OriginalTree](_l) {
      |    def range: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
      |    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Range]] = field(_.range)((c_, f_) => c_.copy(range = f_))
      |  }
      |  final val RANGE_FIELD_NUMBER = 1
      |  def of(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range]
      |  ): _root_.scala.meta.internal.semanticdb.OriginalTree = _root_.scala.meta.internal.semanticdb.OriginalTree(
      |    range
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class SelectTree(
      |    qualifier: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    id: _root_.scala.Option[scala.meta.internal.semanticdb.IdTree] = _root_.scala.None
      |    ) extends scala.meta.internal.semanticdb.Tree with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[SelectTree] with scalapb.lenses.Updatable[SelectTree] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toBase(qualifier)
      |        if (__value != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      if (id.isDefined) {
      |        val __value = id.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toBase(qualifier)
      |        if (__v != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serialize""".stripMargin) + new String(s"""|dSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      id.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SelectTree = {
      |      var __qualifier = this.qualifier
      |      var __id = this.id
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __qualifier = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toBase(__qualifier)))
      |          case 18 =>
      |            __id = Option(_root_.scalapb.LiteParser.readMessage(_input__, __id.getOrElse(scala.meta.internal.semanticdb.IdTree.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.SelectTree(
      |          qualifier = __qualifier,
      |          id = __id
      |      )
      |    }
      |    def withQualifier(__v: scala.meta.internal.semanticdb.Tree): SelectTree = copy(qualifier = __v)
      |    def getId: scala.meta.internal.semanticdb.IdTree = id.getOrElse(scala.meta.internal.semanticdb.IdTree.defaultInstance)
      |    def clearId: SelectTree = copy(id = _root_.scala.None)
      |    def withId(__v: scala.meta.internal.semanticdb.IdTree): SelectTree = copy(id = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toBase(qualifier)
      |          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => id.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toBase(qualifier).toPMessage
      |        case 2 => id.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.SelectTree
      |}
      |
      |object SelectTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SelectTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SelectTree] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.SelectTree = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.SelectTree(
      |      scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TreeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TreeMessage]),
      |      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.IdTree]]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SelectTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.SelectTree(
      |        scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.IdTree]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(59)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(59)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Tree""".stripMargin) + new String(s"""|Message
      |      case 2 => __out = scala.meta.internal.semanticdb.IdTree
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.SelectTree(
      |    qualifier = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    id = _root_.scala.None
      |  )
      |  implicit class SelectTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SelectTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SelectTree](_l) {
      |    def qualifier: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.qualifier)((c_, f_) => c_.copy(qualifier = f_))
      |    def id: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IdTree] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
      |    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.IdTree]] = field(_.id)((c_, f_) => c_.copy(id = f_))
      |  }
      |  final val QUALIFIER_FIELD_NUMBER = 1
      |  final val ID_FIELD_NUMBER = 2
      |  @transient
      |  private val _typemapper_qualifier: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  def of(
      |    qualifier: scala.meta.internal.semanticdb.Tree,
      |    id: _root_.scala.Option[scala.meta.internal.semanticdb.IdTree]
      |  ): _root_.scala.meta.internal.semanticdb.SelectTree = _root_.scala.meta.internal.semanticdb.SelectTree(
      |    qualifier,
      |    id
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class TypeApplyTree(
      |    function: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    typeArguments: _root_.scala.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.Seq.empty
      |    ) extends scala.meta.internal.semanticdb.Tree with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[TypeApplyTree] with scalapb.lenses.Updatable[TypeApplyTree] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toBase(function)
      |        if (__value != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      typeArguments.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toBase(function)
      |        if (__v != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      typeArguments.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toBase(__v)
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TypeApplyTree = {
      |      var __function = this.function
      |      val __typeArguments = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.typeArguments)
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __function = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toBase(__function)))
      |          case 18 =>
      | """.stripMargin) + new String(s"""|           __typeArguments += scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.TypeApplyTree(
      |          function = __function,
      |          typeArguments = __typeArguments.result()
      |      )
      |    }
      |    def withFunction(__v: scala.meta.internal.semanticdb.Tree): TypeApplyTree = copy(function = __v)
      |    def clearTypeArguments = copy(typeArguments = _root_.scala.Seq.empty)
      |    def addTypeArguments(__vs: scala.meta.internal.semanticdb.Type*): TypeApplyTree = addAllTypeArguments(__vs)
      |    def addAllTypeArguments(__vs: Iterable[scala.meta.internal.semanticdb.Type]): TypeApplyTree = copy(typeArguments = typeArguments ++ __vs)
      |    def withTypeArguments(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]): TypeApplyTree = copy(typeArguments = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toBase(function)
      |          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => typeArguments.iterator.map(scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toBase).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toBase(function).toPMessage
      |        case 2 => _root_.scalapb.descriptors.PRepeated(typeArguments.iterator.map(scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.TypeApplyTree
      |}
      |
      |object TypeApplyTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeApplyTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeApplyTree] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.TypeApplyTree = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.TypeApplyTree(
      |      scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TreeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TreeMessage]),
      |      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]].iterator.map(scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toCustom).toSeq
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TypeApplyTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TypeApplyTree(
      |        scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toCustom).toSeq
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(60)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(60)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TreeMessage
      |      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __o""".stripMargin) + new String(s"""|ut
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TypeApplyTree(
      |    function = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    typeArguments = _root_.scala.Seq.empty
      |  )
      |  implicit class TypeApplyTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeApplyTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TypeApplyTree](_l) {
      |    def function: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.function)((c_, f_) => c_.copy(function = f_))
      |    def typeArguments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Type]] = field(_.typeArguments)((c_, f_) => c_.copy(typeArguments = f_))
      |  }
      |  final val FUNCTION_FIELD_NUMBER = 1
      |  final val TYPE_ARGUMENTS_FIELD_NUMBER = 2
      |  @transient
      |  private val _typemapper_function: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  @transient
      |  private val _typemapper_typeArguments: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    function: scala.meta.internal.semanticdb.Tree,
      |    typeArguments: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]
      |  ): _root_.scala.meta.internal.semanticdb.TypeApplyTree = _root_.scala.meta.internal.semanticdb.TypeApplyTree(
      |    function,
      |    typeArguments
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Type.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed trait Type extends scalapb.GeneratedSealedOneof {
      |  type MessageType = scala.meta.internal.semanticdb.TypeMessage
      |  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Type.Empty.type]
      |  final def isDefined = !isEmpty
      |  final def asMessage: scala.meta.internal.semanticdb.TypeMessage = scala.meta.internal.semanticdb.Type.TypeTypeMapper.toBase(this)
      |  final def asNonEmpty: Option[scala.meta.internal.semanticdb.Type.NonEmpty] = if (isEmpty) None else Some(this.asInstanceOf[scala.meta.internal.semanticdb.Type.NonEmpty])
      |}
      |
      |object Type {
      |  case object Empty extends scala.meta.internal.semanticdb.Type
      |  
      |  sealed trait NonEmpty extends scala.meta.internal.semanticdb.Type
      |  
      |  def defaultInstance: scala.meta.internal.semanticdb.Type = Empty
      |  
      |  implicit val TypeTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] {
      |    override def toCustom(__base: scala.meta.internal.semanticdb.TypeMessage): scala.meta.internal.semanticdb.Type = __base.sealedValue match {
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.MatchType => __v.value
      |      case scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty => Empty
      |    }
      |    override def toBase(__custom: scala.meta.internal.semanticdb.Type): scala.meta.internal.semanticdb.TypeMessage = scala.meta.internal.semanticdb.TypeMessage(__custom match {
      |      case __v: scala.meta.internal.semanticdb.TypeRef => scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(__v)
      |      case __v: scala.meta.internal.semanticdb.SingleType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(__v)
      |      case __v: scala.meta.internal.semanticdb.ThisType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(__v)
      |      case __v: scala.meta.internal.semanticdb.SuperType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(__v)
      |      case __v: scala.meta.internal.semanticdb.ConstantType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(__v)
      |      case __v: scala.meta.internal.semanticdb.IntersectionType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(__v)
      |      case __v: scala.meta.internal.semanticdb.UnionType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(__v)
      |      case __v: scala.meta.internal.semanticdb.WithType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(__v)
      |      case __v: scala.meta.internal.semanticdb.StructuralType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType(__v)
      |      case __v: scala.meta.internal.semanticdb.AnnotatedType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(__v)
      |      case __v: scala.meta.internal.semanticdb.ExistentialType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(__v)
      |      case __v: scala.meta.internal.semanticdb.UniversalType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(__v)
      |      case __v: scala.meta.internal.semanticdb.ByNameType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(__v)
      |      case __v: scala.meta.internal.semanticdb.RepeatedType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType(__v)
      |      case __v: scala.meta.internal.semanticdb.MatchType => scala.meta.internal.semanticdb.Ty""".stripMargin) + new String(s"""|peMessage.SealedValue.MatchType(__v)
      |      case Empty => scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty
      |    })
      |  }
      |}
      |@SerialVersionUID(0L)
      |final case class TypeMessage(
      |    sealedValue: scala.meta.internal.semanticdb.TypeMessage.SealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[TypeMessage] with scalapb.lenses.Updatable[TypeMessage] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (sealedValue.typeRef.isDefined) {
      |        val __value = sealedValue.typeRef.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.singleType.isDefined) {
      |        val __value = sealedValue.singleType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.thisType.isDefined) {
      |        val __value = sealedValue.thisType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.superType.isDefined) {
      |        val __value = sealedValue.superType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.constantType.isDefined) {
      |        val __value = sealedValue.constantType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.intersectionType.isDefined) {
      |        val __value = sealedValue.intersectionType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.unionType.isDefined) {
      |        val __value = sealedValue.unionType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.withType.isDefined) {
      |        val __value = sealedValue.withType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.structuralType.isDefined) {
      |        val __value = sealedValue.structuralType.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.annotatedType.isDefined) {
      |        val __value = sealedValue.annotatedType.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.existentialType.isDefined) {
      |        val __value = sealedValue.existentialType.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.universalType.isDefined) {
      |        val __value = sealedValue.universalType.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.byNameType.isDefined) {
      |        val __value = sealedValue.byNameType.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.repeatedType.isDefined) {
      |        val __value = sealedValue.repeatedType.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.matchType.isDefined) {
      |        val __value = sealedValue.matchType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      sealedValue.typeRef.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.structuralType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(7, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |  """.stripMargin) + new String(s"""|      __m.writeTo(_output__)
      |      };
      |      sealedValue.annotatedType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(8, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.existentialType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(9, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.universalType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(10, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.byNameType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(13, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.repeatedType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(14, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.intersectionType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(17, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.unionType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(18, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.withType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(19, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.singleType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(20, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.thisType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(21, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.superType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(22, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.constantType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(23, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.matchType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(25, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TypeMessage = {
      |      var __sealedValue = this.sealedValue
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 18 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.typeRef.getOrElse(scala.meta.internal.semanticdb.TypeRef.defaultInstance)))
      |          case 162 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.singleType.getOrElse(scala.meta.internal.semanticdb.SingleType.defaultInstance)))
      |          case 170 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.thisType.getOrElse(scala.meta.internal.semanticdb.ThisType.defaultInstance)))
      |          case 178 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.superType.getOrElse(scala.meta.internal.semanticdb.SuperType.defaultInstance)))
      |          case 186 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.constantType.getOrElse(scala.meta.internal.semanticdb.ConstantType.defaultInstance)))
      |          case 138 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.intersectionType.getOrElse(scala.meta.internal.semanticdb.IntersectionType.defaultInstance)))
      |          case 146 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.unionType.getOrElse(scala.meta.internal.semanticdb.UnionType.defaultInstance)))
      |          case 154 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.withType.getOrElse(scala.meta.internal.semanticdb.WithType.defaultInstance)))
      |        """.stripMargin) + new String(s"""|  case 58 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.structuralType.getOrElse(scala.meta.internal.semanticdb.StructuralType.defaultInstance)))
      |          case 66 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.annotatedType.getOrElse(scala.meta.internal.semanticdb.AnnotatedType.defaultInstance)))
      |          case 74 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.existentialType.getOrElse(scala.meta.internal.semanticdb.ExistentialType.defaultInstance)))
      |          case 82 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.universalType.getOrElse(scala.meta.internal.semanticdb.UniversalType.defaultInstance)))
      |          case 106 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.byNameType.getOrElse(scala.meta.internal.semanticdb.ByNameType.defaultInstance)))
      |          case 114 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.repeatedType.getOrElse(scala.meta.internal.semanticdb.RepeatedType.defaultInstance)))
      |          case 202 =>
      |            __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.MatchType(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.matchType.getOrElse(scala.meta.internal.semanticdb.MatchType.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.TypeMessage(
      |          sealedValue = __sealedValue
      |      )
      |    }
      |    def getTypeRef: scala.meta.internal.semanticdb.TypeRef = sealedValue.typeRef.getOrElse(scala.meta.internal.semanticdb.TypeRef.defaultInstance)
      |    def withTypeRef(__v: scala.meta.internal.semanticdb.TypeRef): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(__v))
      |    def getSingleType: scala.meta.internal.semanticdb.SingleType = sealedValue.singleType.getOrElse(scala.meta.internal.semanticdb.SingleType.defaultInstance)
      |    def withSingleType(__v: scala.meta.internal.semanticdb.SingleType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(__v))
      |    def getThisType: scala.meta.internal.semanticdb.ThisType = sealedValue.thisType.getOrElse(scala.meta.internal.semanticdb.ThisType.defaultInstance)
      |    def withThisType(__v: scala.meta.internal.semanticdb.ThisType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(__v))
      |    def getSuperType: scala.meta.internal.semanticdb.SuperType = sealedValue.superType.getOrElse(scala.meta.internal.semanticdb.SuperType.defaultInstance)
      |    def withSuperType(__v: scala.meta.internal.semanticdb.SuperType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(__v))
      |    def getConstantType: scala.meta.internal.semanticdb.ConstantType = sealedValue.constantType.getOrElse(scala.meta.internal.semanticdb.ConstantType.defaultInstance)
      |    def withConstantType(__v: scala.meta.internal.semanticdb.ConstantType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(__v))
      |    def getIntersectionType: scala.meta.internal.semanticdb.IntersectionType = sealedValue.intersectionType.getOrElse(scala.meta.internal.semanticdb.IntersectionType.defaultInstance)
      |    def withIntersectionType(__v: scala.meta.internal.semanticdb.IntersectionType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(__v))
      |    def getUnionType: scala.meta.internal.semanticdb.UnionType = sealedValue.unionType.getOrElse(scala.meta.internal.semanticdb.UnionType.defaultInstance)
      |    def withUnionType(__v: scala.meta.internal.semanticdb.UnionType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(__v))
      |    def getWithType: scala.meta.internal.semanticdb.WithType = sealedValue.withType.getOrElse(scala.meta.internal.semanticdb.WithType.defaultInstance)
      |    def withWithType(__v: scala.meta.internal.semanticdb.WithType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(__v))
      |    def getStructuralType: scala.meta.internal.semanticdb.StructuralType = sealedValue.structuralType.getOrElse(scala.meta.internal.semanticdb.StructuralType.defaultInstance)
      |    def withStructuralType(__v: scala.meta.internal.semanticdb.StructuralType): TypeMessage = copy(sealedValue = scala.meta.internal.sem""".stripMargin) + new String(s"""|anticdb.TypeMessage.SealedValue.StructuralType(__v))
      |    def getAnnotatedType: scala.meta.internal.semanticdb.AnnotatedType = sealedValue.annotatedType.getOrElse(scala.meta.internal.semanticdb.AnnotatedType.defaultInstance)
      |    def withAnnotatedType(__v: scala.meta.internal.semanticdb.AnnotatedType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(__v))
      |    def getExistentialType: scala.meta.internal.semanticdb.ExistentialType = sealedValue.existentialType.getOrElse(scala.meta.internal.semanticdb.ExistentialType.defaultInstance)
      |    def withExistentialType(__v: scala.meta.internal.semanticdb.ExistentialType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(__v))
      |    def getUniversalType: scala.meta.internal.semanticdb.UniversalType = sealedValue.universalType.getOrElse(scala.meta.internal.semanticdb.UniversalType.defaultInstance)
      |    def withUniversalType(__v: scala.meta.internal.semanticdb.UniversalType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(__v))
      |    def getByNameType: scala.meta.internal.semanticdb.ByNameType = sealedValue.byNameType.getOrElse(scala.meta.internal.semanticdb.ByNameType.defaultInstance)
      |    def withByNameType(__v: scala.meta.internal.semanticdb.ByNameType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(__v))
      |    def getRepeatedType: scala.meta.internal.semanticdb.RepeatedType = sealedValue.repeatedType.getOrElse(scala.meta.internal.semanticdb.RepeatedType.defaultInstance)
      |    def withRepeatedType(__v: scala.meta.internal.semanticdb.RepeatedType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType(__v))
      |    def getMatchType: scala.meta.internal.semanticdb.MatchType = sealedValue.matchType.getOrElse(scala.meta.internal.semanticdb.MatchType.defaultInstance)
      |    def withMatchType(__v: scala.meta.internal.semanticdb.MatchType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.MatchType(__v))
      |    def clearSealedValue: TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty)
      |    def withSealedValue(__v: scala.meta.internal.semanticdb.TypeMessage.SealedValue): TypeMessage = copy(sealedValue = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 2 => sealedValue.typeRef.orNull
      |        case 20 => sealedValue.singleType.orNull
      |        case 21 => sealedValue.thisType.orNull
      |        case 22 => sealedValue.superType.orNull
      |        case 23 => sealedValue.constantType.orNull
      |        case 17 => sealedValue.intersectionType.orNull
      |        case 18 => sealedValue.unionType.orNull
      |        case 19 => sealedValue.withType.orNull
      |        case 7 => sealedValue.structuralType.orNull
      |        case 8 => sealedValue.annotatedType.orNull
      |        case 9 => sealedValue.existentialType.orNull
      |        case 10 => sealedValue.universalType.orNull
      |        case 13 => sealedValue.byNameType.orNull
      |        case 14 => sealedValue.repeatedType.orNull
      |        case 25 => sealedValue.matchType.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 2 => sealedValue.typeRef.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 20 => sealedValue.singleType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 21 => sealedValue.thisType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 22 => sealedValue.superType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 23 => sealedValue.constantType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 17 => sealedValue.intersectionType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 18 => sealedValue.unionType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 19 => sealedValue.withType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 7 => sealedValue.structuralType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 8 => sealedValue.annotatedType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 9 => sealedValue.existentialType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 10 => sealedValue.universalType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 13 => sealedValue.byNameType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 14 => sealedValue.repeatedType.map(_.toPMessage).getOrElse(_root""".stripMargin) + new String(s"""|_.scalapb.descriptors.PEmpty)
      |        case 25 => sealedValue.matchType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.TypeMessage
      |    def toType: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.Type.TypeTypeMapper.toCustom(this)
      |}
      |
      |object TypeMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeMessage] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeMessage] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.TypeMessage = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.TypeMessage(
      |      sealedValue = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.TypeRef]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef)
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.SingleType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ThisType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.SuperType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ConstantType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(5)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.IntersectionType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(6)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.UnionType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(7)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.WithType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(8)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.StructuralType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(9)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.AnnotatedType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(10)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ExistentialType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(11)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.UniversalType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(12)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.ByNameType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(13)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.RepeatedType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(__fields.get(14)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.MatchType]].map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.MatchType))
      |    .getOrElse(scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty)
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semant""".stripMargin) + new String(s"""|icdb.TypeMessage] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TypeMessage(
      |        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.TypeRef]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef)
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.SingleType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ThisType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.SuperType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ConstantType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.IntersectionType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.UnionType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.WithType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.StructuralType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.AnnotatedType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ExistentialType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.UniversalType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ByNameType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.RepeatedType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType))
      |    .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.MatchType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.MatchType))
      |    .getOrElse(scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(5)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(5)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanio""".stripMargin) + new String(s"""|n[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 2 => __out = scala.meta.internal.semanticdb.TypeRef
      |      case 20 => __out = scala.meta.internal.semanticdb.SingleType
      |      case 21 => __out = scala.meta.internal.semanticdb.ThisType
      |      case 22 => __out = scala.meta.internal.semanticdb.SuperType
      |      case 23 => __out = scala.meta.internal.semanticdb.ConstantType
      |      case 17 => __out = scala.meta.internal.semanticdb.IntersectionType
      |      case 18 => __out = scala.meta.internal.semanticdb.UnionType
      |      case 19 => __out = scala.meta.internal.semanticdb.WithType
      |      case 7 => __out = scala.meta.internal.semanticdb.StructuralType
      |      case 8 => __out = scala.meta.internal.semanticdb.AnnotatedType
      |      case 9 => __out = scala.meta.internal.semanticdb.ExistentialType
      |      case 10 => __out = scala.meta.internal.semanticdb.UniversalType
      |      case 13 => __out = scala.meta.internal.semanticdb.ByNameType
      |      case 14 => __out = scala.meta.internal.semanticdb.RepeatedType
      |      case 25 => __out = scala.meta.internal.semanticdb.MatchType
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TypeMessage(
      |    sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty
      |  )
      |  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
      |    def isEmpty: _root_.scala.Boolean = false
      |    def isDefined: _root_.scala.Boolean = true
      |    def isTypeRef: _root_.scala.Boolean = false
      |    def isSingleType: _root_.scala.Boolean = false
      |    def isThisType: _root_.scala.Boolean = false
      |    def isSuperType: _root_.scala.Boolean = false
      |    def isConstantType: _root_.scala.Boolean = false
      |    def isIntersectionType: _root_.scala.Boolean = false
      |    def isUnionType: _root_.scala.Boolean = false
      |    def isWithType: _root_.scala.Boolean = false
      |    def isStructuralType: _root_.scala.Boolean = false
      |    def isAnnotatedType: _root_.scala.Boolean = false
      |    def isExistentialType: _root_.scala.Boolean = false
      |    def isUniversalType: _root_.scala.Boolean = false
      |    def isByNameType: _root_.scala.Boolean = false
      |    def isRepeatedType: _root_.scala.Boolean = false
      |    def isMatchType: _root_.scala.Boolean = false
      |    def typeRef: _root_.scala.Option[scala.meta.internal.semanticdb.TypeRef] = _root_.scala.None
      |    def singleType: _root_.scala.Option[scala.meta.internal.semanticdb.SingleType] = _root_.scala.None
      |    def thisType: _root_.scala.Option[scala.meta.internal.semanticdb.ThisType] = _root_.scala.None
      |    def superType: _root_.scala.Option[scala.meta.internal.semanticdb.SuperType] = _root_.scala.None
      |    def constantType: _root_.scala.Option[scala.meta.internal.semanticdb.ConstantType] = _root_.scala.None
      |    def intersectionType: _root_.scala.Option[scala.meta.internal.semanticdb.IntersectionType] = _root_.scala.None
      |    def unionType: _root_.scala.Option[scala.meta.internal.semanticdb.UnionType] = _root_.scala.None
      |    def withType: _root_.scala.Option[scala.meta.internal.semanticdb.WithType] = _root_.scala.None
      |    def structuralType: _root_.scala.Option[scala.meta.internal.semanticdb.StructuralType] = _root_.scala.None
      |    def annotatedType: _root_.scala.Option[scala.meta.internal.semanticdb.AnnotatedType] = _root_.scala.None
      |    def existentialType: _root_.scala.Option[scala.meta.internal.semanticdb.ExistentialType] = _root_.scala.None
      |    def universalType: _root_.scala.Option[scala.meta.internal.semanticdb.UniversalType] = _root_.scala.None
      |    def byNameType: _root_.scala.Option[scala.meta.internal.semanticdb.ByNameType] = _root_.scala.None
      |    def repeatedType: _root_.scala.Option[scala.meta.internal.semanticdb.RepeatedType] = _root_.scala.None
      |    def matchType: _root_.scala.Option[scala.meta.internal.semanticdb.MatchType] = _root_.scala.None
      |  }
      |  object SealedValue extends {
      |    @SerialVersionUID(0L)
      |    case object Empty extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = _root_.scala.Nothing
      |      override def isEmpty: _root_.scala.Boolean = true
      |      override def isDefined: _root_.scala.Boolean = false
      |      override def number: _root_.scala.Int = 0
      |      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      |    }
      |  
      |    @SerialVersionUID(0L)
      |    final case class TypeRef(value: scala.meta.internal.semanticdb.TypeRef) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.TypeRef
      |      override def isTypeRef: _root_.scala.Boolean = true
      |      override def typeRef: _root_.scala.Option[scala.meta.internal.semanticdb.TypeRef] = Some(value)
      |      override def number: _root_.scala.Int = 2
      |    }
      |    @SerialVersionUID(0L)
      |    final cas""".stripMargin) + new String(s"""|e class SingleType(value: scala.meta.internal.semanticdb.SingleType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.SingleType
      |      override def isSingleType: _root_.scala.Boolean = true
      |      override def singleType: _root_.scala.Option[scala.meta.internal.semanticdb.SingleType] = Some(value)
      |      override def number: _root_.scala.Int = 20
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ThisType(value: scala.meta.internal.semanticdb.ThisType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ThisType
      |      override def isThisType: _root_.scala.Boolean = true
      |      override def thisType: _root_.scala.Option[scala.meta.internal.semanticdb.ThisType] = Some(value)
      |      override def number: _root_.scala.Int = 21
      |    }
      |    @SerialVersionUID(0L)
      |    final case class SuperType(value: scala.meta.internal.semanticdb.SuperType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.SuperType
      |      override def isSuperType: _root_.scala.Boolean = true
      |      override def superType: _root_.scala.Option[scala.meta.internal.semanticdb.SuperType] = Some(value)
      |      override def number: _root_.scala.Int = 22
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ConstantType(value: scala.meta.internal.semanticdb.ConstantType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ConstantType
      |      override def isConstantType: _root_.scala.Boolean = true
      |      override def constantType: _root_.scala.Option[scala.meta.internal.semanticdb.ConstantType] = Some(value)
      |      override def number: _root_.scala.Int = 23
      |    }
      |    @SerialVersionUID(0L)
      |    final case class IntersectionType(value: scala.meta.internal.semanticdb.IntersectionType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.IntersectionType
      |      override def isIntersectionType: _root_.scala.Boolean = true
      |      override def intersectionType: _root_.scala.Option[scala.meta.internal.semanticdb.IntersectionType] = Some(value)
      |      override def number: _root_.scala.Int = 17
      |    }
      |    @SerialVersionUID(0L)
      |    final case class UnionType(value: scala.meta.internal.semanticdb.UnionType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.UnionType
      |      override def isUnionType: _root_.scala.Boolean = true
      |      override def unionType: _root_.scala.Option[scala.meta.internal.semanticdb.UnionType] = Some(value)
      |      override def number: _root_.scala.Int = 18
      |    }
      |    @SerialVersionUID(0L)
      |    final case class WithType(value: scala.meta.internal.semanticdb.WithType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.WithType
      |      override def isWithType: _root_.scala.Boolean = true
      |      override def withType: _root_.scala.Option[scala.meta.internal.semanticdb.WithType] = Some(value)
      |      override def number: _root_.scala.Int = 19
      |    }
      |    @SerialVersionUID(0L)
      |    final case class StructuralType(value: scala.meta.internal.semanticdb.StructuralType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.StructuralType
      |      override def isStructuralType: _root_.scala.Boolean = true
      |      override def structuralType: _root_.scala.Option[scala.meta.internal.semanticdb.StructuralType] = Some(value)
      |      override def number: _root_.scala.Int = 7
      |    }
      |    @SerialVersionUID(0L)
      |    final case class AnnotatedType(value: scala.meta.internal.semanticdb.AnnotatedType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.AnnotatedType
      |      override def isAnnotatedType: _root_.scala.Boolean = true
      |      override def annotatedType: _root_.scala.Option[scala.meta.internal.semanticdb.AnnotatedType] = Some(value)
      |      override def number: _root_.scala.Int = 8
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ExistentialType(value: scala.meta.internal.semanticdb.ExistentialType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ExistentialType
      |      override def isExistentialType: _root_.scala.Boolean = true
      |      override def existentialType: _root_.scala.Option[scala.meta.internal.semanticdb.ExistentialType] = Some(value)
      |      override def number: _root_.scala.Int = 9
      |    }
      |    @SerialVersionUID(0L)
      |    final case class UniversalType(value: scala.meta.internal.semanticdb.UniversalType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.UniversalType
      |      override def isUniversalType: _root_.scala.Boolean = true
      |      override def universa""".stripMargin) + new String(s"""|lType: _root_.scala.Option[scala.meta.internal.semanticdb.UniversalType] = Some(value)
      |      override def number: _root_.scala.Int = 10
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ByNameType(value: scala.meta.internal.semanticdb.ByNameType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ByNameType
      |      override def isByNameType: _root_.scala.Boolean = true
      |      override def byNameType: _root_.scala.Option[scala.meta.internal.semanticdb.ByNameType] = Some(value)
      |      override def number: _root_.scala.Int = 13
      |    }
      |    @SerialVersionUID(0L)
      |    final case class RepeatedType(value: scala.meta.internal.semanticdb.RepeatedType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.RepeatedType
      |      override def isRepeatedType: _root_.scala.Boolean = true
      |      override def repeatedType: _root_.scala.Option[scala.meta.internal.semanticdb.RepeatedType] = Some(value)
      |      override def number: _root_.scala.Int = 14
      |    }
      |    @SerialVersionUID(0L)
      |    final case class MatchType(value: scala.meta.internal.semanticdb.MatchType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.MatchType
      |      override def isMatchType: _root_.scala.Boolean = true
      |      override def matchType: _root_.scala.Option[scala.meta.internal.semanticdb.MatchType] = Some(value)
      |      override def number: _root_.scala.Int = 25
      |    }
      |  }
      |  implicit class TypeMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TypeMessage](_l) {
      |    def typeRef: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeRef] = field(_.getTypeRef)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(f_)))
      |    def singleType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SingleType] = field(_.getSingleType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(f_)))
      |    def thisType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ThisType] = field(_.getThisType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(f_)))
      |    def superType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SuperType] = field(_.getSuperType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(f_)))
      |    def constantType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ConstantType] = field(_.getConstantType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(f_)))
      |    def intersectionType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IntersectionType] = field(_.getIntersectionType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(f_)))
      |    def unionType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UnionType] = field(_.getUnionType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(f_)))
      |    def withType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.WithType] = field(_.getWithType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(f_)))
      |    def structuralType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.StructuralType] = field(_.getStructuralType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType(f_)))
      |    def annotatedType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.AnnotatedType] = field(_.getAnnotatedType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(f_)))
      |    def existentialType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ExistentialType] = field(_.getExistentialType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(f_)))
      |    def universalType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UniversalType] = field(_.getUniversalType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(f_)))
      |    def byNameType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ByNameType] = field(_.getByNameType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(f_)))
      |    def repeatedType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.RepeatedType] = field(_.getRepeatedType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.seman""".stripMargin) + new String(s"""|ticdb.TypeMessage.SealedValue.RepeatedType(f_)))
      |    def matchType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MatchType] = field(_.getMatchType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.MatchType(f_)))
      |    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
      |  }
      |  final val TYPE_REF_FIELD_NUMBER = 2
      |  final val SINGLE_TYPE_FIELD_NUMBER = 20
      |  final val THIS_TYPE_FIELD_NUMBER = 21
      |  final val SUPER_TYPE_FIELD_NUMBER = 22
      |  final val CONSTANT_TYPE_FIELD_NUMBER = 23
      |  final val INTERSECTION_TYPE_FIELD_NUMBER = 17
      |  final val UNION_TYPE_FIELD_NUMBER = 18
      |  final val WITH_TYPE_FIELD_NUMBER = 19
      |  final val STRUCTURAL_TYPE_FIELD_NUMBER = 7
      |  final val ANNOTATED_TYPE_FIELD_NUMBER = 8
      |  final val EXISTENTIAL_TYPE_FIELD_NUMBER = 9
      |  final val UNIVERSAL_TYPE_FIELD_NUMBER = 10
      |  final val BY_NAME_TYPE_FIELD_NUMBER = 13
      |  final val REPEATED_TYPE_FIELD_NUMBER = 14
      |  final val MATCH_TYPE_FIELD_NUMBER = 25
      |  def of(
      |    sealedValue: scala.meta.internal.semanticdb.TypeMessage.SealedValue
      |  ): _root_.scala.meta.internal.semanticdb.TypeMessage = _root_.scala.meta.internal.semanticdb.TypeMessage(
      |    sealedValue
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class TypeRef(
      |    prefix: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    symbol: _root_.scala.Predef.String = "",
      |    typeArguments: _root_.scala.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.Seq.empty
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[TypeRef] with scalapb.lenses.Updatable[TypeRef] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(prefix)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      
      |      {
      |        val __value = symbol
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      |        }
      |      };
      |      typeArguments.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(prefix)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      {
      |        val __v = symbol
      |        if (__v != "") {
      |          _output__.writeString(2, __v)
      |        }
      |      };
      |      typeArguments.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toBase(__v)
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TypeRef = {
      |      var __prefix = this.prefix
      |      var __symbol = this.symbol
      |      val __typeArguments = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.typeArguments)
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __prefix = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(__prefix)))
      |          case 18 =>
      |            __symbol = _input__.readString()
      |          case 26 =>
      |            __typeArguments += scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |          case tag => _input__.skipF""".stripMargin) + new String(s"""|ield(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.TypeRef(
      |          prefix = __prefix,
      |          symbol = __symbol,
      |          typeArguments = __typeArguments.result()
      |      )
      |    }
      |    def withPrefix(__v: scala.meta.internal.semanticdb.Type): TypeRef = copy(prefix = __v)
      |    def withSymbol(__v: _root_.scala.Predef.String): TypeRef = copy(symbol = __v)
      |    def clearTypeArguments = copy(typeArguments = _root_.scala.Seq.empty)
      |    def addTypeArguments(__vs: scala.meta.internal.semanticdb.Type*): TypeRef = addAllTypeArguments(__vs)
      |    def addAllTypeArguments(__vs: Iterable[scala.meta.internal.semanticdb.Type]): TypeRef = copy(typeArguments = typeArguments ++ __vs)
      |    def withTypeArguments(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]): TypeRef = copy(typeArguments = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(prefix)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |        case 3 => typeArguments.iterator.map(scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toBase).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(prefix).toPMessage
      |        case 2 => _root_.scalapb.descriptors.PString(symbol)
      |        case 3 => _root_.scalapb.descriptors.PRepeated(typeArguments.iterator.map(scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.TypeRef
      |}
      |
      |object TypeRef extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeRef] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeRef] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.TypeRef = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.TypeRef(
      |      scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      |      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      |      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]].iterator.map(scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toCustom).toSeq
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TypeRef] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TypeRef(
      |        scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toCustom).toSeq
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(6)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(6)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |     """.stripMargin) + new String(s"""| case 3 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TypeRef(
      |    prefix = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    symbol = "",
      |    typeArguments = _root_.scala.Seq.empty
      |  )
      |  implicit class TypeRefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeRef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TypeRef](_l) {
      |    def prefix: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.prefix)((c_, f_) => c_.copy(prefix = f_))
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |    def typeArguments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Type]] = field(_.typeArguments)((c_, f_) => c_.copy(typeArguments = f_))
      |  }
      |  final val PREFIX_FIELD_NUMBER = 1
      |  final val SYMBOL_FIELD_NUMBER = 2
      |  final val TYPE_ARGUMENTS_FIELD_NUMBER = 3
      |  @transient
      |  private val _typemapper_prefix: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  @transient
      |  private val _typemapper_typeArguments: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    prefix: scala.meta.internal.semanticdb.Type,
      |    symbol: _root_.scala.Predef.String,
      |    typeArguments: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]
      |  ): _root_.scala.meta.internal.semanticdb.TypeRef = _root_.scala.meta.internal.semanticdb.TypeRef(
      |    prefix,
      |    symbol,
      |    typeArguments
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class SingleType(
      |    prefix: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    symbol: _root_.scala.Predef.String = ""
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[SingleType] with scalapb.lenses.Updatable[SingleType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(prefix)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      
      |      {
      |        val __value = symbol
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(prefix)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      {
      |        val __v = symbol
      |        if (__v != "") {
      |          _output__.writeString(2, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SingleType = {
      |      var __prefix = this.prefix
      |      var __symbol = this.symbol
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __prefix = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(__prefix)))
      |          case 18 =>
      |            __symbol = _input__.readString()
      |          case tag => _input__.skipField(""".stripMargin) + new String(s"""|tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.SingleType(
      |          prefix = __prefix,
      |          symbol = __symbol
      |      )
      |    }
      |    def withPrefix(__v: scala.meta.internal.semanticdb.Type): SingleType = copy(prefix = __v)
      |    def withSymbol(__v: _root_.scala.Predef.String): SingleType = copy(symbol = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(prefix)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(prefix).toPMessage
      |        case 2 => _root_.scalapb.descriptors.PString(symbol)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.SingleType
      |}
      |
      |object SingleType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SingleType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SingleType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.SingleType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.SingleType(
      |      scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      |      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SingleType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.SingleType(
      |        scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(7)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(7)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.SingleType(
      |    prefix = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    symbol = ""
      |  )
      |  implicit class SingleTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SingleType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SingleType](_l) {
      |    def prefix: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.prefix)((c_, f_) => c_.copy(prefix = f_))
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |  }
      |  final val PREFIX_FIELD_NUMBER = 1
      |  final val SYMBOL_FIELD_NUMBER = 2
      |  @transient
      |  private val _typemapper_prefix: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.""".stripMargin) + new String(s"""|semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    prefix: scala.meta.internal.semanticdb.Type,
      |    symbol: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.SingleType = _root_.scala.meta.internal.semanticdb.SingleType(
      |    prefix,
      |    symbol
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ThisType(
      |    symbol: _root_.scala.Predef.String = ""
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ThisType] with scalapb.lenses.Updatable[ThisType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = symbol
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = symbol
      |        if (__v != "") {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ThisType = {
      |      var __symbol = this.symbol
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __symbol = _input__.readString()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ThisType(
      |          symbol = __symbol
      |      )
      |    }
      |    def withSymbol(__v: _root_.scala.Predef.String): ThisType = copy(symbol = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(symbol)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ThisType
      |}
      |
      |object ThisType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ThisType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ThisType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ThisType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.ThisType(
      |      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ThisType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ThisType(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(8)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(8)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ThisType(
      |    symbol = ""
      |  )
      |  implicit class ThisTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[Up""".stripMargin) + new String(s"""|perPB, scala.meta.internal.semanticdb.ThisType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ThisType](_l) {
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |  }
      |  final val SYMBOL_FIELD_NUMBER = 1
      |  def of(
      |    symbol: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.ThisType = _root_.scala.meta.internal.semanticdb.ThisType(
      |    symbol
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class SuperType(
      |    prefix: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    symbol: _root_.scala.Predef.String = ""
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[SuperType] with scalapb.lenses.Updatable[SuperType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(prefix)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      
      |      {
      |        val __value = symbol
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(prefix)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      {
      |        val __v = symbol
      |        if (__v != "") {
      |          _output__.writeString(2, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SuperType = {
      |      var __prefix = this.prefix
      |      var __symbol = this.symbol
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __prefix = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(__prefix)))
      |          case 18 =>
      |            __symbol = _input__.readString()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.SuperType(
      |          prefix = __prefix,
      |          symbol = __symbol
      |      )
      |    }
      |    def withPrefix(__v: scala.meta.internal.semanticdb.Type): SuperType = copy(prefix = __v)
      |    def withSymbol(__v: _root_.scala.Predef.String): SuperType = copy(symbol = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(prefix)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(prefix).toPMessage
      |        case 2 => _root_.scalapb.descriptors.PString(symbol)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.SuperType
      |}
      |
      |object SuperType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SuperType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SuperType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.SuperType = {
      |    _root_.scala.Predef.require(_""".stripMargin) + new String(s"""|_fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.SuperType(
      |      scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      |      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SuperType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.SuperType(
      |        scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(9)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(9)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.SuperType(
      |    prefix = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    symbol = ""
      |  )
      |  implicit class SuperTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SuperType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SuperType](_l) {
      |    def prefix: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.prefix)((c_, f_) => c_.copy(prefix = f_))
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |  }
      |  final val PREFIX_FIELD_NUMBER = 1
      |  final val SYMBOL_FIELD_NUMBER = 2
      |  @transient
      |  private val _typemapper_prefix: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    prefix: scala.meta.internal.semanticdb.Type,
      |    symbol: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.SuperType = _root_.scala.meta.internal.semanticdb.SuperType(
      |    prefix,
      |    symbol
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ConstantType(
      |    constant: scala.meta.internal.semanticdb.Constant = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance)
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ConstantType] with scalapb.lenses.Updatable[ConstantType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(constant)
      |        if (__value != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(constant)
      |      """.stripMargin) + new String(s"""|  if (__v != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ConstantType = {
      |      var __constant = this.constant
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __constant = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(__constant)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ConstantType(
      |          constant = __constant
      |      )
      |    }
      |    def withConstant(__v: scala.meta.internal.semanticdb.Constant): ConstantType = copy(constant = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(constant)
      |          if (__t != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(constant).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ConstantType
      |}
      |
      |object ConstantType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ConstantType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ConstantType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ConstantType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.ConstantType(
      |      scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.ConstantMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.ConstantMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ConstantType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ConstantType(
      |        scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.ConstantMessage]).getOrElse(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(10)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(10)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.ConstantMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ConstantType(
      |    constant = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance)
      |  )
      |  implicit class ConstantTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ConstantType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ConstantType](_l) {
      |    def constant: _root_.scalapb.lenses.Lens[UpperPB, """.stripMargin) + new String(s"""|scala.meta.internal.semanticdb.Constant] = field(_.constant)((c_, f_) => c_.copy(constant = f_))
      |  }
      |  final val CONSTANT_FIELD_NUMBER = 1
      |  @transient
      |  private val _typemapper_constant: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant]]
      |  def of(
      |    constant: scala.meta.internal.semanticdb.Constant
      |  ): _root_.scala.meta.internal.semanticdb.ConstantType = _root_.scala.meta.internal.semanticdb.ConstantType(
      |    constant
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class IntersectionType(
      |    types: _root_.scala.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.Seq.empty
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[IntersectionType] with scalapb.lenses.Updatable[IntersectionType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      types.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      types.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toBase(__v)
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.IntersectionType = {
      |      val __types = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.types)
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __types += scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.IntersectionType(
      |          types = __types.result()
      |      )
      |    }
      |    def clearTypes = copy(types = _root_.scala.Seq.empty)
      |    def addTypes(__vs: scala.meta.internal.semanticdb.Type*): IntersectionType = addAllTypes(__vs)
      |    def addAllTypes(__vs: Iterable[scala.meta.internal.semanticdb.Type]): IntersectionType = copy(types = types ++ __vs)
      |    def withTypes(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]): IntersectionType = copy(types = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => types.iterator.map(scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toBase).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(types.iterator.map(scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.IntersectionType
      |}
      |
      |object IntersectionType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntersectionType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntersectionType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.IntersectionType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.IntersectionType(
      |      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]].iterator.map(scala.meta.internal.semanticdb.IntersectionT""".stripMargin) + new String(s"""|ype._typemapper_types.toCustom).toSeq
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.IntersectionType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.IntersectionType(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toCustom).toSeq
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(11)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(11)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.IntersectionType(
      |    types = _root_.scala.Seq.empty
      |  )
      |  implicit class IntersectionTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IntersectionType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.IntersectionType](_l) {
      |    def types: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Type]] = field(_.types)((c_, f_) => c_.copy(types = f_))
      |  }
      |  final val TYPES_FIELD_NUMBER = 1
      |  @transient
      |  private val _typemapper_types: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    types: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]
      |  ): _root_.scala.meta.internal.semanticdb.IntersectionType = _root_.scala.meta.internal.semanticdb.IntersectionType(
      |    types
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class UnionType(
      |    types: _root_.scala.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.Seq.empty
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[UnionType] with scalapb.lenses.Updatable[UnionType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      types.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.UnionType._typemapper_types.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      types.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.UnionType._typemapper_types.toBase(__v)
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.UnionType = {
      |      val __types = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.types)
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __types += scala.meta.internal.semanticdb.UnionType._typemapper_types.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.UnionType(
      |          types = __types.result()
      |      )
      |    }
      |    def clearTypes = copy(types = _root_.scala.Seq.empty)
      |    def addTypes(__vs: scala.meta.internal.semanticdb.Type*): UnionType = addAllTypes(__v""".stripMargin) + new String(s"""|s)
      |    def addAllTypes(__vs: Iterable[scala.meta.internal.semanticdb.Type]): UnionType = copy(types = types ++ __vs)
      |    def withTypes(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]): UnionType = copy(types = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => types.iterator.map(scala.meta.internal.semanticdb.UnionType._typemapper_types.toBase).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(types.iterator.map(scala.meta.internal.semanticdb.UnionType._typemapper_types.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.UnionType
      |}
      |
      |object UnionType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnionType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnionType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.UnionType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.UnionType(
      |      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]].iterator.map(scala.meta.internal.semanticdb.UnionType._typemapper_types.toCustom).toSeq
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.UnionType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.UnionType(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.UnionType._typemapper_types.toCustom).toSeq
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(12)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(12)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.UnionType(
      |    types = _root_.scala.Seq.empty
      |  )
      |  implicit class UnionTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UnionType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.UnionType](_l) {
      |    def types: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Type]] = field(_.types)((c_, f_) => c_.copy(types = f_))
      |  }
      |  final val TYPES_FIELD_NUMBER = 1
      |  @transient
      |  private val _typemapper_types: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    types: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]
      |  ): _root_.scala.meta.internal.semanticdb.UnionType = _root_.scala.meta.internal.semanticdb.UnionType(
      |    types
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class WithType(
      |    types: _root_.scala.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.Seq.empty
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[WithType] with scalapb.lenses.Updatable[WithType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala""".stripMargin) + new String(s"""|.Int = {
      |      var __size = 0
      |      types.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.WithType._typemapper_types.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      types.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.WithType._typemapper_types.toBase(__v)
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.WithType = {
      |      val __types = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Type] ++= this.types)
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __types += scala.meta.internal.semanticdb.WithType._typemapper_types.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.WithType(
      |          types = __types.result()
      |      )
      |    }
      |    def clearTypes = copy(types = _root_.scala.Seq.empty)
      |    def addTypes(__vs: scala.meta.internal.semanticdb.Type*): WithType = addAllTypes(__vs)
      |    def addAllTypes(__vs: Iterable[scala.meta.internal.semanticdb.Type]): WithType = copy(types = types ++ __vs)
      |    def withTypes(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]): WithType = copy(types = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => types.iterator.map(scala.meta.internal.semanticdb.WithType._typemapper_types.toBase).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(types.iterator.map(scala.meta.internal.semanticdb.WithType._typemapper_types.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.WithType
      |}
      |
      |object WithType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.WithType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.WithType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.WithType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.WithType(
      |      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]].iterator.map(scala.meta.internal.semanticdb.WithType._typemapper_types.toCustom).toSeq
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.WithType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.WithType(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.WithType._typemapper_types.toCustom).toSeq
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(13)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(13)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.in""".stripMargin) + new String(s"""|ternal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.WithType(
      |    types = _root_.scala.Seq.empty
      |  )
      |  implicit class WithTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.WithType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.WithType](_l) {
      |    def types: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Type]] = field(_.types)((c_, f_) => c_.copy(types = f_))
      |  }
      |  final val TYPES_FIELD_NUMBER = 1
      |  @transient
      |  private val _typemapper_types: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    types: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]
      |  ): _root_.scala.meta.internal.semanticdb.WithType = _root_.scala.meta.internal.semanticdb.WithType(
      |    types
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class StructuralType(
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[StructuralType] with scalapb.lenses.Updatable[StructuralType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(tpe)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      if (declarations.isDefined) {
      |        val __value = declarations.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(tpe)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(4, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      declarations.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(5, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.StructuralType = {
      |      var __tpe = this.tpe
      |      var __declarations = this.declarations
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 34 =>
      |            __tpe = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(__tpe)))
      |          case 42 =>
      |            __declarations = Option(_root_.scalapb.LiteParser.readMessage(_input__, __declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.StructuralType(
      |          tpe = __tpe,
      |          declarations = __declarations
      |      )
      |    }
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): StructuralType = copy(tpe = __v)
      |    def getDeclarations: scala.meta.internal.semanticdb.Scope = declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearDeclarations: StructuralType = copy(declarations = _root_.scala.None)
      |    def withDeclarations(__v: scala.meta.internal.semanticdb.Scope): StructuralType = copy(declarations = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_r""".stripMargin) + new String(s"""|oot_.scala.unchecked) match {
      |        case 4 => {
      |          val __t = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 5 => declarations.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 4 => scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(tpe).toPMessage
      |        case 5 => declarations.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.StructuralType
      |}
      |
      |object StructuralType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.StructuralType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.StructuralType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.StructuralType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.StructuralType(
      |      scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      |      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.StructuralType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.StructuralType(
      |        scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(14)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(14)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 4 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 5 => __out = scala.meta.internal.semanticdb.Scope
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.StructuralType(
      |    tpe = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    declarations = _root_.scala.None
      |  )
      |  implicit class StructuralTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.StructuralType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.StructuralType](_l) {
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |    def declarations: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getDeclarations)((c_, f_) => c_.copy(declarations = Option(f_)))
      |    def optionalDeclarations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.declarations)((c_, f_) => c_.copy(declarations = f_))
      |  }
      |  final val TPE_FIELD_NUMBER = 4
      |  final val DECLARATIONS_FIELD_NUMBER = 5
      |  @transient
      |  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.m""".stripMargin) + new String(s"""|eta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    tpe: scala.meta.internal.semanticdb.Type,
      |    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope]
      |  ): _root_.scala.meta.internal.semanticdb.StructuralType = _root_.scala.meta.internal.semanticdb.StructuralType(
      |    tpe,
      |    declarations
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class AnnotatedType(
      |    annotations: _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation] = _root_.scala.Seq.empty,
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[AnnotatedType] with scalapb.lenses.Updatable[AnnotatedType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      annotations.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(tpe)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(tpe)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      annotations.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.AnnotatedType = {
      |      val __annotations = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.Annotation] ++= this.annotations)
      |      var __tpe = this.tpe
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 26 =>
      |            __annotations += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.Annotation.defaultInstance)
      |          case 10 =>
      |            __tpe = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(__tpe)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.AnnotatedType(
      |          annotations = __annotations.result(),
      |          tpe = __tpe
      |      )
      |    }
      |    def clearAnnotations = copy(annotations = _root_.scala.Seq.empty)
      |    def addAnnotations(__vs: scala.meta.internal.semanticdb.Annotation*): AnnotatedType = addAllAnnotations(__vs)
      |    def addAllAnnotations(__vs: Iterable[scala.meta.internal.semanticdb.Annotation]): AnnotatedType = copy(annotations = annotations ++ __vs)
      |    def withAnnotations(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]): AnnotatedType = copy(annotations = __v)
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): AnnotatedType = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 3 => annotations
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 3 => _root_.scalapb.descriptors.PRepeated(annotations.iterator.map(_.toPMessage).toVector)
      |        case 1 => scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: """.stripMargin) + new String(s"""|_root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.AnnotatedType
      |}
      |
      |object AnnotatedType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.AnnotatedType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.AnnotatedType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.AnnotatedType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.AnnotatedType(
      |      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]],
      |      scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.AnnotatedType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.AnnotatedType(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]]).getOrElse(_root_.scala.Seq.empty),
      |        scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(15)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(15)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 3 => __out = scala.meta.internal.semanticdb.Annotation
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.AnnotatedType(
      |    annotations = _root_.scala.Seq.empty,
      |    tpe = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class AnnotatedTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.AnnotatedType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.AnnotatedType](_l) {
      |    def annotations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]] = field(_.annotations)((c_, f_) => c_.copy(annotations = f_))
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val ANNOTATIONS_FIELD_NUMBER = 3
      |  final val TPE_FIELD_NUMBER = 1
      |  @transient
      |  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    annotations: _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation],
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.AnnotatedType = _root_.scala.meta.internal.semanticdb.AnnotatedType(
      |    annotations,
      |    tpe
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ExistentialType(
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ExistentialType] with scalapb.lenses.Updatable[ExistentialType] {
      |    @transient
      |    private[this""".stripMargin) + new String(s"""|] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(tpe)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      if (declarations.isDefined) {
      |        val __value = declarations.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(tpe)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      declarations.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ExistentialType = {
      |      var __tpe = this.tpe
      |      var __declarations = this.declarations
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __tpe = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(__tpe)))
      |          case 26 =>
      |            __declarations = Option(_root_.scalapb.LiteParser.readMessage(_input__, __declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ExistentialType(
      |          tpe = __tpe,
      |          declarations = __declarations
      |      )
      |    }
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): ExistentialType = copy(tpe = __v)
      |    def getDeclarations: scala.meta.internal.semanticdb.Scope = declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearDeclarations: ExistentialType = copy(declarations = _root_.scala.None)
      |    def withDeclarations(__v: scala.meta.internal.semanticdb.Scope): ExistentialType = copy(declarations = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 3 => declarations.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(tpe).toPMessage
      |        case 3 => declarations.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ExistentialType
      |}
      |
      |object ExistentialType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ExistentialType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ExistentialType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ExistentialType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.ExistentialType(
      |      scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      |      __fieldsMap.get(__fields.get(1)""".stripMargin) + new String(s"""|).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ExistentialType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ExistentialType(
      |        scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(16)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(16)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 3 => __out = scala.meta.internal.semanticdb.Scope
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ExistentialType(
      |    tpe = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    declarations = _root_.scala.None
      |  )
      |  implicit class ExistentialTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ExistentialType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ExistentialType](_l) {
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |    def declarations: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getDeclarations)((c_, f_) => c_.copy(declarations = Option(f_)))
      |    def optionalDeclarations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.declarations)((c_, f_) => c_.copy(declarations = f_))
      |  }
      |  final val TPE_FIELD_NUMBER = 1
      |  final val DECLARATIONS_FIELD_NUMBER = 3
      |  @transient
      |  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    tpe: scala.meta.internal.semanticdb.Type,
      |    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope]
      |  ): _root_.scala.meta.internal.semanticdb.ExistentialType = _root_.scala.meta.internal.semanticdb.ExistentialType(
      |    tpe,
      |    declarations
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class UniversalType(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None,
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[UniversalType] with scalapb.lenses.Updatable[UniversalType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (typeParameters.isDefined) {
      |        val __value = typeParameters.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(tpe)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedS""".stripMargin) + new String(s"""|izeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(tpe)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(2, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      typeParameters.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.UniversalType = {
      |      var __typeParameters = this.typeParameters
      |      var __tpe = this.tpe
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 26 =>
      |            __typeParameters = Option(_root_.scalapb.LiteParser.readMessage(_input__, __typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)))
      |          case 18 =>
      |            __tpe = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(__tpe)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.UniversalType(
      |          typeParameters = __typeParameters,
      |          tpe = __tpe
      |      )
      |    }
      |    def getTypeParameters: scala.meta.internal.semanticdb.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearTypeParameters: UniversalType = copy(typeParameters = _root_.scala.None)
      |    def withTypeParameters(__v: scala.meta.internal.semanticdb.Scope): UniversalType = copy(typeParameters = Option(__v))
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): UniversalType = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 3 => typeParameters.orNull
      |        case 2 => {
      |          val __t = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 3 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.UniversalType
      |}
      |
      |object UniversalType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UniversalType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UniversalType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.UniversalType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.UniversalType(
      |      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]],
      |      scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.UniversalType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.UniversalType(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]),
      |        scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Exp""".stripMargin) + new String(s"""|ected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(17)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(17)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 3 => __out = scala.meta.internal.semanticdb.Scope
      |      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.UniversalType(
      |    typeParameters = _root_.scala.None,
      |    tpe = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class UniversalTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UniversalType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.UniversalType](_l) {
      |    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
      |    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val TYPE_PARAMETERS_FIELD_NUMBER = 3
      |  final val TPE_FIELD_NUMBER = 2
      |  @transient
      |  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope],
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.UniversalType = _root_.scala.meta.internal.semanticdb.UniversalType(
      |    typeParameters,
      |    tpe
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ByNameType(
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ByNameType] with scalapb.lenses.Updatable[ByNameType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(tpe)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(tpe)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ByNameType = {
      |      var __tpe = this.tpe
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __tpe = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(__tpe)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.ByNameType(
      |          tpe = __tpe
      |      )
      |    }
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): ByNameType = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root""".stripMargin) + new String(s"""|_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.ByNameType
      |}
      |
      |object ByNameType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByNameType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByNameType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.ByNameType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.ByNameType(
      |      scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ByNameType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ByNameType(
      |        scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(18)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(18)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ByNameType(
      |    tpe = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class ByNameTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ByNameType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ByNameType](_l) {
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val TPE_FIELD_NUMBER = 1
      |  @transient
      |  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.ByNameType = _root_.scala.meta.internal.semanticdb.ByNameType(
      |    tpe
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class RepeatedType(
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[RepeatedType] with scalapb.lenses.Updatable[RepeatedType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        """.stripMargin) + new String(s"""|val __value = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(tpe)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(tpe)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.RepeatedType = {
      |      var __tpe = this.tpe
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __tpe = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(__tpe)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.RepeatedType(
      |          tpe = __tpe
      |      )
      |    }
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): RepeatedType = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.RepeatedType
      |}
      |
      |object RepeatedType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.RepeatedType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.RepeatedType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.RepeatedType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.RepeatedType(
      |      scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.RepeatedType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.RepeatedType(
      |        scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(19)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(19)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessag""".stripMargin) + new String(s"""|e]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.RepeatedType(
      |    tpe = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class RepeatedTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.RepeatedType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.RepeatedType](_l) {
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val TPE_FIELD_NUMBER = 1
      |  @transient
      |  private val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.RepeatedType = _root_.scala.meta.internal.semanticdb.RepeatedType(
      |    tpe
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class MatchType(
      |    scrutinee: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    cases: _root_.scala.Seq[scala.meta.internal.semanticdb.MatchType.CaseType] = _root_.scala.Seq.empty
      |    ) extends scala.meta.internal.semanticdb.Type with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[MatchType] with scalapb.lenses.Updatable[MatchType] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toBase(scrutinee)
      |        if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      cases.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toBase(scrutinee)
      |        if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      cases.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.MatchType = {
      |      var __scrutinee = this.scrutinee
      |      val __cases = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticdb.MatchType.CaseType] ++= this.cases)
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __scrutinee = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toBase(__scrutinee)))
      |          case 18 =>
      |            __cases += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.MatchType.CaseType.defaultInstance)
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.MatchType(
      |          scrutinee = __scrutinee,
      |          cases = __cases.result()
      |      )
      |    }
      |    def withScrutinee(__v: scala.meta.internal.semanticdb.Type): MatchType = copy(scrutinee = __v)
      |    def clearCases = copy(cases = _root_.scala.Seq.empty)
      |    def addCases(__vs: scala.meta.internal.semanticdb.MatchType.CaseType*): MatchType = addAllCases(__vs)
      |    def addAllCases(__vs: Iterable[scala.meta.internal.semanticdb.MatchType.CaseType]): MatchType = copy(cases = cases ++ __vs)
      |    def withCases(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.MatchType.CaseType]): MatchType = copy(cases = __v)
      |    def getFieldByNumber(__field""".stripMargin) + new String(s"""|Number: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toBase(scrutinee)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => cases
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toBase(scrutinee).toPMessage
      |        case 2 => _root_.scalapb.descriptors.PRepeated(cases.iterator.map(_.toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticdb.MatchType
      |}
      |
      |object MatchType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MatchType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MatchType] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.MatchType = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticdb.MatchType(
      |      scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      |      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticdb.MatchType.CaseType]]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.MatchType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.MatchType(
      |        scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.MatchType.CaseType]]).getOrElse(_root_.scala.Seq.empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes.get(20)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(20)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 2 => __out = scala.meta.internal.semanticdb.MatchType.CaseType
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      |    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      |      _root_.scala.meta.internal.semanticdb.MatchType.CaseType
      |    )
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.MatchType(
      |    scrutinee = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    cases = _root_.scala.Seq.empty
      |  )
      |  @SerialVersionUID(0L)
      |  final case class CaseType(
      |      key: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |      body: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |      ) extends scalapb.GeneratedMessage with scalapb.Message[CaseType] with scalapb.lenses.Updatable[CaseType] {
      |      @transient
      |      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |      private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |        var __size = 0
      |        
      |        {""".stripMargin) + new String(s"""|
      |          val __value = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toBase(key)
      |          if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |          }
      |        };
      |        
      |        {
      |          val __value = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toBase(body)
      |          if (__value != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |          }
      |        };
      |        __size
      |      }
      |      final override def serializedSize: _root_.scala.Int = {
      |        var read = __serializedSizeCachedValue
      |        if (read == 0) {
      |          read = __computeSerializedValue()
      |          __serializedSizeCachedValue = read
      |        }
      |        read
      |      }
      |      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |        {
      |          val __v = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toBase(key)
      |          if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |            _output__.writeTag(1, 2)
      |            _output__.writeUInt32NoTag(__v.serializedSize)
      |            __v.writeTo(_output__)
      |          }
      |        };
      |        {
      |          val __v = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toBase(body)
      |          if (__v != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) {
      |            _output__.writeTag(2, 2)
      |            _output__.writeUInt32NoTag(__v.serializedSize)
      |            __v.writeTo(_output__)
      |          }
      |        };
      |      }
      |      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.MatchType.CaseType = {
      |        var __key = this.key
      |        var __body = this.body
      |        var _done__ = false
      |        while (!_done__) {
      |          val _tag__ = _input__.readTag()
      |          _tag__ match {
      |            case 0 => _done__ = true
      |            case 10 =>
      |              __key = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toBase(__key)))
      |            case 18 =>
      |              __body = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toBase(__body)))
      |            case tag => _input__.skipField(tag)
      |          }
      |        }
      |        scala.meta.internal.semanticdb.MatchType.CaseType(
      |            key = __key,
      |            body = __body
      |        )
      |      }
      |      def withKey(__v: scala.meta.internal.semanticdb.Type): CaseType = copy(key = __v)
      |      def withBody(__v: scala.meta.internal.semanticdb.Type): CaseType = copy(body = __v)
      |      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |        (__fieldNumber: @_root_.scala.unchecked) match {
      |          case 1 => {
      |            val __t = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toBase(key)
      |            if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |          }
      |          case 2 => {
      |            val __t = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toBase(body)
      |            if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |          }
      |        }
      |      }
      |      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |        (__field.number: @_root_.scala.unchecked) match {
      |          case 1 => scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toBase(key).toPMessage
      |          case 2 => scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toBase(body).toPMessage
      |        }
      |      }
      |      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |      def companion = scala.meta.internal.semanticdb.MatchType.CaseType
      |  }
      |  
      |  object CaseType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MatchType.CaseType] {
      |    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MatchType.CaseType] = this
      |    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticdb.MatchType.CaseType = {
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |      val __fields = javaDescriptor.getFields
      |      scala.meta.interna""".stripMargin) + new String(s"""|l.semanticdb.MatchType.CaseType(
      |        scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toCustom(__fieldsMap.getOrElse(__fields.get(0), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage]),
      |        scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticdb.TypeMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticdb.TypeMessage])
      |      )
      |    }
      |    implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.MatchType.CaseType] = _root_.scalapb.descriptors.Reads{
      |      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |        scala.meta.internal.semanticdb.MatchType.CaseType(
      |          scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |          scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |        )
      |      case _ => throw new RuntimeException("Expected PMessage")
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = scala.meta.internal.semanticdb.MatchType.javaDescriptor.getNestedTypes.get(0)
      |    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = scala.meta.internal.semanticdb.MatchType.scalaDescriptor.nestedMessages(0)
      |    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |      (__number: @_root_.scala.unchecked) match {
      |        case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |        case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      }
      |      __out
      |    }
      |    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |    lazy val defaultInstance = scala.meta.internal.semanticdb.MatchType.CaseType(
      |      key = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |      body = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    )
      |    implicit class CaseTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MatchType.CaseType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.MatchType.CaseType](_l) {
      |      def key: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.key)((c_, f_) => c_.copy(key = f_))
      |      def body: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.body)((c_, f_) => c_.copy(body = f_))
      |    }
      |    final val KEY_FIELD_NUMBER = 1
      |    final val BODY_FIELD_NUMBER = 2
      |    @transient
      |    private val _typemapper_key: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |    @transient
      |    private val _typemapper_body: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |    def of(
      |      key: scala.meta.internal.semanticdb.Type,
      |      body: scala.meta.internal.semanticdb.Type
      |    ): _root_.scala.meta.internal.semanticdb.MatchType.CaseType = _root_.scala.meta.internal.semanticdb.MatchType.CaseType(
      |      key,
      |      body
      |    )
      |  }
      |  
      |  implicit class MatchTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MatchType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.MatchType](_l) {
      |    def scrutinee: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.scrutinee)((c_, f_) => c_.copy(scrutinee = f_))
      |    def cases: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.MatchType.CaseType]] = field(_.cases)((c_, f_) => c_.copy(cases = f_))
      |  }
      |  final val SCRUTINEE_FIELD_NUMBER = 1
      |  final val CASES_FIELD_NUMBER = 2
      |  @transient
      |  private val _typemapper_scru""".stripMargin) + new String(s"""|tinee: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    scrutinee: scala.meta.internal.semanticdb.Type,
      |    cases: _root_.scala.Seq[scala.meta.internal.semanticdb.MatchType.CaseType]
      |  ): _root_.scala.meta.internal.semanticdb.MatchType = _root_.scala.meta.internal.semanticdb.MatchType(
      |    scrutinee,
      |    cases
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticidx/Entry.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticidx
      |
      |sealed trait Entry extends scalapb.GeneratedSealedOneof {
      |  type MessageType = scala.meta.internal.semanticidx.EntryMessage
      |  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticidx.Entry.Empty.type]
      |  final def isDefined = !isEmpty
      |  final def asMessage: scala.meta.internal.semanticidx.EntryMessage = scala.meta.internal.semanticidx.Entry.EntryTypeMapper.toBase(this)
      |  final def asNonEmpty: Option[scala.meta.internal.semanticidx.Entry.NonEmpty] = if (isEmpty) None else Some(this.asInstanceOf[scala.meta.internal.semanticidx.Entry.NonEmpty])
      |}
      |
      |object Entry {
      |  case object Empty extends scala.meta.internal.semanticidx.Entry
      |  
      |  sealed trait NonEmpty extends scala.meta.internal.semanticidx.Entry
      |  
      |  def defaultInstance: scala.meta.internal.semanticidx.Entry = Empty
      |  
      |  implicit val EntryTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.EntryMessage, scala.meta.internal.semanticidx.Entry] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.EntryMessage, scala.meta.internal.semanticidx.Entry] {
      |    override def toCustom(__base: scala.meta.internal.semanticidx.EntryMessage): scala.meta.internal.semanticidx.Entry = __base.sealedValue match {
      |      case __v: scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry => __v.value
      |      case __v: scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry => __v.value
      |      case scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty => Empty
      |    }
      |    override def toBase(__custom: scala.meta.internal.semanticidx.Entry): scala.meta.internal.semanticidx.EntryMessage = scala.meta.internal.semanticidx.EntryMessage(__custom match {
      |      case __v: scala.meta.internal.semanticidx.PackageEntry => scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry(__v)
      |      case __v: scala.meta.internal.semanticidx.ToplevelEntry => scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry(__v)
      |      case Empty => scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty
      |    })
      |  }
      |}
      |@SerialVersionUID(0L)
      |final case class EntryMessage(
      |    sealedValue: scala.meta.internal.semanticidx.EntryMessage.SealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[EntryMessage] with scalapb.lenses.Updatable[EntryMessage] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      if (sealedValue.packageEntry.isDefined) {
      |        val __value = sealedValue.packageEntry.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.toplevelEntry.isDefined) {
      |        val __value = sealedValue.toplevelEntry.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      sealedValue.packageEntry.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.toplevelEntry.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.EntryMessage = {
      |      var __sealedValue = this.sealedValue
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.packageEntry.getOrElse(scala.meta.internal.semanticidx.PackageEntry.defaultInstance)))
      |          case 18 =>
      |            __sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry(_root_.scalapb.LiteParser.readMessage(_input__, sealedValue.toplevelEntry.getOrElse(scala.meta.internal.semanticidx.ToplevelEntry.defaultInstance)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticidx.EntryMessage(
      |          sealedValue = __sealedValue
      |      )
      |    }
      |    def getPackageEntry: scala""".stripMargin) + new String(s"""|.meta.internal.semanticidx.PackageEntry = sealedValue.packageEntry.getOrElse(scala.meta.internal.semanticidx.PackageEntry.defaultInstance)
      |    def withPackageEntry(__v: scala.meta.internal.semanticidx.PackageEntry): EntryMessage = copy(sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry(__v))
      |    def getToplevelEntry: scala.meta.internal.semanticidx.ToplevelEntry = sealedValue.toplevelEntry.getOrElse(scala.meta.internal.semanticidx.ToplevelEntry.defaultInstance)
      |    def withToplevelEntry(__v: scala.meta.internal.semanticidx.ToplevelEntry): EntryMessage = copy(sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry(__v))
      |    def clearSealedValue: EntryMessage = copy(sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty)
      |    def withSealedValue(__v: scala.meta.internal.semanticidx.EntryMessage.SealedValue): EntryMessage = copy(sealedValue = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.packageEntry.orNull
      |        case 2 => sealedValue.toplevelEntry.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.packageEntry.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => sealedValue.toplevelEntry.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticidx.EntryMessage
      |    def toEntry: scala.meta.internal.semanticidx.Entry = scala.meta.internal.semanticidx.Entry.EntryTypeMapper.toCustom(this)
      |}
      |
      |object EntryMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.EntryMessage] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.EntryMessage] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticidx.EntryMessage = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticidx.EntryMessage(
      |      sealedValue = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticidx.PackageEntry]].map(scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry)
      |    .orElse[scala.meta.internal.semanticidx.EntryMessage.SealedValue](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[scala.meta.internal.semanticidx.ToplevelEntry]].map(scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry))
      |    .getOrElse(scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty)
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.EntryMessage] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticidx.EntryMessage(
      |        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticidx.PackageEntry]]).map(scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry)
      |    .orElse[scala.meta.internal.semanticidx.EntryMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticidx.ToplevelEntry]]).map(scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry))
      |    .getOrElse(scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticidxProto.javaDescriptor.getMessageTypes.get(2)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticidxProto.scalaDescriptor.messages(2)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticidx.PackageEntry
      |      case 2 => __out = scala.meta.internal.semanticidx.ToplevelEntry
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.Genera""".stripMargin) + new String(s"""|tedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticidx.EntryMessage(
      |    sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty
      |  )
      |  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
      |    def isEmpty: _root_.scala.Boolean = false
      |    def isDefined: _root_.scala.Boolean = true
      |    def isPackageEntry: _root_.scala.Boolean = false
      |    def isToplevelEntry: _root_.scala.Boolean = false
      |    def packageEntry: _root_.scala.Option[scala.meta.internal.semanticidx.PackageEntry] = _root_.scala.None
      |    def toplevelEntry: _root_.scala.Option[scala.meta.internal.semanticidx.ToplevelEntry] = _root_.scala.None
      |  }
      |  object SealedValue extends {
      |    @SerialVersionUID(0L)
      |    case object Empty extends scala.meta.internal.semanticidx.EntryMessage.SealedValue {
      |      type ValueType = _root_.scala.Nothing
      |      override def isEmpty: _root_.scala.Boolean = true
      |      override def isDefined: _root_.scala.Boolean = false
      |      override def number: _root_.scala.Int = 0
      |      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      |    }
      |  
      |    @SerialVersionUID(0L)
      |    final case class PackageEntry(value: scala.meta.internal.semanticidx.PackageEntry) extends scala.meta.internal.semanticidx.EntryMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticidx.PackageEntry
      |      override def isPackageEntry: _root_.scala.Boolean = true
      |      override def packageEntry: _root_.scala.Option[scala.meta.internal.semanticidx.PackageEntry] = Some(value)
      |      override def number: _root_.scala.Int = 1
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ToplevelEntry(value: scala.meta.internal.semanticidx.ToplevelEntry) extends scala.meta.internal.semanticidx.EntryMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticidx.ToplevelEntry
      |      override def isToplevelEntry: _root_.scala.Boolean = true
      |      override def toplevelEntry: _root_.scala.Option[scala.meta.internal.semanticidx.ToplevelEntry] = Some(value)
      |      override def number: _root_.scala.Int = 2
      |    }
      |  }
      |  implicit class EntryMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.EntryMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.EntryMessage](_l) {
      |    def packageEntry: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.PackageEntry] = field(_.getPackageEntry)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry(f_)))
      |    def toplevelEntry: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.ToplevelEntry] = field(_.getToplevelEntry)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry(f_)))
      |    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.EntryMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
      |  }
      |  final val PACKAGEENTRY_FIELD_NUMBER = 1
      |  final val TOPLEVELENTRY_FIELD_NUMBER = 2
      |  def of(
      |    sealedValue: scala.meta.internal.semanticidx.EntryMessage.SealedValue
      |  ): _root_.scala.meta.internal.semanticidx.EntryMessage = _root_.scala.meta.internal.semanticidx.EntryMessage(
      |    sealedValue
      |  )
      |}
      |
      |@SerialVersionUID(0L)
      |final case class PackageEntry(
      |    ) extends scala.meta.internal.semanticidx.Entry with scala.meta.internal.semanticidx.Entry.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[PackageEntry] with scalapb.lenses.Updatable[PackageEntry] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.PackageEntry = {
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticidx.PackageEntry(
      |      )
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticidx.PackageEntry
      |}
      |
      |object PackageEntry extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.PackageEntry] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.PackageEntry] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.i""".stripMargin) + new String(s"""|mmutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticidx.PackageEntry = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    scala.meta.internal.semanticidx.PackageEntry(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.PackageEntry] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticidx.PackageEntry(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticidxProto.javaDescriptor.getMessageTypes.get(3)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticidxProto.scalaDescriptor.messages(3)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticidx.PackageEntry(
      |  )
      |  implicit class PackageEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.PackageEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.PackageEntry](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticidx.PackageEntry = _root_.scala.meta.internal.semanticidx.PackageEntry(
      |  )
      |}
      |
      |/** @param uri
      |  *   relative URI to semanticdb file containing full information
      |  */
      |@SerialVersionUID(0L)
      |final case class ToplevelEntry(
      |    uri: _root_.scala.Predef.String = ""
      |    ) extends scala.meta.internal.semanticidx.Entry with scala.meta.internal.semanticidx.Entry.NonEmpty with scalapb.GeneratedMessage with scalapb.Message[ToplevelEntry] with scalapb.lenses.Updatable[ToplevelEntry] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = uri
      |        if (__value != "") {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = uri
      |        if (__v != "") {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.ToplevelEntry = {
      |      var __uri = this.uri
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __uri = _input__.readString()
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticidx.ToplevelEntry(
      |          uri = __uri
      |      )
      |    }
      |    def withUri(__v: _root_.scala.Predef.String): ToplevelEntry = copy(uri = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = uri
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(uri)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticidx.ToplevelEntry
      |}
      |
      |object ToplevelEntry extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.ToplevelEntry] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.ToplevelEntry] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticidx.ToplevelEntry = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingT""".stripMargin) + new String(s"""|ype() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticidx.ToplevelEntry(
      |      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.ToplevelEntry] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticidx.ToplevelEntry(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticidxProto.javaDescriptor.getMessageTypes.get(4)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticidxProto.scalaDescriptor.messages(4)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticidx.ToplevelEntry(
      |    uri = ""
      |  )
      |  implicit class ToplevelEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.ToplevelEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.ToplevelEntry](_l) {
      |    def uri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.uri)((c_, f_) => c_.copy(uri = f_))
      |  }
      |  final val URI_FIELD_NUMBER = 1
      |  def of(
      |    uri: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticidx.ToplevelEntry = _root_.scala.meta.internal.semanticidx.ToplevelEntry(
      |    uri
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticidx/Index.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticidx
      |
      |@SerialVersionUID(0L)
      |final case class Index(
      |    entries: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry] = _root_.scala.collection.immutable.Map.empty
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[Index] with scalapb.lenses.Updatable[Index] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      entries.foreach { __item =>
      |        val __value = scala.meta.internal.semanticidx.Index._typemapper_entries.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      entries.foreach { __v =>
      |        val __m = scala.meta.internal.semanticidx.Index._typemapper_entries.toBase(__v)
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.Index = {
      |      val __entries = (_root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry] ++= this.entries)
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __entries += scala.meta.internal.semanticidx.Index._typemapper_entries.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticidx.Index.EntriesEntry.defaultInstance))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticidx.Index(
      |          entries = __entries.result()
      |      )
      |    }
      |    def clearEntries = copy(entries = _root_.scala.collection.immutable.Map.empty)
      |    def addEntries(__vs: (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)*): Index = addAllEntries(__vs)
      |    def addAllEntries(__vs: Iterable[(_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)]): Index = copy(entries = entries ++ __vs)
      |    def withEntries(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry]): Index = copy(entries = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => entries.iterator.map(scala.meta.internal.semanticidx.Index._typemapper_entries.toBase).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(entries.iterator.map(scala.meta.internal.semanticidx.Index._typemapper_entries.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticidx.Index
      |}
      |
      |object Index extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticidx.Index = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticidx.Index(
      |      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticidx.Index.EntriesEntry]].iterator.map(scala.meta.internal.semanticidx.Index._typemapper_entries.toCustom).toMap
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.Index] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticidx.Index(
      |        __fieldsMap.get(scala""".stripMargin) + new String(s"""|Descriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticidx.Index.EntriesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticidx.Index._typemapper_entries.toCustom).toMap
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticidxProto.javaDescriptor.getMessageTypes.get(1)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticidxProto.scalaDescriptor.messages(1)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticidx.Index.EntriesEntry
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      |    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      |      _root_.scala.meta.internal.semanticidx.Index.EntriesEntry
      |    )
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticidx.Index(
      |    entries = _root_.scala.collection.immutable.Map.empty
      |  )
      |  @SerialVersionUID(0L)
      |  final case class EntriesEntry(
      |      key: _root_.scala.Predef.String = "",
      |      value: scala.meta.internal.semanticidx.Entry = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(scala.meta.internal.semanticidx.EntryMessage.defaultInstance)
      |      ) extends scalapb.GeneratedMessage with scalapb.Message[EntriesEntry] with scalapb.lenses.Updatable[EntriesEntry] {
      |      @transient
      |      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |      private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |        var __size = 0
      |        
      |        {
      |          val __value = key
      |          if (__value != "") {
      |            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |          }
      |        };
      |        
      |        {
      |          val __value = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(value)
      |          if (__value != scala.meta.internal.semanticidx.EntryMessage.defaultInstance) {
      |            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |          }
      |        };
      |        __size
      |      }
      |      final override def serializedSize: _root_.scala.Int = {
      |        var read = __serializedSizeCachedValue
      |        if (read == 0) {
      |          read = __computeSerializedValue()
      |          __serializedSizeCachedValue = read
      |        }
      |        read
      |      }
      |      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |        {
      |          val __v = key
      |          if (__v != "") {
      |            _output__.writeString(1, __v)
      |          }
      |        };
      |        {
      |          val __v = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(value)
      |          if (__v != scala.meta.internal.semanticidx.EntryMessage.defaultInstance) {
      |            _output__.writeTag(2, 2)
      |            _output__.writeUInt32NoTag(__v.serializedSize)
      |            __v.writeTo(_output__)
      |          }
      |        };
      |      }
      |      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.Index.EntriesEntry = {
      |        var __key = this.key
      |        var __value = this.value
      |        var _done__ = false
      |        while (!_done__) {
      |          val _tag__ = _input__.readTag()
      |          _tag__ match {
      |            case 0 => _done__ = true
      |            case 10 =>
      |              __key = _input__.readString()
      |            case 18 =>
      |              __value = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(_root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(__value)))
      |            case tag => _input__.skipField(tag)
      |          }
      |        }
      |        scala.meta.internal.semanticidx.Index.EntriesEntry(
      |            key = __key,
      |            value = __value
      |        )
      |      }
      |      def withKey(__v: _root_.scala.Predef.String): EntriesEntry = copy(key = __v)
      |      def withValue(__v: scala.meta.internal.semanticidx.Entry): EntriesEntry = copy(value = __v)
      |      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |        (__fieldNumber: @_root_.scala.unchecked) match {
      |          case 1 => {
      |            val __t = key
      |            if (__t != "") __t else null
      |          }
      |          case 2 => {
      |            val __t = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(value)
      |            if (__t != scala.meta.internal.semanticidx.EntryMessage.defaultInstance) __t else """.stripMargin) + new String(s"""|null
      |          }
      |        }
      |      }
      |      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |        (__field.number: @_root_.scala.unchecked) match {
      |          case 1 => _root_.scalapb.descriptors.PString(key)
      |          case 2 => scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(value).toPMessage
      |        }
      |      }
      |      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |      def companion = scala.meta.internal.semanticidx.Index.EntriesEntry
      |  }
      |  
      |  object EntriesEntry extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index.EntriesEntry] {
      |    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index.EntriesEntry] = this
      |    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticidx.Index.EntriesEntry = {
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |      val __fields = javaDescriptor.getFields
      |      scala.meta.internal.semanticidx.Index.EntriesEntry(
      |        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      |        scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(__fieldsMap.getOrElse(__fields.get(1), scala.meta.internal.semanticidx.EntryMessage.defaultInstance).asInstanceOf[scala.meta.internal.semanticidx.EntryMessage])
      |      )
      |    }
      |    implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.Index.EntriesEntry] = _root_.scalapb.descriptors.Reads{
      |      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |        scala.meta.internal.semanticidx.Index.EntriesEntry(
      |          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |          scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticidx.EntryMessage]).getOrElse(scala.meta.internal.semanticidx.EntryMessage.defaultInstance))
      |        )
      |      case _ => throw new RuntimeException("Expected PMessage")
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = scala.meta.internal.semanticidx.Index.javaDescriptor.getNestedTypes.get(0)
      |    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = scala.meta.internal.semanticidx.Index.scalaDescriptor.nestedMessages(0)
      |    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |      (__number: @_root_.scala.unchecked) match {
      |        case 2 => __out = scala.meta.internal.semanticidx.EntryMessage
      |      }
      |      __out
      |    }
      |    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |    lazy val defaultInstance = scala.meta.internal.semanticidx.Index.EntriesEntry(
      |      key = "",
      |      value = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(scala.meta.internal.semanticidx.EntryMessage.defaultInstance)
      |    )
      |    implicit class EntriesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.Index.EntriesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.Index.EntriesEntry](_l) {
      |      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      |      def value: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.Entry] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |    }
      |    final val KEY_FIELD_NUMBER = 1
      |    final val VALUE_FIELD_NUMBER = 2
      |    @transient
      |    private[Index] val _typemapper_value: _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.EntryMessage, scala.meta.internal.semanticidx.Entry] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.EntryMessage, scala.meta.internal.semanticidx.Entry]]
      |    @transient
      |    implicit val keyValueMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.Index.EntriesEntry, (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)] =
      |      _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.Index.EntriesEntry, (_root_.scala.Predef.String, scala.meta.internal.""".stripMargin) + new String(s"""|semanticidx.Entry)](__m => (__m.key, __m.value))(__p => scala.meta.internal.semanticidx.Index.EntriesEntry(__p._1, __p._2))
      |    def of(
      |      key: _root_.scala.Predef.String,
      |      value: scala.meta.internal.semanticidx.Entry
      |    ): _root_.scala.meta.internal.semanticidx.Index.EntriesEntry = _root_.scala.meta.internal.semanticidx.Index.EntriesEntry(
      |      key,
      |      value
      |    )
      |  }
      |  
      |  implicit class IndexLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.Index]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.Index](_l) {
      |    def entries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry]] = field(_.entries)((c_, f_) => c_.copy(entries = f_))
      |  }
      |  final val ENTRIES_FIELD_NUMBER = 1
      |  @transient
      |  private val _typemapper_entries: _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.Index.EntriesEntry, (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.Index.EntriesEntry, (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)]]
      |  def of(
      |    entries: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry]
      |  ): _root_.scala.meta.internal.semanticidx.Index = _root_.scala.meta.internal.semanticidx.Index(
      |    entries
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticidx/Indexes.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticidx
      |
      |@SerialVersionUID(0L)
      |final case class Indexes(
      |    indexes: _root_.scala.Seq[scala.meta.internal.semanticidx.Index] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scalapb.Message[Indexes] with scalapb.lenses.Updatable[Indexes] {
      |    @transient
      |    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      |    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      |      var __size = 0
      |      indexes.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    final override def serializedSize: _root_.scala.Int = {
      |      var read = __serializedSizeCachedValue
      |      if (read == 0) {
      |        read = __computeSerializedValue()
      |        __serializedSizeCachedValue = read
      |      }
      |      read
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      indexes.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.Indexes = {
      |      val __indexes = (_root_.scala.collection.immutable.Vector.newBuilder[scala.meta.internal.semanticidx.Index] ++= this.indexes)
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __indexes += _root_.scalapb.LiteParser.readMessage(_input__, scala.meta.internal.semanticidx.Index.defaultInstance)
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticidx.Indexes(
      |          indexes = __indexes.result()
      |      )
      |    }
      |    def clearIndexes = copy(indexes = _root_.scala.Seq.empty)
      |    def addIndexes(__vs: scala.meta.internal.semanticidx.Index*): Indexes = addAllIndexes(__vs)
      |    def addAllIndexes(__vs: Iterable[scala.meta.internal.semanticidx.Index]): Indexes = copy(indexes = indexes ++ __vs)
      |    def withIndexes(__v: _root_.scala.Seq[scala.meta.internal.semanticidx.Index]): Indexes = copy(indexes = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => indexes
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(indexes.iterator.map(_.toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion = scala.meta.internal.semanticidx.Indexes
      |}
      |
      |object Indexes extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Indexes] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Indexes] = this
      |  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scala.meta.internal.semanticidx.Indexes = {
      |    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      |    val __fields = javaDescriptor.getFields
      |    scala.meta.internal.semanticidx.Indexes(
      |      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[scala.meta.internal.semanticidx.Index]]
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.Indexes] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticidx.Indexes(
      |        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticidx.Index]]).getOrElse(_root_.scala.Seq.empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticidxProto.javaDescriptor.getMessageTypes.get(0)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticidxProto.scalaDescriptor.messages(0)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala""".stripMargin) + new String(s"""|.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticidx.Index
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticidx.Indexes(
      |    indexes = _root_.scala.Seq.empty
      |  )
      |  implicit class IndexesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.Indexes]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.Indexes](_l) {
      |    def indexes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticidx.Index]] = field(_.indexes)((c_, f_) => c_.copy(indexes = f_))
      |  }
      |  final val INDEXES_FIELD_NUMBER = 1
      |  def of(
      |    indexes: _root_.scala.Seq[scala.meta.internal.semanticidx.Index]
      |  ): _root_.scala.meta.internal.semanticidx.Indexes = _root_.scala.meta.internal.semanticidx.Indexes(
      |    indexes
      |  )
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticidx/SemanticidxProto.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticidx
      |
      |object SemanticidxProto extends _root_.scalapb.GeneratedFileObject {
      |  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
      |    scalapb.options.ScalapbProto
      |  )
      |  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      |    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      |      scala.meta.internal.semanticidx.Indexes,
      |      scala.meta.internal.semanticidx.Index,
      |      scala.meta.internal.semanticidx.EntryMessage,
      |      scala.meta.internal.semanticidx.PackageEntry,
      |      scala.meta.internal.semanticidx.ToplevelEntry
      |    )
      |  private lazy val ProtoBytes: Array[Byte] =
      |      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
      |  ${"\"" * 3}ChFzZW1hbnRpY2lkeC5wcm90bxIfc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2lkeBoVc2NhbGFwYi9zY2FsYXBiLnByb
      |  3RvIlkKB0luZGV4ZXMSTgoHaW5kZXhlcxgBIAMoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNpZHguSW5kZXhCDOI/C
      |  RIHaW5kZXhlc1IHaW5kZXhlcyLeAQoFSW5kZXgSWwoHZW50cmllcxgBIAMoCzIzLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50a
      |  WNpZHguSW5kZXguRW50cmllc0VudHJ5QgziPwkSB2VudHJpZXNSB2VudHJpZXMaeAoMRW50cmllc0VudHJ5EhoKA2tleRgBIAEoC
      |  UII4j8FEgNrZXlSA2tleRJICgV2YWx1ZRgCIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNpZHguRW50cnlCCuI/B
      |  xIFdmFsdWVSBXZhbHVlOgI4ASLrAQoFRW50cnkSZgoMcGFja2FnZUVudHJ5GAEgASgLMi0uc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
      |  W1hbnRpY2lkeC5QYWNrYWdlRW50cnlCEeI/DhIMcGFja2FnZUVudHJ5SABSDHBhY2thZ2VFbnRyeRJqCg10b3BsZXZlbEVudHJ5G
      |  AIgASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2lkeC5Ub3BsZXZlbEVudHJ5QhLiPw8SDXRvcGxldmVsRW50cnlIA
      |  FINdG9wbGV2ZWxFbnRyeUIOCgxzZWFsZWRfdmFsdWUiDgoMUGFja2FnZUVudHJ5IisKDVRvcGxldmVsRW50cnkSGgoDdXJpGAEgA
      |  SgJQgjiPwUSA3VyaVIDdXJpQgXiPwJIAGIGcHJvdG8z${"\"" * 3}
      |      ).mkString)
      |  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
      |    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
      |    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
      |  }
      |  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
      |    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
      |    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      |      scalapb.options.ScalapbProto.javaDescriptor
      |    ))
      |  }
      |  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
      |  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
      |}""".stripMargin
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Access.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed trait Access extends scalapb.GeneratedSealedOneof {
      |  type MessageType = scala.meta.internal.semanticdb.AccessMessage
      |  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Access.Empty.type]
      |  final def isDefined = !isEmpty
      |  final def asMessage: scala.meta.internal.semanticdb.AccessMessage = scala.meta.internal.semanticdb.Access.AccessTypeMapper.toBase(this)
      |  final def asNonEmpty: Option[scala.meta.internal.semanticdb.Access.NonEmpty] = if (isEmpty) None else Some(this.asInstanceOf[scala.meta.internal.semanticdb.Access.NonEmpty])
      |}
      |
      |object Access {
      |  case object Empty extends scala.meta.internal.semanticdb.Access
      |  
      |  sealed trait NonEmpty extends scala.meta.internal.semanticdb.Access
      |  def defaultInstance: scala.meta.internal.semanticdb.Access = Empty
      |  
      |  implicit val AccessTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.AccessMessage, scala.meta.internal.semanticdb.Access] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.AccessMessage, scala.meta.internal.semanticdb.Access] {
      |    override def toCustom(__base: scala.meta.internal.semanticdb.AccessMessage): scala.meta.internal.semanticdb.Access = __base.sealedValue match {
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess => __v.value
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess => __v.value
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess => __v.value
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess => __v.value
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess => __v.value
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess => __v.value
      |      case __v: scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess => __v.value
      |      case scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty => Empty
      |    }
      |    override def toBase(__custom: scala.meta.internal.semanticdb.Access): scala.meta.internal.semanticdb.AccessMessage = scala.meta.internal.semanticdb.AccessMessage(__custom match {
      |      case __v: scala.meta.internal.semanticdb.PrivateAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess(__v)
      |      case __v: scala.meta.internal.semanticdb.PrivateThisAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess(__v)
      |      case __v: scala.meta.internal.semanticdb.PrivateWithinAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess(__v)
      |      case __v: scala.meta.internal.semanticdb.ProtectedAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess(__v)
      |      case __v: scala.meta.internal.semanticdb.ProtectedThisAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess(__v)
      |      case __v: scala.meta.internal.semanticdb.ProtectedWithinAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess(__v)
      |      case __v: scala.meta.internal.semanticdb.PublicAccess => scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess(__v)
      |      case Empty => scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty
      |    })
      |  }
      |}
      |@SerialVersionUID(0L)
      |final case class AccessMessage(
      |    sealedValue: scala.meta.internal.semanticdb.AccessMessage.SealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AccessMessage] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (sealedValue.privateAccess.isDefined) {
      |        val __value = sealedValue.privateAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.privateThisAccess.isDefined) {
      |        val __value = sealedValue.privateThisAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.privateWithinAccess.isDefined) {
      |        val __value = sealedValue.privateWithinAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.protectedAccess.isDefined) {
      |        val __value = sealedValue.protectedAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.protectedThisAccess.isD""".stripMargin) + new String(s"""|efined) {
      |        val __value = sealedValue.protectedThisAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.protectedWithinAccess.isDefined) {
      |        val __value = sealedValue.protectedWithinAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.publicAccess.isDefined) {
      |        val __value = sealedValue.publicAccess.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      sealedValue.privateAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.privateThisAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.privateWithinAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.protectedAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(4, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.protectedThisAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(5, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.protectedWithinAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(6, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.publicAccess.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(7, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def getPrivateAccess: scala.meta.internal.semanticdb.PrivateAccess = sealedValue.privateAccess.getOrElse(scala.meta.internal.semanticdb.PrivateAccess.defaultInstance)
      |    def withPrivateAccess(__v: scala.meta.internal.semanticdb.PrivateAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess(__v))
      |    def getPrivateThisAccess: scala.meta.internal.semanticdb.PrivateThisAccess = sealedValue.privateThisAccess.getOrElse(scala.meta.internal.semanticdb.PrivateThisAccess.defaultInstance)
      |    def withPrivateThisAccess(__v: scala.meta.internal.semanticdb.PrivateThisAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess(__v))
      |    def getPrivateWithinAccess: scala.meta.internal.semanticdb.PrivateWithinAccess = sealedValue.privateWithinAccess.getOrElse(scala.meta.internal.semanticdb.PrivateWithinAccess.defaultInstance)
      |    def withPrivateWithinAccess(__v: scala.meta.internal.semanticdb.PrivateWithinAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess(__v))
      |    def getProtectedAccess: scala.meta.internal.semanticdb.ProtectedAccess = sealedValue.protectedAccess.getOrElse(scala.meta.internal.semanticdb.ProtectedAccess.defaultInstance)
      |    def withProtectedAccess(__v: scala.meta.internal.semanticdb.ProtectedAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess(__v))
      |    def getProtectedThisAccess: scala.meta.internal.semanticdb.ProtectedThisAccess = sealedValue.protectedThisAccess.getOrElse(scala.meta.internal.semanticdb.ProtectedThisAccess.defaultInstance)
      |    def withProtectedThisAccess(__v: scala.meta.internal.semanticdb.ProtectedThisAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess(__v))
      |    def getProtectedWithinAccess: scala.meta.internal.semanticdb.ProtectedWithinAccess = sealedValue.protectedWithinAccess.getOrElse(scala.meta.internal.semanticdb.ProtectedWithinAccess.defaultInstance)
      |    def withProtectedWithinAccess(__v: scala.meta.internal.semanticdb.ProtectedWithinAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess(__v))
      |    def getPublicAccess: scala.meta.internal.semanticdb.PublicAccess = sealedValue.publicAccess.getOrElse(scala.meta.internal.semanti""".stripMargin) + new String(s"""|cdb.PublicAccess.defaultInstance)
      |    def withPublicAccess(__v: scala.meta.internal.semanticdb.PublicAccess): AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess(__v))
      |    def clearSealedValue: AccessMessage = copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty)
      |    def withSealedValue(__v: scala.meta.internal.semanticdb.AccessMessage.SealedValue): AccessMessage = copy(sealedValue = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.privateAccess.orNull
      |        case 2 => sealedValue.privateThisAccess.orNull
      |        case 3 => sealedValue.privateWithinAccess.orNull
      |        case 4 => sealedValue.protectedAccess.orNull
      |        case 5 => sealedValue.protectedThisAccess.orNull
      |        case 6 => sealedValue.protectedWithinAccess.orNull
      |        case 7 => sealedValue.publicAccess.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.privateAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => sealedValue.privateThisAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 3 => sealedValue.privateWithinAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 4 => sealedValue.protectedAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 5 => sealedValue.protectedThisAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 6 => sealedValue.protectedWithinAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 7 => sealedValue.publicAccess.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.AccessMessage.type = scala.meta.internal.semanticdb.AccessMessage
      |    def toAccess: scala.meta.internal.semanticdb.Access = scala.meta.internal.semanticdb.Access.AccessTypeMapper.toCustom(this)
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.Access])
      |}
      |
      |object AccessMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.AccessMessage] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.AccessMessage] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.AccessMessage = {
      |    var __sealedValue: scala.meta.internal.semanticdb.AccessMessage.SealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess(__sealedValue.privateAccess.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.PrivateAccess](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess(__sealedValue.privateThisAccess.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.PrivateThisAccess](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 26 =>
      |          __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess(__sealedValue.privateWithinAccess.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.PrivateWithinAccess](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 34 =>
      |          __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess(__sealedValue.protectedAccess.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ProtectedAccess](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 42 =>
      |          __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess(__sealedValue.protectedThisAccess.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ProtectedThisAccess](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 50 =>
      |          __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess(__sealedValue.protectedWithinAccess.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ProtectedWithinAccess](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case """.stripMargin) + new String(s"""|58 =>
      |          __sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess(__sealedValue.publicAccess.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.PublicAccess](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.AccessMessage(
      |        sealedValue = __sealedValue
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.AccessMessage] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.AccessMessage(
      |        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.PrivateAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess(_))
      |            .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.PrivateThisAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess(_)))
      |            .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.PrivateWithinAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess(_)))
      |            .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ProtectedAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess(_)))
      |            .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ProtectedThisAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess(_)))
      |            .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ProtectedWithinAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess(_)))
      |            .orElse[scala.meta.internal.semanticdb.AccessMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.PublicAccess]]).map(scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess(_)))
      |            .getOrElse(scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(41)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(41)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.PrivateAccess
      |      case 2 => __out = scala.meta.internal.semanticdb.PrivateThisAccess
      |      case 3 => __out = scala.meta.internal.semanticdb.PrivateWithinAccess
      |      case 4 => __out = scala.meta.internal.semanticdb.ProtectedAccess
      |      case 5 => __out = scala.meta.internal.semanticdb.ProtectedThisAccess
      |      case 6 => __out = scala.meta.internal.semanticdb.ProtectedWithinAccess
      |      case 7 => __out = scala.meta.internal.semanticdb.PublicAccess
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.AccessMessage(
      |    sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.Empty
      |  )
      |  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
      |    def isEmpty: _root_.scala.Boolean = false
      |    def isDefined: _root_.scala.Boolean = true
      |    def isPrivateAccess: _root_.scala.Boolean = false
      |    def isPrivateThisAccess: _root_.scala.Boolean = false
      |    def isPrivateWithinAccess: _root_.scala.Boolean = false
      |    def isProtectedAccess: _root_.scala.Boolean = false
      |    def isProtectedThisAccess: _root_.scala.Boolean = false
      |    def isProtectedWithinAccess: _root_.scala""".stripMargin) + new String(s"""|.Boolean = false
      |    def isPublicAccess: _root_.scala.Boolean = false
      |    def privateAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PrivateAccess] = _root_.scala.None
      |    def privateThisAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PrivateThisAccess] = _root_.scala.None
      |    def privateWithinAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PrivateWithinAccess] = _root_.scala.None
      |    def protectedAccess: _root_.scala.Option[scala.meta.internal.semanticdb.ProtectedAccess] = _root_.scala.None
      |    def protectedThisAccess: _root_.scala.Option[scala.meta.internal.semanticdb.ProtectedThisAccess] = _root_.scala.None
      |    def protectedWithinAccess: _root_.scala.Option[scala.meta.internal.semanticdb.ProtectedWithinAccess] = _root_.scala.None
      |    def publicAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PublicAccess] = _root_.scala.None
      |  }
      |  object SealedValue {
      |    @SerialVersionUID(0L)
      |    case object Empty extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = _root_.scala.Nothing
      |      override def isEmpty: _root_.scala.Boolean = true
      |      override def isDefined: _root_.scala.Boolean = false
      |      override def number: _root_.scala.Int = 0
      |      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      |    }
      |  
      |    @SerialVersionUID(0L)
      |    final case class PrivateAccess(value: scala.meta.internal.semanticdb.PrivateAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.PrivateAccess
      |      override def isPrivateAccess: _root_.scala.Boolean = true
      |      override def privateAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PrivateAccess] = Some(value)
      |      override def number: _root_.scala.Int = 1
      |    }
      |    @SerialVersionUID(0L)
      |    final case class PrivateThisAccess(value: scala.meta.internal.semanticdb.PrivateThisAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.PrivateThisAccess
      |      override def isPrivateThisAccess: _root_.scala.Boolean = true
      |      override def privateThisAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PrivateThisAccess] = Some(value)
      |      override def number: _root_.scala.Int = 2
      |    }
      |    @SerialVersionUID(0L)
      |    final case class PrivateWithinAccess(value: scala.meta.internal.semanticdb.PrivateWithinAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.PrivateWithinAccess
      |      override def isPrivateWithinAccess: _root_.scala.Boolean = true
      |      override def privateWithinAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PrivateWithinAccess] = Some(value)
      |      override def number: _root_.scala.Int = 3
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ProtectedAccess(value: scala.meta.internal.semanticdb.ProtectedAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ProtectedAccess
      |      override def isProtectedAccess: _root_.scala.Boolean = true
      |      override def protectedAccess: _root_.scala.Option[scala.meta.internal.semanticdb.ProtectedAccess] = Some(value)
      |      override def number: _root_.scala.Int = 4
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ProtectedThisAccess(value: scala.meta.internal.semanticdb.ProtectedThisAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ProtectedThisAccess
      |      override def isProtectedThisAccess: _root_.scala.Boolean = true
      |      override def protectedThisAccess: _root_.scala.Option[scala.meta.internal.semanticdb.ProtectedThisAccess] = Some(value)
      |      override def number: _root_.scala.Int = 5
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ProtectedWithinAccess(value: scala.meta.internal.semanticdb.ProtectedWithinAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ProtectedWithinAccess
      |      override def isProtectedWithinAccess: _root_.scala.Boolean = true
      |      override def protectedWithinAccess: _root_.scala.Option[scala.meta.internal.semanticdb.ProtectedWithinAccess] = Some(value)
      |      override def number: _root_.scala.Int = 6
      |    }
      |    @SerialVersionUID(0L)
      |    final case class PublicAccess(value: scala.meta.internal.semanticdb.PublicAccess) extends scala.meta.internal.semanticdb.AccessMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.PublicAccess
      |      override def isPublicAccess: _root_.scala.Boolean = true
      |      override def publicAccess: _root_.scala.Option[scala.meta.internal.semanticdb.PublicAccess] = Some(value)
      |      override def number: _root_.scala.Int = 7
      |    }
      |  }
      |  implicit class AccessMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.AccessMessage]) """.stripMargin) + new String(s"""|extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.AccessMessage](_l) {
      |    def privateAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PrivateAccess] = field(_.getPrivateAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateAccess(f_)))
      |    def privateThisAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PrivateThisAccess] = field(_.getPrivateThisAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateThisAccess(f_)))
      |    def privateWithinAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PrivateWithinAccess] = field(_.getPrivateWithinAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PrivateWithinAccess(f_)))
      |    def protectedAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ProtectedAccess] = field(_.getProtectedAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedAccess(f_)))
      |    def protectedThisAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ProtectedThisAccess] = field(_.getProtectedThisAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedThisAccess(f_)))
      |    def protectedWithinAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ProtectedWithinAccess] = field(_.getProtectedWithinAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.ProtectedWithinAccess(f_)))
      |    def publicAccess: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PublicAccess] = field(_.getPublicAccess)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.AccessMessage.SealedValue.PublicAccess(f_)))
      |    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.AccessMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
      |  }
      |  final val PRIVATE_ACCESS_FIELD_NUMBER = 1
      |  final val PRIVATE_THIS_ACCESS_FIELD_NUMBER = 2
      |  final val PRIVATE_WITHIN_ACCESS_FIELD_NUMBER = 3
      |  final val PROTECTED_ACCESS_FIELD_NUMBER = 4
      |  final val PROTECTED_THIS_ACCESS_FIELD_NUMBER = 5
      |  final val PROTECTED_WITHIN_ACCESS_FIELD_NUMBER = 6
      |  final val PUBLIC_ACCESS_FIELD_NUMBER = 7
      |  def of(
      |    sealedValue: scala.meta.internal.semanticdb.AccessMessage.SealedValue
      |  ): _root_.scala.meta.internal.semanticdb.AccessMessage = _root_.scala.meta.internal.semanticdb.AccessMessage(
      |    sealedValue
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.Access])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class PrivateAccess(
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.lenses.Updatable[PrivateAccess] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.PrivateAccess.type = scala.meta.internal.semanticdb.PrivateAccess
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.PrivateAccess])
      |}
      |
      |object PrivateAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateAccess] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.PrivateAccess = {
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.PrivateAccess(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.PrivateAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.PrivateAccess(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(42)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(42)
      |  """.stripMargin) + new String(s"""|def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.PrivateAccess(
      |  )
      |  implicit class PrivateAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PrivateAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.PrivateAccess](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.PrivateAccess = _root_.scala.meta.internal.semanticdb.PrivateAccess(
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateAccess])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class PrivateThisAccess(
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.lenses.Updatable[PrivateThisAccess] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.PrivateThisAccess.type = scala.meta.internal.semanticdb.PrivateThisAccess
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.PrivateThisAccess])
      |}
      |
      |object PrivateThisAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateThisAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateThisAccess] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.PrivateThisAccess = {
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.PrivateThisAccess(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.PrivateThisAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.PrivateThisAccess(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(43)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(43)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.PrivateThisAccess(
      |  )
      |  implicit class PrivateThisAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PrivateThisAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.PrivateThisAccess](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.PrivateThisAccess = _root_.scala.meta.internal.semanticdb.PrivateThisAccess(
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateThisAccess])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class PrivateWithinAccess(
      |    symbol: _root_.scala.Predef.String = ""
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.lenses.Updatable[PrivateWithinAccess] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = symbol
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized""".stripMargin) + new String(s"""|
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = symbol
      |        if (!__v.isEmpty) {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |    }
      |    def withSymbol(__v: _root_.scala.Predef.String): PrivateWithinAccess = copy(symbol = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(symbol)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.PrivateWithinAccess.type = scala.meta.internal.semanticdb.PrivateWithinAccess
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.PrivateWithinAccess])
      |}
      |
      |object PrivateWithinAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateWithinAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateWithinAccess] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.PrivateWithinAccess = {
      |    var __symbol: _root_.scala.Predef.String = ""
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __symbol = _input__.readStringRequireUtf8()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.PrivateWithinAccess(
      |        symbol = __symbol
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.PrivateWithinAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.PrivateWithinAccess(
      |        symbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(44)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(44)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.PrivateWithinAccess(
      |    symbol = ""
      |  )
      |  implicit class PrivateWithinAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PrivateWithinAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.PrivateWithinAccess](_l) {
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |  }
      |  final val SYMBOL_FIELD_NUMBER = 1
      |  def of(
      |    symbol: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.PrivateWithinAccess = _root_.scala.meta.internal.semanticdb.PrivateWithinAccess(
      |    symbol
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.PrivateWithinAccess])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ProtectedAccess(
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.lenses.Updatable[ProtectedAccess] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def""".stripMargin) + new String(s"""| companion: scala.meta.internal.semanticdb.ProtectedAccess.type = scala.meta.internal.semanticdb.ProtectedAccess
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.ProtectedAccess])
      |}
      |
      |object ProtectedAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedAccess] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ProtectedAccess = {
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ProtectedAccess(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ProtectedAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ProtectedAccess(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(45)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(45)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ProtectedAccess(
      |  )
      |  implicit class ProtectedAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ProtectedAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ProtectedAccess](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.ProtectedAccess = _root_.scala.meta.internal.semanticdb.ProtectedAccess(
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedAccess])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ProtectedThisAccess(
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.lenses.Updatable[ProtectedThisAccess] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.ProtectedThisAccess.type = scala.meta.internal.semanticdb.ProtectedThisAccess
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.ProtectedThisAccess])
      |}
      |
      |object ProtectedThisAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedThisAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedThisAccess] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ProtectedThisAccess = {
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ProtectedThisAccess(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ProtectedThisAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ProtectedThisAccess(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(46)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(46)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError""".stripMargin) + new String(s"""|(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ProtectedThisAccess(
      |  )
      |  implicit class ProtectedThisAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ProtectedThisAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ProtectedThisAccess](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.ProtectedThisAccess = _root_.scala.meta.internal.semanticdb.ProtectedThisAccess(
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedThisAccess])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ProtectedWithinAccess(
      |    symbol: _root_.scala.Predef.String = ""
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.lenses.Updatable[ProtectedWithinAccess] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = symbol
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = symbol
      |        if (!__v.isEmpty) {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |    }
      |    def withSymbol(__v: _root_.scala.Predef.String): ProtectedWithinAccess = copy(symbol = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(symbol)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.ProtectedWithinAccess.type = scala.meta.internal.semanticdb.ProtectedWithinAccess
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.ProtectedWithinAccess])
      |}
      |
      |object ProtectedWithinAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedWithinAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedWithinAccess] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ProtectedWithinAccess = {
      |    var __symbol: _root_.scala.Predef.String = ""
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __symbol = _input__.readStringRequireUtf8()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ProtectedWithinAccess(
      |        symbol = __symbol
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ProtectedWithinAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ProtectedWithinAccess(
      |        symbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(47)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(47)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.sc""".stripMargin) + new String(s"""|ala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ProtectedWithinAccess(
      |    symbol = ""
      |  )
      |  implicit class ProtectedWithinAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ProtectedWithinAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ProtectedWithinAccess](_l) {
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |  }
      |  final val SYMBOL_FIELD_NUMBER = 1
      |  def of(
      |    symbol: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.ProtectedWithinAccess = _root_.scala.meta.internal.semanticdb.ProtectedWithinAccess(
      |    symbol
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.ProtectedWithinAccess])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class PublicAccess(
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Access.NonEmpty with scalapb.lenses.Updatable[PublicAccess] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.PublicAccess.type = scala.meta.internal.semanticdb.PublicAccess
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.PublicAccess])
      |}
      |
      |object PublicAccess extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PublicAccess] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.PublicAccess] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.PublicAccess = {
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.PublicAccess(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.PublicAccess] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.PublicAccess(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(48)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(48)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.PublicAccess(
      |  )
      |  implicit class PublicAccessLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.PublicAccess]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.PublicAccess](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.PublicAccess = _root_.scala.meta.internal.semanticdb.PublicAccess(
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.PublicAccess])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Annotation.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Annotation(
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Annotation] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toBase(tpe)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toBase(tpe)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): Annotation = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.Annotation.type = scala.meta.internal.semanticdb.Annotation
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.Annotation])
      |}
      |
      |object Annotation extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Annotation] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Annotation] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Annotation = {
      |    var __tpe: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __tpe = _root_.scala.Some(__tpe.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.Annotation(
      |        tpe = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toCustom(__tpe.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Annotation] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Annotation(
      |        tpe = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(40)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(40)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      | """.stripMargin) + new String(s"""|     case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Annotation(
      |    tpe = scala.meta.internal.semanticdb.Annotation._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class AnnotationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Annotation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Annotation](_l) {
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val TPE_FIELD_NUMBER = 1
      |  @transient
      |  private[semanticdb] val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.Annotation = _root_.scala.meta.internal.semanticdb.Annotation(
      |    tpe
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.Annotation])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Constant.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed trait Constant extends scalapb.GeneratedSealedOneof {
      |  type MessageType = scala.meta.internal.semanticdb.ConstantMessage
      |  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Constant.Empty.type]
      |  final def isDefined = !isEmpty
      |  final def asMessage: scala.meta.internal.semanticdb.ConstantMessage = scala.meta.internal.semanticdb.Constant.ConstantTypeMapper.toBase(this)
      |  final def asNonEmpty: Option[scala.meta.internal.semanticdb.Constant.NonEmpty] = if (isEmpty) None else Some(this.asInstanceOf[scala.meta.internal.semanticdb.Constant.NonEmpty])
      |}
      |
      |object Constant {
      |  case object Empty extends scala.meta.internal.semanticdb.Constant
      |  
      |  sealed trait NonEmpty extends scala.meta.internal.semanticdb.Constant
      |  def defaultInstance: scala.meta.internal.semanticdb.Constant = Empty
      |  
      |  implicit val ConstantTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant] {
      |    override def toCustom(__base: scala.meta.internal.semanticdb.ConstantMessage): scala.meta.internal.semanticdb.Constant = __base.sealedValue match {
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant => __v.value
      |      case __v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant => __v.value
      |      case scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty => Empty
      |    }
      |    override def toBase(__custom: scala.meta.internal.semanticdb.Constant): scala.meta.internal.semanticdb.ConstantMessage = scala.meta.internal.semanticdb.ConstantMessage(__custom match {
      |      case __v: scala.meta.internal.semanticdb.UnitConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.BooleanConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.ByteConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.ShortConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.CharConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.IntConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.LongConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.FloatConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.DoubleConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.StringConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(__v)
      |      case __v: scala.meta.internal.semanticdb.NullConstant => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant(__v)
      |      case Empty => scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty
      |    })
      |  }
      |}
      |@SerialVersionUID(0L)
      |final case class ConstantMessage(
      |    sealedValue: scala.meta.internal.semanticdb.ConstantMessage.SealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ConstantMessage] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (sealedValue.unitConstant.isDefined) {
      |        val __value = sealedValue.unitCon""".stripMargin) + new String(s"""|stant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.booleanConstant.isDefined) {
      |        val __value = sealedValue.booleanConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.byteConstant.isDefined) {
      |        val __value = sealedValue.byteConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.shortConstant.isDefined) {
      |        val __value = sealedValue.shortConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.charConstant.isDefined) {
      |        val __value = sealedValue.charConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.intConstant.isDefined) {
      |        val __value = sealedValue.intConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.longConstant.isDefined) {
      |        val __value = sealedValue.longConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.floatConstant.isDefined) {
      |        val __value = sealedValue.floatConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.doubleConstant.isDefined) {
      |        val __value = sealedValue.doubleConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.stringConstant.isDefined) {
      |        val __value = sealedValue.stringConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.nullConstant.isDefined) {
      |        val __value = sealedValue.nullConstant.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      sealedValue.unitConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.booleanConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.byteConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.shortConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(4, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.charConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(5, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.intConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(6, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.longConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(7, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.floatConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(8, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.doubleConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(9, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.stringConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(10, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };""".stripMargin) + new String(s"""|      sealedValue.nullConstant.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(11, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def getUnitConstant: scala.meta.internal.semanticdb.UnitConstant = sealedValue.unitConstant.getOrElse(scala.meta.internal.semanticdb.UnitConstant.defaultInstance)
      |    def withUnitConstant(__v: scala.meta.internal.semanticdb.UnitConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(__v))
      |    def getBooleanConstant: scala.meta.internal.semanticdb.BooleanConstant = sealedValue.booleanConstant.getOrElse(scala.meta.internal.semanticdb.BooleanConstant.defaultInstance)
      |    def withBooleanConstant(__v: scala.meta.internal.semanticdb.BooleanConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(__v))
      |    def getByteConstant: scala.meta.internal.semanticdb.ByteConstant = sealedValue.byteConstant.getOrElse(scala.meta.internal.semanticdb.ByteConstant.defaultInstance)
      |    def withByteConstant(__v: scala.meta.internal.semanticdb.ByteConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(__v))
      |    def getShortConstant: scala.meta.internal.semanticdb.ShortConstant = sealedValue.shortConstant.getOrElse(scala.meta.internal.semanticdb.ShortConstant.defaultInstance)
      |    def withShortConstant(__v: scala.meta.internal.semanticdb.ShortConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(__v))
      |    def getCharConstant: scala.meta.internal.semanticdb.CharConstant = sealedValue.charConstant.getOrElse(scala.meta.internal.semanticdb.CharConstant.defaultInstance)
      |    def withCharConstant(__v: scala.meta.internal.semanticdb.CharConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(__v))
      |    def getIntConstant: scala.meta.internal.semanticdb.IntConstant = sealedValue.intConstant.getOrElse(scala.meta.internal.semanticdb.IntConstant.defaultInstance)
      |    def withIntConstant(__v: scala.meta.internal.semanticdb.IntConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(__v))
      |    def getLongConstant: scala.meta.internal.semanticdb.LongConstant = sealedValue.longConstant.getOrElse(scala.meta.internal.semanticdb.LongConstant.defaultInstance)
      |    def withLongConstant(__v: scala.meta.internal.semanticdb.LongConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(__v))
      |    def getFloatConstant: scala.meta.internal.semanticdb.FloatConstant = sealedValue.floatConstant.getOrElse(scala.meta.internal.semanticdb.FloatConstant.defaultInstance)
      |    def withFloatConstant(__v: scala.meta.internal.semanticdb.FloatConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(__v))
      |    def getDoubleConstant: scala.meta.internal.semanticdb.DoubleConstant = sealedValue.doubleConstant.getOrElse(scala.meta.internal.semanticdb.DoubleConstant.defaultInstance)
      |    def withDoubleConstant(__v: scala.meta.internal.semanticdb.DoubleConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(__v))
      |    def getStringConstant: scala.meta.internal.semanticdb.StringConstant = sealedValue.stringConstant.getOrElse(scala.meta.internal.semanticdb.StringConstant.defaultInstance)
      |    def withStringConstant(__v: scala.meta.internal.semanticdb.StringConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(__v))
      |    def getNullConstant: scala.meta.internal.semanticdb.NullConstant = sealedValue.nullConstant.getOrElse(scala.meta.internal.semanticdb.NullConstant.defaultInstance)
      |    def withNullConstant(__v: scala.meta.internal.semanticdb.NullConstant): ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant(__v))
      |    def clearSealedValue: ConstantMessage = copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty)
      |    def withSealedValue(__v: scala.meta.internal.semanticdb.ConstantMessage.SealedValue): ConstantMessage = copy(sealedValue = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.unitConstant.orNull
      |        case 2 => sealedValue.booleanConstant.orNull
      |        case 3 => sealedValue.byteConstant.orNull
      |        case 4 => sealedValue.shortConstant.orNull
      |        case 5 => sealedValue.charConstant.orNull
      |        case 6 => sealedValue.intConstant.orNull
      |        case 7 => sealedValue.longConstant.orNull
      |        case 8 => sealedValue.floatConstant.orNull
      | """.stripMargin) + new String(s"""|       case 9 => sealedValue.doubleConstant.orNull
      |        case 10 => sealedValue.stringConstant.orNull
      |        case 11 => sealedValue.nullConstant.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.unitConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => sealedValue.booleanConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 3 => sealedValue.byteConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 4 => sealedValue.shortConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 5 => sealedValue.charConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 6 => sealedValue.intConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 7 => sealedValue.longConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 8 => sealedValue.floatConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 9 => sealedValue.doubleConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 10 => sealedValue.stringConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 11 => sealedValue.nullConstant.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.ConstantMessage.type = scala.meta.internal.semanticdb.ConstantMessage
      |    def toConstant: scala.meta.internal.semanticdb.Constant = scala.meta.internal.semanticdb.Constant.ConstantTypeMapper.toCustom(this)
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.Constant])
      |}
      |
      |object ConstantMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ConstantMessage] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ConstantMessage] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ConstantMessage = {
      |    var __sealedValue: scala.meta.internal.semanticdb.ConstantMessage.SealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(__sealedValue.unitConstant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.UnitConstant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(__sealedValue.booleanConstant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.BooleanConstant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 26 =>
      |          __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(__sealedValue.byteConstant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ByteConstant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 34 =>
      |          __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(__sealedValue.shortConstant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ShortConstant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 42 =>
      |          __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(__sealedValue.charConstant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.CharConstant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 50 =>
      |          __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(__sealedValue.intConstant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.IntConstant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 58 =>
      |          __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(__sealedValue.longConstant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.LongConstant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 66 =>
      |          __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(__sealedValue.floatConstant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.""".stripMargin) + new String(s"""|internal.semanticdb.FloatConstant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 74 =>
      |          __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(__sealedValue.doubleConstant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.DoubleConstant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 82 =>
      |          __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(__sealedValue.stringConstant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.StringConstant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 90 =>
      |          __sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant(__sealedValue.nullConstant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.NullConstant](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ConstantMessage(
      |        sealedValue = __sealedValue
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ConstantMessage] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ConstantMessage(
      |        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.UnitConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(_))
      |            .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.BooleanConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(_)))
      |            .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ByteConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(_)))
      |            .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ShortConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(_)))
      |            .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.CharConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(_)))
      |            .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.IntConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(_)))
      |            .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.LongConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(_)))
      |            .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.FloatConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(_)))
      |            .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.DoubleConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(_)))
      |            .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.StringConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(_)))
      |            .orElse[scala.meta.internal.semanticdb.ConstantMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.NullConstant]]).map(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant(_)))
      |            .getOrElse(scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _roo""".stripMargin) + new String(s"""|t_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(21)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(21)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.UnitConstant
      |      case 2 => __out = scala.meta.internal.semanticdb.BooleanConstant
      |      case 3 => __out = scala.meta.internal.semanticdb.ByteConstant
      |      case 4 => __out = scala.meta.internal.semanticdb.ShortConstant
      |      case 5 => __out = scala.meta.internal.semanticdb.CharConstant
      |      case 6 => __out = scala.meta.internal.semanticdb.IntConstant
      |      case 7 => __out = scala.meta.internal.semanticdb.LongConstant
      |      case 8 => __out = scala.meta.internal.semanticdb.FloatConstant
      |      case 9 => __out = scala.meta.internal.semanticdb.DoubleConstant
      |      case 10 => __out = scala.meta.internal.semanticdb.StringConstant
      |      case 11 => __out = scala.meta.internal.semanticdb.NullConstant
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ConstantMessage(
      |    sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.Empty
      |  )
      |  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
      |    def isEmpty: _root_.scala.Boolean = false
      |    def isDefined: _root_.scala.Boolean = true
      |    def isUnitConstant: _root_.scala.Boolean = false
      |    def isBooleanConstant: _root_.scala.Boolean = false
      |    def isByteConstant: _root_.scala.Boolean = false
      |    def isShortConstant: _root_.scala.Boolean = false
      |    def isCharConstant: _root_.scala.Boolean = false
      |    def isIntConstant: _root_.scala.Boolean = false
      |    def isLongConstant: _root_.scala.Boolean = false
      |    def isFloatConstant: _root_.scala.Boolean = false
      |    def isDoubleConstant: _root_.scala.Boolean = false
      |    def isStringConstant: _root_.scala.Boolean = false
      |    def isNullConstant: _root_.scala.Boolean = false
      |    def unitConstant: _root_.scala.Option[scala.meta.internal.semanticdb.UnitConstant] = _root_.scala.None
      |    def booleanConstant: _root_.scala.Option[scala.meta.internal.semanticdb.BooleanConstant] = _root_.scala.None
      |    def byteConstant: _root_.scala.Option[scala.meta.internal.semanticdb.ByteConstant] = _root_.scala.None
      |    def shortConstant: _root_.scala.Option[scala.meta.internal.semanticdb.ShortConstant] = _root_.scala.None
      |    def charConstant: _root_.scala.Option[scala.meta.internal.semanticdb.CharConstant] = _root_.scala.None
      |    def intConstant: _root_.scala.Option[scala.meta.internal.semanticdb.IntConstant] = _root_.scala.None
      |    def longConstant: _root_.scala.Option[scala.meta.internal.semanticdb.LongConstant] = _root_.scala.None
      |    def floatConstant: _root_.scala.Option[scala.meta.internal.semanticdb.FloatConstant] = _root_.scala.None
      |    def doubleConstant: _root_.scala.Option[scala.meta.internal.semanticdb.DoubleConstant] = _root_.scala.None
      |    def stringConstant: _root_.scala.Option[scala.meta.internal.semanticdb.StringConstant] = _root_.scala.None
      |    def nullConstant: _root_.scala.Option[scala.meta.internal.semanticdb.NullConstant] = _root_.scala.None
      |  }
      |  object SealedValue {
      |    @SerialVersionUID(0L)
      |    case object Empty extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = _root_.scala.Nothing
      |      override def isEmpty: _root_.scala.Boolean = true
      |      override def isDefined: _root_.scala.Boolean = false
      |      override def number: _root_.scala.Int = 0
      |      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      |    }
      |  
      |    @SerialVersionUID(0L)
      |    final case class UnitConstant(value: scala.meta.internal.semanticdb.UnitConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.UnitConstant
      |      override def isUnitConstant: _root_.scala.Boolean = true
      |      override def unitConstant: _root_.scala.Option[scala.meta.internal.semanticdb.UnitConstant] = Some(value)
      |      override def number: _root_.scala.Int = 1
      |    }
      |    @SerialVersionUID(0L)
      |    final case class BooleanConstant(value: scala.meta.internal.semanticdb.BooleanConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.BooleanConstant
      |      override def isBooleanConstant: _root_.scala.Boolean = true
      |      override def booleanConstant: _root_.scala.Option[scala.meta.internal.semanticdb.BooleanConstant] = Some(value)
      |      ov""".stripMargin) + new String(s"""|erride def number: _root_.scala.Int = 2
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ByteConstant(value: scala.meta.internal.semanticdb.ByteConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ByteConstant
      |      override def isByteConstant: _root_.scala.Boolean = true
      |      override def byteConstant: _root_.scala.Option[scala.meta.internal.semanticdb.ByteConstant] = Some(value)
      |      override def number: _root_.scala.Int = 3
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ShortConstant(value: scala.meta.internal.semanticdb.ShortConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ShortConstant
      |      override def isShortConstant: _root_.scala.Boolean = true
      |      override def shortConstant: _root_.scala.Option[scala.meta.internal.semanticdb.ShortConstant] = Some(value)
      |      override def number: _root_.scala.Int = 4
      |    }
      |    @SerialVersionUID(0L)
      |    final case class CharConstant(value: scala.meta.internal.semanticdb.CharConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.CharConstant
      |      override def isCharConstant: _root_.scala.Boolean = true
      |      override def charConstant: _root_.scala.Option[scala.meta.internal.semanticdb.CharConstant] = Some(value)
      |      override def number: _root_.scala.Int = 5
      |    }
      |    @SerialVersionUID(0L)
      |    final case class IntConstant(value: scala.meta.internal.semanticdb.IntConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.IntConstant
      |      override def isIntConstant: _root_.scala.Boolean = true
      |      override def intConstant: _root_.scala.Option[scala.meta.internal.semanticdb.IntConstant] = Some(value)
      |      override def number: _root_.scala.Int = 6
      |    }
      |    @SerialVersionUID(0L)
      |    final case class LongConstant(value: scala.meta.internal.semanticdb.LongConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.LongConstant
      |      override def isLongConstant: _root_.scala.Boolean = true
      |      override def longConstant: _root_.scala.Option[scala.meta.internal.semanticdb.LongConstant] = Some(value)
      |      override def number: _root_.scala.Int = 7
      |    }
      |    @SerialVersionUID(0L)
      |    final case class FloatConstant(value: scala.meta.internal.semanticdb.FloatConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.FloatConstant
      |      override def isFloatConstant: _root_.scala.Boolean = true
      |      override def floatConstant: _root_.scala.Option[scala.meta.internal.semanticdb.FloatConstant] = Some(value)
      |      override def number: _root_.scala.Int = 8
      |    }
      |    @SerialVersionUID(0L)
      |    final case class DoubleConstant(value: scala.meta.internal.semanticdb.DoubleConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.DoubleConstant
      |      override def isDoubleConstant: _root_.scala.Boolean = true
      |      override def doubleConstant: _root_.scala.Option[scala.meta.internal.semanticdb.DoubleConstant] = Some(value)
      |      override def number: _root_.scala.Int = 9
      |    }
      |    @SerialVersionUID(0L)
      |    final case class StringConstant(value: scala.meta.internal.semanticdb.StringConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.StringConstant
      |      override def isStringConstant: _root_.scala.Boolean = true
      |      override def stringConstant: _root_.scala.Option[scala.meta.internal.semanticdb.StringConstant] = Some(value)
      |      override def number: _root_.scala.Int = 10
      |    }
      |    @SerialVersionUID(0L)
      |    final case class NullConstant(value: scala.meta.internal.semanticdb.NullConstant) extends scala.meta.internal.semanticdb.ConstantMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.NullConstant
      |      override def isNullConstant: _root_.scala.Boolean = true
      |      override def nullConstant: _root_.scala.Option[scala.meta.internal.semanticdb.NullConstant] = Some(value)
      |      override def number: _root_.scala.Int = 11
      |    }
      |  }
      |  implicit class ConstantMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ConstantMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ConstantMessage](_l) {
      |    def unitConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UnitConstant] = field(_.getUnitConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.UnitConstant(f_)))
      |    def booleanConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.BooleanConstant] = field(_.getBooleanConstant)((c_, """.stripMargin) + new String(s"""|f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.BooleanConstant(f_)))
      |    def byteConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ByteConstant] = field(_.getByteConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ByteConstant(f_)))
      |    def shortConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ShortConstant] = field(_.getShortConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.ShortConstant(f_)))
      |    def charConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.CharConstant] = field(_.getCharConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.CharConstant(f_)))
      |    def intConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IntConstant] = field(_.getIntConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.IntConstant(f_)))
      |    def longConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.LongConstant] = field(_.getLongConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.LongConstant(f_)))
      |    def floatConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.FloatConstant] = field(_.getFloatConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.FloatConstant(f_)))
      |    def doubleConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.DoubleConstant] = field(_.getDoubleConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.DoubleConstant(f_)))
      |    def stringConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.StringConstant] = field(_.getStringConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.StringConstant(f_)))
      |    def nullConstant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.NullConstant] = field(_.getNullConstant)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.ConstantMessage.SealedValue.NullConstant(f_)))
      |    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ConstantMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
      |  }
      |  final val UNIT_CONSTANT_FIELD_NUMBER = 1
      |  final val BOOLEAN_CONSTANT_FIELD_NUMBER = 2
      |  final val BYTE_CONSTANT_FIELD_NUMBER = 3
      |  final val SHORT_CONSTANT_FIELD_NUMBER = 4
      |  final val CHAR_CONSTANT_FIELD_NUMBER = 5
      |  final val INT_CONSTANT_FIELD_NUMBER = 6
      |  final val LONG_CONSTANT_FIELD_NUMBER = 7
      |  final val FLOAT_CONSTANT_FIELD_NUMBER = 8
      |  final val DOUBLE_CONSTANT_FIELD_NUMBER = 9
      |  final val STRING_CONSTANT_FIELD_NUMBER = 10
      |  final val NULL_CONSTANT_FIELD_NUMBER = 11
      |  def of(
      |    sealedValue: scala.meta.internal.semanticdb.ConstantMessage.SealedValue
      |  ): _root_.scala.meta.internal.semanticdb.ConstantMessage = _root_.scala.meta.internal.semanticdb.ConstantMessage(
      |    sealedValue
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.Constant])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class UnitConstant(
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.lenses.Updatable[UnitConstant] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.UnitConstant.type = scala.meta.internal.semanticdb.UnitConstant
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.UnitConstant])
      |}
      |
      |object UnitConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnitConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnitConstant] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.UnitConstant = {
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.UnitConstant(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.UnitConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descri""".stripMargin) + new String(s"""|ptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.UnitConstant(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(22)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(22)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.UnitConstant(
      |  )
      |  implicit class UnitConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UnitConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.UnitConstant](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.UnitConstant = _root_.scala.meta.internal.semanticdb.UnitConstant(
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnitConstant])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class BooleanConstant(
      |    value: _root_.scala.Boolean = false
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.lenses.Updatable[BooleanConstant] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != false) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != false) {
      |          _output__.writeBool(1, __v)
      |        }
      |      };
      |    }
      |    def withValue(__v: _root_.scala.Boolean): BooleanConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != false) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PBoolean(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.BooleanConstant.type = scala.meta.internal.semanticdb.BooleanConstant
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.BooleanConstant])
      |}
      |
      |object BooleanConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.BooleanConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.BooleanConstant] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.BooleanConstant = {
      |    var __value: _root_.scala.Boolean = false
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 8 =>
      |          __value = _input__.readBool()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.BooleanConstant(
      |        value = __value
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.BooleanConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.BooleanConstant(
      |        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Desc""".stripMargin) + new String(s"""|riptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(23)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(23)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.BooleanConstant(
      |    value = false
      |  )
      |  implicit class BooleanConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.BooleanConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.BooleanConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Boolean
      |  ): _root_.scala.meta.internal.semanticdb.BooleanConstant = _root_.scala.meta.internal.semanticdb.BooleanConstant(
      |    value
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.BooleanConstant])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ByteConstant(
      |    value: _root_.scala.Int = 0
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.lenses.Updatable[ByteConstant] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0) {
      |          _output__.writeInt32(1, __v)
      |        }
      |      };
      |    }
      |    def withValue(__v: _root_.scala.Int): ByteConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PInt(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.ByteConstant.type = scala.meta.internal.semanticdb.ByteConstant
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.ByteConstant])
      |}
      |
      |object ByteConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByteConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByteConstant] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ByteConstant = {
      |    var __value: _root_.scala.Int = 0
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 8 =>
      |          __value = _input__.readInt32()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ByteConstant(
      |        value = __value
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ByteConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ByteConstant(
      |        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(24)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(24)
      |  def messageCompanionForFieldNumbe""".stripMargin) + new String(s"""|r(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ByteConstant(
      |    value = 0
      |  )
      |  implicit class ByteConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ByteConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ByteConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Int
      |  ): _root_.scala.meta.internal.semanticdb.ByteConstant = _root_.scala.meta.internal.semanticdb.ByteConstant(
      |    value
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByteConstant])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ShortConstant(
      |    value: _root_.scala.Int = 0
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.lenses.Updatable[ShortConstant] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0) {
      |          _output__.writeInt32(1, __v)
      |        }
      |      };
      |    }
      |    def withValue(__v: _root_.scala.Int): ShortConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PInt(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.ShortConstant.type = scala.meta.internal.semanticdb.ShortConstant
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.ShortConstant])
      |}
      |
      |object ShortConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ShortConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ShortConstant] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ShortConstant = {
      |    var __value: _root_.scala.Int = 0
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 8 =>
      |          __value = _input__.readInt32()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ShortConstant(
      |        value = __value
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ShortConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ShortConstant(
      |        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(25)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(25)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] """.stripMargin) + new String(s"""|= Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ShortConstant(
      |    value = 0
      |  )
      |  implicit class ShortConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ShortConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ShortConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Int
      |  ): _root_.scala.meta.internal.semanticdb.ShortConstant = _root_.scala.meta.internal.semanticdb.ShortConstant(
      |    value
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.ShortConstant])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class CharConstant(
      |    value: _root_.scala.Int = 0
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.lenses.Updatable[CharConstant] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0) {
      |          _output__.writeInt32(1, __v)
      |        }
      |      };
      |    }
      |    def withValue(__v: _root_.scala.Int): CharConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PInt(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.CharConstant.type = scala.meta.internal.semanticdb.CharConstant
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.CharConstant])
      |}
      |
      |object CharConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.CharConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.CharConstant] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.CharConstant = {
      |    var __value: _root_.scala.Int = 0
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 8 =>
      |          __value = _input__.readInt32()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.CharConstant(
      |        value = __value
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.CharConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.CharConstant(
      |        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(26)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(26)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.CharConstant(
      |  """.stripMargin) + new String(s"""|  value = 0
      |  )
      |  implicit class CharConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.CharConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.CharConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Int
      |  ): _root_.scala.meta.internal.semanticdb.CharConstant = _root_.scala.meta.internal.semanticdb.CharConstant(
      |    value
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.CharConstant])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class IntConstant(
      |    value: _root_.scala.Int = 0
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.lenses.Updatable[IntConstant] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0) {
      |          _output__.writeInt32(1, __v)
      |        }
      |      };
      |    }
      |    def withValue(__v: _root_.scala.Int): IntConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PInt(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.IntConstant.type = scala.meta.internal.semanticdb.IntConstant
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.IntConstant])
      |}
      |
      |object IntConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntConstant] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.IntConstant = {
      |    var __value: _root_.scala.Int = 0
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 8 =>
      |          __value = _input__.readInt32()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.IntConstant(
      |        value = __value
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.IntConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.IntConstant(
      |        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(27)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(27)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.IntConstant(
      |    value = 0
      |  )
      |  implicit class IntConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IntConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.IntConstant](_l) {
      |    def value""".stripMargin) + new String(s"""|: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Int
      |  ): _root_.scala.meta.internal.semanticdb.IntConstant = _root_.scala.meta.internal.semanticdb.IntConstant(
      |    value
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntConstant])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class LongConstant(
      |    value: _root_.scala.Long = 0L
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.lenses.Updatable[LongConstant] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0L) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0L) {
      |          _output__.writeInt64(1, __v)
      |        }
      |      };
      |    }
      |    def withValue(__v: _root_.scala.Long): LongConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0L) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PLong(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.LongConstant.type = scala.meta.internal.semanticdb.LongConstant
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.LongConstant])
      |}
      |
      |object LongConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.LongConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.LongConstant] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.LongConstant = {
      |    var __value: _root_.scala.Long = 0L
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 8 =>
      |          __value = _input__.readInt64()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.LongConstant(
      |        value = __value
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.LongConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.LongConstant(
      |        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(28)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(28)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.LongConstant(
      |    value = 0L
      |  )
      |  implicit class LongConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.LongConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.LongConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Long
      |  ): _root_.scala.meta.internal.semanticdb.LongC""".stripMargin) + new String(s"""|onstant = _root_.scala.meta.internal.semanticdb.LongConstant(
      |    value
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.LongConstant])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class FloatConstant(
      |    value: _root_.scala.Float = 0.0f
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.lenses.Updatable[FloatConstant] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0.0f) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0.0f) {
      |          _output__.writeFloat(1, __v)
      |        }
      |      };
      |    }
      |    def withValue(__v: _root_.scala.Float): FloatConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0.0f) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PFloat(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.FloatConstant.type = scala.meta.internal.semanticdb.FloatConstant
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.FloatConstant])
      |}
      |
      |object FloatConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.FloatConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.FloatConstant] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.FloatConstant = {
      |    var __value: _root_.scala.Float = 0.0f
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 13 =>
      |          __value = _input__.readFloat()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.FloatConstant(
      |        value = __value
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.FloatConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.FloatConstant(
      |        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(29)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(29)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.FloatConstant(
      |    value = 0.0f
      |  )
      |  implicit class FloatConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.FloatConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.FloatConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Float
      |  ): _root_.scala.meta.internal.semanticdb.FloatConstant = _root_.scala.meta.internal.semanticdb.FloatConstant(
      |    value
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.FloatConstant])
      |}
      |
      |@Seri""".stripMargin) + new String(s"""|alVersionUID(0L)
      |final case class DoubleConstant(
      |    value: _root_.scala.Double = 0.0
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.lenses.Updatable[DoubleConstant] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (__value != 0.0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (__v != 0.0) {
      |          _output__.writeDouble(1, __v)
      |        }
      |      };
      |    }
      |    def withValue(__v: _root_.scala.Double): DoubleConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != 0.0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PDouble(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.DoubleConstant.type = scala.meta.internal.semanticdb.DoubleConstant
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.DoubleConstant])
      |}
      |
      |object DoubleConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.DoubleConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.DoubleConstant] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.DoubleConstant = {
      |    var __value: _root_.scala.Double = 0.0
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 9 =>
      |          __value = _input__.readDouble()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.DoubleConstant(
      |        value = __value
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.DoubleConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.DoubleConstant(
      |        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Double]).getOrElse(0.0)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(30)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(30)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.DoubleConstant(
      |    value = 0.0
      |  )
      |  implicit class DoubleConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.DoubleConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.DoubleConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Double
      |  ): _root_.scala.meta.internal.semanticdb.DoubleConstant = _root_.scala.meta.internal.semanticdb.DoubleConstant(
      |    value
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.DoubleConstant])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class StringConstant(
      |    value: _root_.scala.Predef.String = ""
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanti""".stripMargin) + new String(s"""|cdb.Constant.NonEmpty with scalapb.lenses.Updatable[StringConstant] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = value
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = value
      |        if (!__v.isEmpty) {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |    }
      |    def withValue(__v: _root_.scala.Predef.String): StringConstant = copy(value = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = value
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(value)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.StringConstant.type = scala.meta.internal.semanticdb.StringConstant
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.StringConstant])
      |}
      |
      |object StringConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.StringConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.StringConstant] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.StringConstant = {
      |    var __value: _root_.scala.Predef.String = ""
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __value = _input__.readStringRequireUtf8()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.StringConstant(
      |        value = __value
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.StringConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.StringConstant(
      |        value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(31)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(31)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.StringConstant(
      |    value = ""
      |  )
      |  implicit class StringConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.StringConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.StringConstant](_l) {
      |    def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |  }
      |  final val VALUE_FIELD_NUMBER = 1
      |  def of(
      |    value: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.StringConstant = _root_.scala.meta.internal.semanticdb.StringConstant(
      |    value
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.StringConstant])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class NullConstant(
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Constant.NonEmpty with scalapb.lenses.Updatable[NullConstant] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`:""".stripMargin) + new String(s"""| _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.NullConstant.type = scala.meta.internal.semanticdb.NullConstant
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.NullConstant])
      |}
      |
      |object NullConstant extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.NullConstant] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.NullConstant] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.NullConstant = {
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.NullConstant(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.NullConstant] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.NullConstant(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(32)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(32)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.NullConstant(
      |  )
      |  implicit class NullConstantLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.NullConstant]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.NullConstant](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticdb.NullConstant = _root_.scala.meta.internal.semanticdb.NullConstant(
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.NullConstant])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Diagnostic.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Diagnostic(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None,
      |    severity: scala.meta.internal.semanticdb.Diagnostic.Severity = scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY,
      |    message: _root_.scala.Predef.String = ""
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Diagnostic] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (range.isDefined) {
      |        val __value = range.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      
      |      {
      |        val __value = severity.value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = message
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      range.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = severity.value
      |        if (__v != 0) {
      |          _output__.writeEnum(2, __v)
      |        }
      |      };
      |      {
      |        val __v = message
      |        if (!__v.isEmpty) {
      |          _output__.writeString(3, __v)
      |        }
      |      };
      |    }
      |    def getRange: scala.meta.internal.semanticdb.Range = range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)
      |    def clearRange: Diagnostic = copy(range = _root_.scala.None)
      |    def withRange(__v: scala.meta.internal.semanticdb.Range): Diagnostic = copy(range = Option(__v))
      |    def withSeverity(__v: scala.meta.internal.semanticdb.Diagnostic.Severity): Diagnostic = copy(severity = __v)
      |    def withMessage(__v: _root_.scala.Predef.String): Diagnostic = copy(message = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => range.orNull
      |        case 2 => {
      |          val __t = severity.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |        case 3 => {
      |          val __t = message
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => _root_.scalapb.descriptors.PEnum(severity.scalaValueDescriptor)
      |        case 3 => _root_.scalapb.descriptors.PString(message)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.Diagnostic.type = scala.meta.internal.semanticdb.Diagnostic
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.Diagnostic])
      |}
      |
      |object Diagnostic extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Diagnostic] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Diagnostic] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Diagnostic = {
      |    var __range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None
      |    var __severity: scala.meta.internal.semanticdb.Diagnostic.Severity = scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY
      |    var __message: _root_.scala.Predef.String = ""
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __range = Option(__range.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Range](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 16 =>
      |          __severity = scala.meta.internal.semanticdb.Diagnostic.Severity.fromValue(_input__.readEnum())
      |        case 26 =>
      |          __message = _input__.readStringRequireUtf8()
      |   """.stripMargin) + new String(s"""|     case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.Diagnostic(
      |        range = __range,
      |        severity = __severity,
      |        message = __message
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Diagnostic] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Diagnostic(
      |        range = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Range]]),
      |        severity = scala.meta.internal.semanticdb.Diagnostic.Severity.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY.scalaValueDescriptor).number),
      |        message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(50)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(50)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Range
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      |    (__fieldNumber: @_root_.scala.unchecked) match {
      |      case 2 => scala.meta.internal.semanticdb.Diagnostic.Severity
      |    }
      |  }
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Diagnostic(
      |    range = _root_.scala.None,
      |    severity = scala.meta.internal.semanticdb.Diagnostic.Severity.UNKNOWN_SEVERITY,
      |    message = ""
      |  )
      |  sealed abstract class Severity(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
      |    type EnumType = Severity
      |    def isUnknownSeverity: _root_.scala.Boolean = false
      |    def isError: _root_.scala.Boolean = false
      |    def isWarning: _root_.scala.Boolean = false
      |    def isInformation: _root_.scala.Boolean = false
      |    def isHint: _root_.scala.Boolean = false
      |    def companion: _root_.scalapb.GeneratedEnumCompanion[Severity] = scala.meta.internal.semanticdb.Diagnostic.Severity
      |    final def asRecognized: _root_.scala.Option[scala.meta.internal.semanticdb.Diagnostic.Severity.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[scala.meta.internal.semanticdb.Diagnostic.Severity.Recognized])
      |  }
      |  
      |  object Severity extends _root_.scalapb.GeneratedEnumCompanion[Severity] {
      |    sealed trait Recognized extends Severity
      |    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Severity] = this
      |    
      |    @SerialVersionUID(0L)
      |    case object UNKNOWN_SEVERITY extends Severity(0) with Severity.Recognized {
      |      val index = 0
      |      val name = "UNKNOWN_SEVERITY"
      |      override def isUnknownSeverity: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object ERROR extends Severity(1) with Severity.Recognized {
      |      val index = 1
      |      val name = "ERROR"
      |      override def isError: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object WARNING extends Severity(2) with Severity.Recognized {
      |      val index = 2
      |      val name = "WARNING"
      |      override def isWarning: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object INFORMATION extends Severity(3) with Severity.Recognized {
      |      val index = 3
      |      val name = "INFORMATION"
      |      override def isInformation: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object HINT extends Severity(4) with Severity.Recognized {
      |      val index = 4
      |      val name = "HINT"
      |      override def isHint: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Severity(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
      |    lazy val values = scala.collection.immutable.Seq(UNKNOWN_SEVERITY, ERROR, WARNING, INFORMATION, HINT)
      |    def fromValue(__value: _root_.scala.Int): Severity = __value match {
      |      case 0 => UNKNOWN_SEVERITY
      |      case 1 => ERROR
      |      case 2 => WARNING
      |      case 3 => INFORMATION
      |      case 4 => HINT
      |      case __other => Unrecognized(__other)
      |    }
      |    def javaDescriptor: _root_.""".stripMargin) + new String(s"""|com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb.Diagnostic.javaDescriptor.getEnumTypes().get(0)
      |    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb.Diagnostic.scalaDescriptor.enums(0)
      |  }
      |  implicit class DiagnosticLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Diagnostic]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Diagnostic](_l) {
      |    def range: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
      |    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Range]] = field(_.range)((c_, f_) => c_.copy(range = f_))
      |    def severity: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Diagnostic.Severity] = field(_.severity)((c_, f_) => c_.copy(severity = f_))
      |    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
      |  }
      |  final val RANGE_FIELD_NUMBER = 1
      |  final val SEVERITY_FIELD_NUMBER = 2
      |  final val MESSAGE_FIELD_NUMBER = 3
      |  def of(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range],
      |    severity: scala.meta.internal.semanticdb.Diagnostic.Severity,
      |    message: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.Diagnostic = _root_.scala.meta.internal.semanticdb.Diagnostic(
      |    range,
      |    severity,
      |    message
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.Diagnostic])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Documentation.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Documentation(
      |    message: _root_.scala.Predef.String = "",
      |    format: scala.meta.internal.semanticdb.Documentation.Format = scala.meta.internal.semanticdb.Documentation.Format.HTML
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Documentation] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = message
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = format.value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = message
      |        if (!__v.isEmpty) {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |      {
      |        val __v = format.value
      |        if (__v != 0) {
      |          _output__.writeEnum(2, __v)
      |        }
      |      };
      |    }
      |    def withMessage(__v: _root_.scala.Predef.String): Documentation = copy(message = __v)
      |    def withFormat(__v: scala.meta.internal.semanticdb.Documentation.Format): Documentation = copy(format = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = message
      |          if (__t != "") __t else null
      |        }
      |        case 2 => {
      |          val __t = format.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(message)
      |        case 2 => _root_.scalapb.descriptors.PEnum(format.scalaValueDescriptor)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.Documentation.type = scala.meta.internal.semanticdb.Documentation
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.Documentation])
      |}
      |
      |object Documentation extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Documentation] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Documentation] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Documentation = {
      |    var __message: _root_.scala.Predef.String = ""
      |    var __format: scala.meta.internal.semanticdb.Documentation.Format = scala.meta.internal.semanticdb.Documentation.Format.HTML
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __message = _input__.readStringRequireUtf8()
      |        case 16 =>
      |          __format = scala.meta.internal.semanticdb.Documentation.Format.fromValue(_input__.readEnum())
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.Documentation(
      |        message = __message,
      |        format = __format
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Documentation] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Documentation(
      |        message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        format = scala.meta.internal.semanticdb.Documentation.Format.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.Documentation.Format.HTML.scalaValueDescriptor).number)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTy""".stripMargin) + new String(s"""|pes().get(39)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(39)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      |    (__fieldNumber: @_root_.scala.unchecked) match {
      |      case 2 => scala.meta.internal.semanticdb.Documentation.Format
      |    }
      |  }
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Documentation(
      |    message = "",
      |    format = scala.meta.internal.semanticdb.Documentation.Format.HTML
      |  )
      |  sealed abstract class Format(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
      |    type EnumType = Format
      |    def isHtml: _root_.scala.Boolean = false
      |    def isMarkdown: _root_.scala.Boolean = false
      |    def isJavadoc: _root_.scala.Boolean = false
      |    def isScaladoc: _root_.scala.Boolean = false
      |    def isKdoc: _root_.scala.Boolean = false
      |    def companion: _root_.scalapb.GeneratedEnumCompanion[Format] = scala.meta.internal.semanticdb.Documentation.Format
      |    final def asRecognized: _root_.scala.Option[scala.meta.internal.semanticdb.Documentation.Format.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[scala.meta.internal.semanticdb.Documentation.Format.Recognized])
      |  }
      |  
      |  object Format extends _root_.scalapb.GeneratedEnumCompanion[Format] {
      |    sealed trait Recognized extends Format
      |    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Format] = this
      |    
      |    @SerialVersionUID(0L)
      |    case object HTML extends Format(0) with Format.Recognized {
      |      val index = 0
      |      val name = "HTML"
      |      override def isHtml: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object MARKDOWN extends Format(1) with Format.Recognized {
      |      val index = 1
      |      val name = "MARKDOWN"
      |      override def isMarkdown: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object JAVADOC extends Format(2) with Format.Recognized {
      |      val index = 2
      |      val name = "JAVADOC"
      |      override def isJavadoc: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object SCALADOC extends Format(3) with Format.Recognized {
      |      val index = 3
      |      val name = "SCALADOC"
      |      override def isScaladoc: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object KDOC extends Format(4) with Format.Recognized {
      |      val index = 4
      |      val name = "KDOC"
      |      override def isKdoc: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Format(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
      |    lazy val values = scala.collection.immutable.Seq(HTML, MARKDOWN, JAVADOC, SCALADOC, KDOC)
      |    def fromValue(__value: _root_.scala.Int): Format = __value match {
      |      case 0 => HTML
      |      case 1 => MARKDOWN
      |      case 2 => JAVADOC
      |      case 3 => SCALADOC
      |      case 4 => KDOC
      |      case __other => Unrecognized(__other)
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb.Documentation.javaDescriptor.getEnumTypes().get(0)
      |    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb.Documentation.scalaDescriptor.enums(0)
      |  }
      |  implicit class DocumentationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Documentation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Documentation](_l) {
      |    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
      |    def format: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Documentation.Format] = field(_.format)((c_, f_) => c_.copy(format = f_))
      |  }
      |  final val MESSAGE_FIELD_NUMBER = 1
      |  final val FORMAT_FIELD_NUMBER = 2
      |  def of(
      |    message: _root_.scala.Predef.String,
      |    format: scala.meta.internal.semanticdb.Documentation.Format
      |  ): _root_.scala.meta.internal.semanticdb.Documentation = _root_.scala.meta.internal.semanticdb.Documentation(
      |    message,
      |    format
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.Documentation])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Language.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed abstract class Language(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
      |  type EnumType = Language
      |  def isUnknownLanguage: _root_.scala.Boolean = false
      |  def isScala: _root_.scala.Boolean = false
      |  def isJava: _root_.scala.Boolean = false
      |  def companion: _root_.scalapb.GeneratedEnumCompanion[Language] = scala.meta.internal.semanticdb.Language
      |  final def asRecognized: _root_.scala.Option[scala.meta.internal.semanticdb.Language.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[scala.meta.internal.semanticdb.Language.Recognized])
      |}
      |
      |object Language extends _root_.scalapb.GeneratedEnumCompanion[Language] {
      |  sealed trait Recognized extends Language
      |  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Language] = this
      |  
      |  @SerialVersionUID(0L)
      |  case object UNKNOWN_LANGUAGE extends Language(0) with Language.Recognized {
      |    val index = 0
      |    val name = "UNKNOWN_LANGUAGE"
      |    override def isUnknownLanguage: _root_.scala.Boolean = true
      |  }
      |  
      |  @SerialVersionUID(0L)
      |  case object SCALA extends Language(1) with Language.Recognized {
      |    val index = 1
      |    val name = "SCALA"
      |    override def isScala: _root_.scala.Boolean = true
      |  }
      |  
      |  @SerialVersionUID(0L)
      |  case object JAVA extends Language(2) with Language.Recognized {
      |    val index = 2
      |    val name = "JAVA"
      |    override def isJava: _root_.scala.Boolean = true
      |  }
      |  
      |  @SerialVersionUID(0L)
      |  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Language(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
      |  lazy val values = scala.collection.immutable.Seq(UNKNOWN_LANGUAGE, SCALA, JAVA)
      |  def fromValue(__value: _root_.scala.Int): Language = __value match {
      |    case 0 => UNKNOWN_LANGUAGE
      |    case 1 => SCALA
      |    case 2 => JAVA
      |    case __other => Unrecognized(__other)
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = SemanticdbProto.javaDescriptor.getEnumTypes().get(1)
      |  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = SemanticdbProto.scalaDescriptor.enums(1)
      |}""".stripMargin
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Location.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Location(
      |    uri: _root_.scala.Predef.String = "",
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Location] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = uri
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      if (range.isDefined) {
      |        val __value = range.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = uri
      |        if (!__v.isEmpty) {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |      range.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def withUri(__v: _root_.scala.Predef.String): Location = copy(uri = __v)
      |    def getRange: scala.meta.internal.semanticdb.Range = range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)
      |    def clearRange: Location = copy(range = _root_.scala.None)
      |    def withRange(__v: scala.meta.internal.semanticdb.Range): Location = copy(range = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = uri
      |          if (__t != "") __t else null
      |        }
      |        case 2 => range.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(uri)
      |        case 2 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.Location.type = scala.meta.internal.semanticdb.Location
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.Location])
      |}
      |
      |object Location extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Location] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Location] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Location = {
      |    var __uri: _root_.scala.Predef.String = ""
      |    var __range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __uri = _input__.readStringRequireUtf8()
      |        case 18 =>
      |          __range = Option(__range.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Range](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.Location(
      |        uri = __uri,
      |        range = __range
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Location] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Location(
      |        uri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        range = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Range]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(3)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbP""".stripMargin) + new String(s"""|roto.scalaDescriptor.messages(3)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 2 => __out = scala.meta.internal.semanticdb.Range
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Location(
      |    uri = "",
      |    range = _root_.scala.None
      |  )
      |  implicit class LocationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Location]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Location](_l) {
      |    def uri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.uri)((c_, f_) => c_.copy(uri = f_))
      |    def range: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
      |    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Range]] = field(_.range)((c_, f_) => c_.copy(range = f_))
      |  }
      |  final val URI_FIELD_NUMBER = 1
      |  final val RANGE_FIELD_NUMBER = 2
      |  def of(
      |    uri: _root_.scala.Predef.String,
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range]
      |  ): _root_.scala.meta.internal.semanticdb.Location = _root_.scala.meta.internal.semanticdb.Location(
      |    uri,
      |    range
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.Location])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Range.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Range(
      |    startLine: _root_.scala.Int = 0,
      |    startCharacter: _root_.scala.Int = 0,
      |    endLine: _root_.scala.Int = 0,
      |    endCharacter: _root_.scala.Int = 0
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Range] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = startLine
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = startCharacter
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = endLine
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = endCharacter
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = startLine
      |        if (__v != 0) {
      |          _output__.writeInt32(1, __v)
      |        }
      |      };
      |      {
      |        val __v = startCharacter
      |        if (__v != 0) {
      |          _output__.writeInt32(2, __v)
      |        }
      |      };
      |      {
      |        val __v = endLine
      |        if (__v != 0) {
      |          _output__.writeInt32(3, __v)
      |        }
      |      };
      |      {
      |        val __v = endCharacter
      |        if (__v != 0) {
      |          _output__.writeInt32(4, __v)
      |        }
      |      };
      |    }
      |    def withStartLine(__v: _root_.scala.Int): Range = copy(startLine = __v)
      |    def withStartCharacter(__v: _root_.scala.Int): Range = copy(startCharacter = __v)
      |    def withEndLine(__v: _root_.scala.Int): Range = copy(endLine = __v)
      |    def withEndCharacter(__v: _root_.scala.Int): Range = copy(endCharacter = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = startLine
      |          if (__t != 0) __t else null
      |        }
      |        case 2 => {
      |          val __t = startCharacter
      |          if (__t != 0) __t else null
      |        }
      |        case 3 => {
      |          val __t = endLine
      |          if (__t != 0) __t else null
      |        }
      |        case 4 => {
      |          val __t = endCharacter
      |          if (__t != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PInt(startLine)
      |        case 2 => _root_.scalapb.descriptors.PInt(startCharacter)
      |        case 3 => _root_.scalapb.descriptors.PInt(endLine)
      |        case 4 => _root_.scalapb.descriptors.PInt(endCharacter)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.Range.type = scala.meta.internal.semanticdb.Range
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.Range])
      |}
      |
      |object Range extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Range] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Range] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Range = {
      |    var __startLine: _root_.scala.Int = 0
      |    var __startCharacter: _root_.scala.Int = 0
      |    var __endLine: _root_.scala.Int = 0
      |    var __endCharacter: _root_.scala.Int = 0
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 8 =>
      |          __startLine = _input__.readInt32()
      |        case 16 =>
      |          __startCharacter = _input__.readInt32()
      |        case 24 =>
      |          __endLine = _input__.readInt32()
      |        case 32 =>
      |          __endCharacter = _input__.readInt32()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.Range(
      |        startLine = __startLine,
      |        startCharacter = __startCharacter,
      |        endLine = __endLine,
      |     """.stripMargin) + new String(s"""|   endCharacter = __endCharacter
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Range] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Range(
      |        startLine = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
      |        startCharacter = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
      |        endLine = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
      |        endCharacter = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(2)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(2)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Range(
      |    startLine = 0,
      |    startCharacter = 0,
      |    endLine = 0,
      |    endCharacter = 0
      |  )
      |  implicit class RangeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Range](_l) {
      |    def startLine: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.startLine)((c_, f_) => c_.copy(startLine = f_))
      |    def startCharacter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.startCharacter)((c_, f_) => c_.copy(startCharacter = f_))
      |    def endLine: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.endLine)((c_, f_) => c_.copy(endLine = f_))
      |    def endCharacter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.endCharacter)((c_, f_) => c_.copy(endCharacter = f_))
      |  }
      |  final val START_LINE_FIELD_NUMBER = 1
      |  final val START_CHARACTER_FIELD_NUMBER = 2
      |  final val END_LINE_FIELD_NUMBER = 3
      |  final val END_CHARACTER_FIELD_NUMBER = 4
      |  def of(
      |    startLine: _root_.scala.Int,
      |    startCharacter: _root_.scala.Int,
      |    endLine: _root_.scala.Int,
      |    endCharacter: _root_.scala.Int
      |  ): _root_.scala.meta.internal.semanticdb.Range = _root_.scala.meta.internal.semanticdb.Range(
      |    startLine,
      |    startCharacter,
      |    endLine,
      |    endCharacter
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.Range])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Schema.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed abstract class Schema(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
      |  type EnumType = Schema
      |  def isLegacy: _root_.scala.Boolean = false
      |  def isSemanticdb3: _root_.scala.Boolean = false
      |  def isSemanticdb4: _root_.scala.Boolean = false
      |  def companion: _root_.scalapb.GeneratedEnumCompanion[Schema] = scala.meta.internal.semanticdb.Schema
      |  final def asRecognized: _root_.scala.Option[scala.meta.internal.semanticdb.Schema.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[scala.meta.internal.semanticdb.Schema.Recognized])
      |}
      |
      |object Schema extends _root_.scalapb.GeneratedEnumCompanion[Schema] {
      |  sealed trait Recognized extends Schema
      |  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Schema] = this
      |  
      |  @SerialVersionUID(0L)
      |  case object LEGACY extends Schema(0) with Schema.Recognized {
      |    val index = 0
      |    val name = "LEGACY"
      |    override def isLegacy: _root_.scala.Boolean = true
      |  }
      |  
      |  @SerialVersionUID(0L)
      |  case object SEMANTICDB3 extends Schema(3) with Schema.Recognized {
      |    val index = 1
      |    val name = "SEMANTICDB3"
      |    override def isSemanticdb3: _root_.scala.Boolean = true
      |  }
      |  
      |  @SerialVersionUID(0L)
      |  case object SEMANTICDB4 extends Schema(4) with Schema.Recognized {
      |    val index = 2
      |    val name = "SEMANTICDB4"
      |    override def isSemanticdb4: _root_.scala.Boolean = true
      |  }
      |  
      |  @SerialVersionUID(0L)
      |  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Schema(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
      |  lazy val values = scala.collection.immutable.Seq(LEGACY, SEMANTICDB3, SEMANTICDB4)
      |  def fromValue(__value: _root_.scala.Int): Schema = __value match {
      |    case 0 => LEGACY
      |    case 3 => SEMANTICDB3
      |    case 4 => SEMANTICDB4
      |    case __other => Unrecognized(__other)
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = SemanticdbProto.javaDescriptor.getEnumTypes().get(0)
      |  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = SemanticdbProto.scalaDescriptor.enums(0)
      |}""".stripMargin
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Scope.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Scope(
      |    symlinks: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      |    hardlinks: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Scope] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      symlinks.foreach { __item =>
      |        val __value = __item
      |        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |      }
      |      hardlinks.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      symlinks.foreach { __v =>
      |        val __m = __v
      |        _output__.writeString(1, __m)
      |      };
      |      hardlinks.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def clearSymlinks = copy(symlinks = _root_.scala.Seq.empty)
      |    def addSymlinks(__vs: _root_.scala.Predef.String *): Scope = addAllSymlinks(__vs)
      |    def addAllSymlinks(__vs: Iterable[_root_.scala.Predef.String]): Scope = copy(symlinks = symlinks ++ __vs)
      |    def withSymlinks(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Scope = copy(symlinks = __v)
      |    def clearHardlinks = copy(hardlinks = _root_.scala.Seq.empty)
      |    def addHardlinks(__vs: scala.meta.internal.semanticdb.SymbolInformation *): Scope = addAllHardlinks(__vs)
      |    def addAllHardlinks(__vs: Iterable[scala.meta.internal.semanticdb.SymbolInformation]): Scope = copy(hardlinks = hardlinks ++ __vs)
      |    def withHardlinks(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]): Scope = copy(hardlinks = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => symlinks
      |        case 2 => hardlinks
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(symlinks.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      |        case 2 => _root_.scalapb.descriptors.PRepeated(hardlinks.iterator.map(_.toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.Scope.type = scala.meta.internal.semanticdb.Scope
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.Scope])
      |}
      |
      |object Scope extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Scope] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Scope] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Scope = {
      |    val __symlinks: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      |    val __hardlinks: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.SymbolInformation] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.SymbolInformation]
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __symlinks += _input__.readStringRequireUtf8()
      |        case 18 =>
      |          __hardlinks += _root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.SymbolInformation](_input__)
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.Scope(
      |        symlinks = __symlinks.result(),
      |        hardlinks = __hardlinks.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Scope] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.foral""".stripMargin) + new String(s"""|l(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Scope(
      |        symlinks = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
      |        hardlinks = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]]).getOrElse(_root_.scala.Seq.empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(4)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(4)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 2 => __out = scala.meta.internal.semanticdb.SymbolInformation
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Scope(
      |    symlinks = _root_.scala.Seq.empty,
      |    hardlinks = _root_.scala.Seq.empty
      |  )
      |  implicit class ScopeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Scope](_l) {
      |    def symlinks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.symlinks)((c_, f_) => c_.copy(symlinks = f_))
      |    def hardlinks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]] = field(_.hardlinks)((c_, f_) => c_.copy(hardlinks = f_))
      |  }
      |  final val SYMLINKS_FIELD_NUMBER = 1
      |  final val HARDLINKS_FIELD_NUMBER = 2
      |  def of(
      |    symlinks: _root_.scala.Seq[_root_.scala.Predef.String],
      |    hardlinks: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]
      |  ): _root_.scala.meta.internal.semanticdb.Scope = _root_.scala.meta.internal.semanticdb.Scope(
      |    symlinks,
      |    hardlinks
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.Scope])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/SemanticdbProto.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |object SemanticdbProto extends _root_.scalapb.GeneratedFileObject {
      |  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
      |    scalapb.options.ScalapbProto
      |  )
      |  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      |    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      |      scala.meta.internal.semanticdb.TextDocuments,
      |      scala.meta.internal.semanticdb.TextDocument,
      |      scala.meta.internal.semanticdb.Range,
      |      scala.meta.internal.semanticdb.Location,
      |      scala.meta.internal.semanticdb.Scope,
      |      scala.meta.internal.semanticdb.TypeMessage,
      |      scala.meta.internal.semanticdb.TypeRef,
      |      scala.meta.internal.semanticdb.SingleType,
      |      scala.meta.internal.semanticdb.ThisType,
      |      scala.meta.internal.semanticdb.SuperType,
      |      scala.meta.internal.semanticdb.ConstantType,
      |      scala.meta.internal.semanticdb.IntersectionType,
      |      scala.meta.internal.semanticdb.UnionType,
      |      scala.meta.internal.semanticdb.WithType,
      |      scala.meta.internal.semanticdb.StructuralType,
      |      scala.meta.internal.semanticdb.AnnotatedType,
      |      scala.meta.internal.semanticdb.ExistentialType,
      |      scala.meta.internal.semanticdb.UniversalType,
      |      scala.meta.internal.semanticdb.ByNameType,
      |      scala.meta.internal.semanticdb.RepeatedType,
      |      scala.meta.internal.semanticdb.MatchType,
      |      scala.meta.internal.semanticdb.ConstantMessage,
      |      scala.meta.internal.semanticdb.UnitConstant,
      |      scala.meta.internal.semanticdb.BooleanConstant,
      |      scala.meta.internal.semanticdb.ByteConstant,
      |      scala.meta.internal.semanticdb.ShortConstant,
      |      scala.meta.internal.semanticdb.CharConstant,
      |      scala.meta.internal.semanticdb.IntConstant,
      |      scala.meta.internal.semanticdb.LongConstant,
      |      scala.meta.internal.semanticdb.FloatConstant,
      |      scala.meta.internal.semanticdb.DoubleConstant,
      |      scala.meta.internal.semanticdb.StringConstant,
      |      scala.meta.internal.semanticdb.NullConstant,
      |      scala.meta.internal.semanticdb.SignatureMessage,
      |      scala.meta.internal.semanticdb.ClassSignature,
      |      scala.meta.internal.semanticdb.MethodSignature,
      |      scala.meta.internal.semanticdb.TypeSignature,
      |      scala.meta.internal.semanticdb.ValueSignature,
      |      scala.meta.internal.semanticdb.SymbolInformation,
      |      scala.meta.internal.semanticdb.Documentation,
      |      scala.meta.internal.semanticdb.Annotation,
      |      scala.meta.internal.semanticdb.AccessMessage,
      |      scala.meta.internal.semanticdb.PrivateAccess,
      |      scala.meta.internal.semanticdb.PrivateThisAccess,
      |      scala.meta.internal.semanticdb.PrivateWithinAccess,
      |      scala.meta.internal.semanticdb.ProtectedAccess,
      |      scala.meta.internal.semanticdb.ProtectedThisAccess,
      |      scala.meta.internal.semanticdb.ProtectedWithinAccess,
      |      scala.meta.internal.semanticdb.PublicAccess,
      |      scala.meta.internal.semanticdb.SymbolOccurrence,
      |      scala.meta.internal.semanticdb.Diagnostic,
      |      scala.meta.internal.semanticdb.Synthetic,
      |      scala.meta.internal.semanticdb.TreeMessage,
      |      scala.meta.internal.semanticdb.ApplyTree,
      |      scala.meta.internal.semanticdb.FunctionTree,
      |      scala.meta.internal.semanticdb.IdTree,
      |      scala.meta.internal.semanticdb.LiteralTree,
      |      scala.meta.internal.semanticdb.MacroExpansionTree,
      |      scala.meta.internal.semanticdb.OriginalTree,
      |      scala.meta.internal.semanticdb.SelectTree,
      |      scala.meta.internal.semanticdb.TypeApplyTree
      |    )
      |  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      |      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
      |  ${"\"" * 3}ChBzZW1hbnRpY2RiLnByb3RvEh5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIaFXNjYWxhcGIvc2NhbGFwYi5wcm90b
      |  yJrCg1UZXh0RG9jdW1lbnRzEloKCWRvY3VtZW50cxgBIAMoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UZXh0R
      |  G9jdW1lbnRCDuI/CxIJZG9jdW1lbnRzUglkb2N1bWVudHMilgUKDFRleHREb2N1bWVudBJLCgZzY2hlbWEYASABKA4yJi5zY2FsY
      |  S5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2NoZW1hQgviPwgSBnNjaGVtYVIGc2NoZW1hEhoKA3VyaRgCIAEoCUII4j8FEgN1c
      |  mlSA3VyaRIdCgR0ZXh0GAMgASgJQgniPwYSBHRleHRSBHRleHQSGgoDbWQ1GAsgASgJQgjiPwUSA21kNVIDbWQ1ElMKCGxhbmd1Y
      |  WdlGAogASgOMiguc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkxhbmd1YWdlQg3iPwoSCGxhbmd1YWdlUghsYW5ndWFnZ
      |  RJZCgdzeW1ib2xzGAUgAygLMjEuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlN5bWJvbEluZm9ybWF0aW9uQgziPwkSB
      |  3N5bWJvbHNSB3N5bWJvbHMSZAoLb2NjdXJyZW5jZXMYBiADKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU3ltY
      |  m9sT2NjdXJyZW5jZUIQ4j8NEgtvY2N1cnJlbmNlc1ILb2NjdXJyZW5jZXMSXgoLZGlhZ25vc3RpY3MYByADKAsyKi5zY2FsYS5tZ
      |  XRhLmludGVybmFsLnNlbWFudGljZGIuRGlhZ25vc3RpY0IQ4j8NEgtkaWFnbm9zdGljc1ILZGlhZ25vc3RpY3MSWgoKc3ludGhld
      |  GljcxgMIAMoCzIpLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TeW50aGV0aWNCD+I/DBIKc3ludGhldGljc1IKc3lud
      |  GhldGljc0oECAQQBUoECAgQCUoECAkQCiLVAQoFUmFuZ2USLQoKc3RhcnRfbGluZRgB""".stripMargin) + new String(s"""|IAEoBUIO4j8LEglzdGFydExpbmVSCXN0Y
      |  XJ0TGluZRI8Cg9zdGFydF9jaGFyYWN0ZXIYAiABKAVCE+I/EBIOc3RhcnRDaGFyYWN0ZXJSDnN0YXJ0Q2hhcmFjdGVyEicKCGVuZ
      |  F9saW5lGAMgASgFQgziPwkSB2VuZExpbmVSB2VuZExpbmUSNgoNZW5kX2NoYXJhY3RlchgEIAEoBUIR4j8OEgxlbmRDaGFyYWN0Z
      |  XJSDGVuZENoYXJhY3RlciJvCghMb2NhdGlvbhIaCgN1cmkYASABKAlCCOI/BRIDdXJpUgN1cmkSRwoFcmFuZ2UYAiABKAsyJS5zY
      |  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuUmFuZ2VCCuI/BxIFcmFuZ2VSBXJhbmdlIpMBCgVTY29wZRIpCghzeW1saW5rc
      |  xgBIAMoCUIN4j8KEghzeW1saW5rc1IIc3ltbGlua3MSXwoJaGFyZGxpbmtzGAIgAygLMjEuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
      |  W1hbnRpY2RiLlN5bWJvbEluZm9ybWF0aW9uQg7iPwsSCWhhcmRsaW5rc1IJaGFyZGxpbmtzIqkMCgRUeXBlElIKCHR5cGVfcmVmG
      |  AIgASgLMicuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVSZWZCDOI/CRIHdHlwZVJlZkgAUgd0eXBlUmVmEl4KC
      |  3NpbmdsZV90eXBlGBQgASgLMiouc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlNpbmdsZVR5cGVCD+I/DBIKc2luZ2xlV
      |  HlwZUgAUgpzaW5nbGVUeXBlElYKCXRoaXNfdHlwZRgVIAEoCzIoLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UaGlzV
      |  HlwZUIN4j8KEgh0aGlzVHlwZUgAUgh0aGlzVHlwZRJaCgpzdXBlcl90eXBlGBYgASgLMikuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
      |  W1hbnRpY2RiLlN1cGVyVHlwZUIO4j8LEglzdXBlclR5cGVIAFIJc3VwZXJUeXBlEmYKDWNvbnN0YW50X3R5cGUYFyABKAsyLC5zY
      |  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQ29uc3RhbnRUeXBlQhHiPw4SDGNvbnN0YW50VHlwZUgAUgxjb25zdGFudFR5c
      |  GUSdgoRaW50ZXJzZWN0aW9uX3R5cGUYESABKAsyMC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuSW50ZXJzZWN0aW9uV
      |  HlwZUIV4j8SEhBpbnRlcnNlY3Rpb25UeXBlSABSEGludGVyc2VjdGlvblR5cGUSWgoKdW5pb25fdHlwZRgSIAEoCzIpLnNjYWxhL
      |  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5VbmlvblR5cGVCDuI/CxIJdW5pb25UeXBlSABSCXVuaW9uVHlwZRJWCgl3aXRoX3R5c
      |  GUYEyABKAsyKC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuV2l0aFR5cGVCDeI/ChIId2l0aFR5cGVIAFIId2l0aFR5c
      |  GUSbgoPc3RydWN0dXJhbF90eXBlGAcgASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlN0cnVjdHVyYWxUeXBlQ
      |  hPiPxASDnN0cnVjdHVyYWxUeXBlSABSDnN0cnVjdHVyYWxUeXBlEmoKDmFubm90YXRlZF90eXBlGAggASgLMi0uc2NhbGEubWV0Y
      |  S5pbnRlcm5hbC5zZW1hbnRpY2RiLkFubm90YXRlZFR5cGVCEuI/DxINYW5ub3RhdGVkVHlwZUgAUg1hbm5vdGF0ZWRUeXBlEnIKE
      |  GV4aXN0ZW50aWFsX3R5cGUYCSABKAsyLy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuRXhpc3RlbnRpYWxUeXBlQhTiP
      |  xESD2V4aXN0ZW50aWFsVHlwZUgAUg9leGlzdGVudGlhbFR5cGUSagoOdW5pdmVyc2FsX3R5cGUYCiABKAsyLS5zY2FsYS5tZXRhL
      |  mludGVybmFsLnNlbWFudGljZGIuVW5pdmVyc2FsVHlwZUIS4j8PEg11bml2ZXJzYWxUeXBlSABSDXVuaXZlcnNhbFR5cGUSXwoMY
      |  nlfbmFtZV90eXBlGA0gASgLMiouc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkJ5TmFtZVR5cGVCD+I/DBIKYnlOYW1lV
      |  HlwZUgAUgpieU5hbWVUeXBlEmYKDXJlcGVhdGVkX3R5cGUYDiABKAsyLC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU
      |  mVwZWF0ZWRUeXBlQhHiPw4SDHJlcGVhdGVkVHlwZUgAUgxyZXBlYXRlZFR5cGUSWgoKbWF0Y2hfdHlwZRgZIAEoCzIpLnNjYWxhL
      |  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5NYXRjaFR5cGVCDuI/CxIJbWF0Y2hUeXBlSABSCW1hdGNoVHlwZUIOCgxzZWFsZWRfd
      |  mFsdWVKBAgBEAJKBAgDEARKBAgEEAVKBAgFEAZKBAgGEAdKBAgLEAxKBAgMEA1KBAgPEBBKBAgQEBEi2gEKB1R5cGVSZWYSSQoGc
      |  HJlZml4GAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVCC+I/CBIGcHJlZml4UgZwcmVmaXgSIwoGc
      |  3ltYm9sGAIgASgJQgviPwgSBnN5bWJvbFIGc3ltYm9sEl8KDnR5cGVfYXJndW1lbnRzGAMgAygLMiQuc2NhbGEubWV0YS5pbnRlc
      |  m5hbC5zZW1hbnRpY2RiLlR5cGVCEuI/DxINdHlwZUFyZ3VtZW50c1INdHlwZUFyZ3VtZW50cyJ8CgpTaW5nbGVUeXBlEkkKBnByZ
      |  WZpeBgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlQgviPwgSBnByZWZpeFIGcHJlZml4EiMKBnN5b
      |  WJvbBgCIAEoCUIL4j8IEgZzeW1ib2xSBnN5bWJvbCIvCghUaGlzVHlwZRIjCgZzeW1ib2wYASABKAlCC+I/CBIGc3ltYm9sUgZze
      |  W1ib2wiewoJU3VwZXJUeXBlEkkKBnByZWZpeBgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlQgviP
      |  wgSBnByZWZpeFIGcHJlZml4EiMKBnN5bWJvbBgCIAEoCUIL4j8IEgZzeW1ib2xSBnN5bWJvbCJjCgxDb25zdGFudFR5cGUSUwoIY
      |  29uc3RhbnQYASABKAsyKC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQ29uc3RhbnRCDeI/ChIIY29uc3RhbnRSCGNvb
      |  nN0YW50IloKEEludGVyc2VjdGlvblR5cGUSRgoFdHlwZXMYASADKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuV
      |  HlwZUIK4j8HEgV0eXBlc1IFdHlwZXMiUwoJVW5pb25UeXBlEkYKBXR5cGVzGAEgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
      |  W1hbnRpY2RiLlR5cGVCCuI/BxIFdHlwZXNSBXR5cGVzIlIKCFdpdGhUeXBlEkYKBXR5cGVzGAEgAygLMiQuc2NhbGEubWV0YS5pb
      |  nRlcm5hbC5zZW1hbnRpY2RiLlR5cGVCCuI/BxIFdHlwZXNSBXR5cGVzIsIBCg5TdHJ1Y3R1cmFsVHlwZRJACgN0cGUYBCABKAsyJ
      |  C5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUII4j8FEgN0cGVSA3RwZRJcCgxkZWNsYXJhdGlvbnMYBSABKAsyJ
      |  S5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2NvcGVCEeI/DhIMZGVjbGFyYXRpb25zUgxkZWNsYXJhdGlvbnNKBAgBE
      |  AJKBAgCEANKBAgDEAQitwEKDUFubm90YXRlZFR5cGUSXgoLYW5ub3RhdGlvbnMYAyADKAsyKi5zY2FsYS5tZXRhLmludGVybmFsL
      |  nNlbWFudGljZGIuQW5ub3RhdGlvbkIQ4j8NEgthbm5vdGF0aW9uc1ILYW5ub3RhdGlvbnMSQAoDdHBlGAEgASgLMiQuc2NhbGEub
      |  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVCCOI/BRIDdHBlUgN0cGVKBAgCEAMitwEKD0V4aXN0ZW50aWFsVHlwZRJACgN0c
      |  GUYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUII4j8FEgN0cGVSA3RwZRJcCgxkZWNsYXJhdGlvb
      |  nMYAyABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2NvcGVCEeI/DhIMZGVjbGFyYXRpb25zUgxkZWNsYXJhd
      |  GlvbnNKBAgCEAMivAEKDVVuaXZlcnNhbFR5cGUSYwoPdHlwZV9wYXJhbWV0ZXJzGAMgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hb
      |  C5zZW1hbnRpY2RiLlNjb3BlQhPiPxASDnR5cGVQYXJhbWV0ZXJzUg50eXBlUGFyYW1ldGVycxJACgN0cGUYAiABKAsyJC5zY2FsY
      |  S5tZXRhLmludGVybmFsL""".stripMargin) + new String(s"""|nNlbWFudGljZGIuVHlwZUII4j8FEgN0cGVSA3RwZUoECAEQAiJOCgpCeU5hbWVUeXBlEkAKA3RwZRgBI
      |  AEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlQgjiPwUSA3RwZVIDdHBlIlAKDFJlcGVhdGVkVHlwZRJAC
      |  gN0cGUYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUII4j8FEgN0cGVSA3RwZSLJAgoJTWF0Y2hUe
      |  XBlElIKCXNjcnV0aW5lZRgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlQg7iPwsSCXNjcnV0aW5lZ
      |  VIJc2NydXRpbmVlElQKBWNhc2VzGAIgAygLMjIuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLk1hdGNoVHlwZS5DYXNlV
      |  HlwZUIK4j8HEgVjYXNlc1IFY2FzZXMakQEKCENhc2VUeXBlEkAKA2tleRgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtY
      |  W50aWNkYi5UeXBlQgjiPwUSA2tleVIDa2V5EkMKBGJvZHkYAiABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuV
      |  HlwZUIJ4j8GEgRib2R5UgRib2R5IrIJCghDb25zdGFudBJmCg11bml0X2NvbnN0YW50GAEgASgLMiwuc2NhbGEubWV0YS5pbnRlc
      |  m5hbC5zZW1hbnRpY2RiLlVuaXRDb25zdGFudEIR4j8OEgx1bml0Q29uc3RhbnRIAFIMdW5pdENvbnN0YW50EnIKEGJvb2xlYW5fY
      |  29uc3RhbnQYAiABKAsyLy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQm9vbGVhbkNvbnN0YW50QhTiPxESD2Jvb2xlY
      |  W5Db25zdGFudEgAUg9ib29sZWFuQ29uc3RhbnQSZgoNYnl0ZV9jb25zdGFudBgDIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc
      |  2VtYW50aWNkYi5CeXRlQ29uc3RhbnRCEeI/DhIMYnl0ZUNvbnN0YW50SABSDGJ5dGVDb25zdGFudBJqCg5zaG9ydF9jb25zdGFud
      |  BgEIAEoCzItLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TaG9ydENvbnN0YW50QhLiPw8SDXNob3J0Q29uc3RhbnRIA
      |  FINc2hvcnRDb25zdGFudBJmCg1jaGFyX2NvbnN0YW50GAUgASgLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkNoY
      |  XJDb25zdGFudEIR4j8OEgxjaGFyQ29uc3RhbnRIAFIMY2hhckNvbnN0YW50EmIKDGludF9jb25zdGFudBgGIAEoCzIrLnNjYWxhL
      |  m1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5JbnRDb25zdGFudEIQ4j8NEgtpbnRDb25zdGFudEgAUgtpbnRDb25zdGFudBJmCg1sb
      |  25nX2NvbnN0YW50GAcgASgLMiwuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkxvbmdDb25zdGFudEIR4j8OEgxsb25nQ
      |  29uc3RhbnRIAFIMbG9uZ0NvbnN0YW50EmoKDmZsb2F0X2NvbnN0YW50GAggASgLMi0uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hb
      |  nRpY2RiLkZsb2F0Q29uc3RhbnRCEuI/DxINZmxvYXRDb25zdGFudEgAUg1mbG9hdENvbnN0YW50Em4KD2RvdWJsZV9jb25zdGFud
      |  BgJIAEoCzIuLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Eb3VibGVDb25zdGFudEIT4j8QEg5kb3VibGVDb25zdGFud
      |  EgAUg5kb3VibGVDb25zdGFudBJuCg9zdHJpbmdfY29uc3RhbnQYCiABKAsyLi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
      |  GIuU3RyaW5nQ29uc3RhbnRCE+I/EBIOc3RyaW5nQ29uc3RhbnRIAFIOc3RyaW5nQ29uc3RhbnQSZgoNbnVsbF9jb25zdGFudBgLI
      |  AEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5OdWxsQ29uc3RhbnRCEeI/DhIMbnVsbENvbnN0YW50SABSDG51b
      |  GxDb25zdGFudEIOCgxzZWFsZWRfdmFsdWUiDgoMVW5pdENvbnN0YW50IjMKD0Jvb2xlYW5Db25zdGFudBIgCgV2YWx1ZRgBIAEoC
      |  EIK4j8HEgV2YWx1ZVIFdmFsdWUiMAoMQnl0ZUNvbnN0YW50EiAKBXZhbHVlGAEgASgFQgriPwcSBXZhbHVlUgV2YWx1ZSIxCg1Ta
      |  G9ydENvbnN0YW50EiAKBXZhbHVlGAEgASgFQgriPwcSBXZhbHVlUgV2YWx1ZSIwCgxDaGFyQ29uc3RhbnQSIAoFdmFsdWUYASABK
      |  AVCCuI/BxIFdmFsdWVSBXZhbHVlIi8KC0ludENvbnN0YW50EiAKBXZhbHVlGAEgASgFQgriPwcSBXZhbHVlUgV2YWx1ZSIwCgxMb
      |  25nQ29uc3RhbnQSIAoFdmFsdWUYASABKANCCuI/BxIFdmFsdWVSBXZhbHVlIjEKDUZsb2F0Q29uc3RhbnQSIAoFdmFsdWUYASABK
      |  AJCCuI/BxIFdmFsdWVSBXZhbHVlIjIKDkRvdWJsZUNvbnN0YW50EiAKBXZhbHVlGAEgASgBQgriPwcSBXZhbHVlUgV2YWx1ZSIyC
      |  g5TdHJpbmdDb25zdGFudBIgCgV2YWx1ZRgBIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWUiDgoMTnVsbENvbnN0YW50ItsDCglTaWduY
      |  XR1cmUSbgoPY2xhc3Nfc2lnbmF0dXJlGAEgASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkNsYXNzU2lnbmF0d
      |  XJlQhPiPxASDmNsYXNzU2lnbmF0dXJlSABSDmNsYXNzU2lnbmF0dXJlEnIKEG1ldGhvZF9zaWduYXR1cmUYAiABKAsyLy5zY2FsY
      |  S5tZXRhLmludGVybmFsLnNlbWFudGljZGIuTWV0aG9kU2lnbmF0dXJlQhTiPxESD21ldGhvZFNpZ25hdHVyZUgAUg9tZXRob2RTa
      |  WduYXR1cmUSagoOdHlwZV9zaWduYXR1cmUYAyABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZVNpZ25hd
      |  HVyZUIS4j8PEg10eXBlU2lnbmF0dXJlSABSDXR5cGVTaWduYXR1cmUSbgoPdmFsdWVfc2lnbmF0dXJlGAQgASgLMi4uc2NhbGEub
      |  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlZhbHVlU2lnbmF0dXJlQhPiPxASDnZhbHVlU2lnbmF0dXJlSABSDnZhbHVlU2lnbmF0d
      |  XJlQg4KDHNlYWxlZF92YWx1ZSLmAgoOQ2xhc3NTaWduYXR1cmUSYwoPdHlwZV9wYXJhbWV0ZXJzGAEgASgLMiUuc2NhbGEubWV0Y
      |  S5pbnRlcm5hbC5zZW1hbnRpY2RiLlNjb3BlQhPiPxASDnR5cGVQYXJhbWV0ZXJzUg50eXBlUGFyYW1ldGVycxJMCgdwYXJlbnRzG
      |  AIgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVCDOI/CRIHcGFyZW50c1IHcGFyZW50cxJDCgRzZWxmG
      |  AMgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVCCeI/BhIEc2VsZlIEc2VsZhJcCgxkZWNsYXJhdGlvb
      |  nMYBCABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2NvcGVCEeI/DhIMZGVjbGFyYXRpb25zUgxkZWNsYXJhd
      |  GlvbnMiswIKD01ldGhvZFNpZ25hdHVyZRJjCg90eXBlX3BhcmFtZXRlcnMYASABKAsyJS5zY2FsYS5tZXRhLmludGVybmFsLnNlb
      |  WFudGljZGIuU2NvcGVCE+I/EBIOdHlwZVBhcmFtZXRlcnNSDnR5cGVQYXJhbWV0ZXJzEmMKD3BhcmFtZXRlcl9saXN0cxgCIAMoC
      |  zIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TY29wZUIT4j8QEg5wYXJhbWV0ZXJMaXN0c1IOcGFyYW1ldGVyTGlzd
      |  HMSVgoLcmV0dXJuX3R5cGUYAyABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUIP4j8MEgpyZXR1cm5Ue
      |  XBlUgpyZXR1cm5UeXBlIqQCCg1UeXBlU2lnbmF0dXJlEmMKD3R5cGVfcGFyYW1ldGVycxgBIAEoCzIlLnNjYWxhLm1ldGEuaW50Z
      |  XJuYWwuc2VtYW50aWNkYi5TY29wZUIT4j8QEg50eXBlUGFyYW1ldGVyc1IOdHlwZVBhcmFtZXRlcnMSVgoLbG93ZXJfYm91bmQYA
      |  iABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUIP4j8MEgpsb3dlckJvdW5kUgpsb3dlckJvdW5kElYKC
      |  3VwcGVyX2JvdW5kGAMgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlR5cGVCD""".stripMargin) + new String(s"""|+I/DBIKdXBwZXJCb3VuZFIKd
      |  XBwZXJCb3VuZCJSCg5WYWx1ZVNpZ25hdHVyZRJACgN0cGUYASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuV
      |  HlwZUII4j8FEgN0cGVSA3RwZSKZDwoRU3ltYm9sSW5mb3JtYXRpb24SIwoGc3ltYm9sGAEgASgJQgviPwgSBnN5bWJvbFIGc3ltY
      |  m9sElMKCGxhbmd1YWdlGBAgASgOMiguc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkxhbmd1YWdlQg3iPwoSCGxhbmd1Y
      |  WdlUghsYW5ndWFnZRJVCgRraW5kGAMgASgOMjYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlN5bWJvbEluZm9ybWF0a
      |  W9uLktpbmRCCeI/BhIEa2luZFIEa2luZBIvCgpwcm9wZXJ0aWVzGAQgASgFQg/iPwwSCnByb3BlcnRpZXNSCnByb3BlcnRpZXMSM
      |  woMZGlzcGxheV9uYW1lGAUgASgJQhDiPw0SC2Rpc3BsYXlOYW1lUgtkaXNwbGF5TmFtZRJXCglzaWduYXR1cmUYESABKAsyKS5zY
      |  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuU2lnbmF0dXJlQg7iPwsSCXNpZ25hdHVyZVIJc2lnbmF0dXJlEl4KC2Fubm90Y
      |  XRpb25zGA0gAygLMiouc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkFubm90YXRpb25CEOI/DRILYW5ub3RhdGlvbnNSC
      |  2Fubm90YXRpb25zEksKBmFjY2VzcxgSIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5BY2Nlc3NCC+I/CBIGY
      |  WNjZXNzUgZhY2Nlc3MSRQoSb3ZlcnJpZGRlbl9zeW1ib2xzGBMgAygJQhbiPxMSEW92ZXJyaWRkZW5TeW1ib2xzUhFvdmVycmlkZ
      |  GVuU3ltYm9scxJnCg1kb2N1bWVudGF0aW9uGBQgASgLMi0uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkRvY3VtZW50Y
      |  XRpb25CEuI/DxINZG9jdW1lbnRhdGlvblINZG9jdW1lbnRhdGlvbiKABAoES2luZBIjCgxVTktOT1dOX0tJTkQQABoR4j8OEgxVT
      |  ktOT1dOX0tJTkQSFQoFTE9DQUwQExoK4j8HEgVMT0NBTBIVCgVGSUVMRBAUGgriPwcSBUZJRUxEEhcKBk1FVEhPRBADGgviPwgSB
      |  k1FVEhPRBIhCgtDT05TVFJVQ1RPUhAVGhDiPw0SC0NPTlNUUlVDVE9SEhUKBU1BQ1JPEAYaCuI/BxIFTUFDUk8SEwoEVFlQRRAHG
      |  gniPwYSBFRZUEUSHQoJUEFSQU1FVEVSEAgaDuI/CxIJUEFSQU1FVEVSEicKDlNFTEZfUEFSQU1FVEVSEBEaE+I/EBIOU0VMRl9QQ
      |  VJBTUVURVISJwoOVFlQRV9QQVJBTUVURVIQCRoT4j8QEg5UWVBFX1BBUkFNRVRFUhIXCgZPQkpFQ1QQChoL4j8IEgZPQkpFQ1QSG
      |  QoHUEFDS0FHRRALGgziPwkSB1BBQ0tBR0USJwoOUEFDS0FHRV9PQkpFQ1QQDBoT4j8QEg5QQUNLQUdFX09CSkVDVBIVCgVDTEFTU
      |  xANGgriPwcSBUNMQVNTEhUKBVRSQUlUEA4aCuI/BxIFVFJBSVQSHQoJSU5URVJGQUNFEBIaDuI/CxIJSU5URVJGQUNFIgQIARABI
      |  gQIAhACIgQIBBAEIgQIBRAFIgQIDxAPIgQIEBAQItcECghQcm9wZXJ0eRIrChBVTktOT1dOX1BST1BFUlRZEAAaFeI/EhIQVU5LT
      |  k9XTl9QUk9QRVJUWRIbCghBQlNUUkFDVBAEGg3iPwoSCEFCU1RSQUNUEhUKBUZJTkFMEAgaCuI/BxIFRklOQUwSFwoGU0VBTEVEE
      |  BAaC+I/CBIGU0VBTEVEEhsKCElNUExJQ0lUECAaDeI/ChIISU1QTElDSVQSEwoETEFaWRBAGgniPwYSBExBWlkSFAoEQ0FTRRCAA
      |  RoJ4j8GEgRDQVNFEh4KCUNPVkFSSUFOVBCAAhoO4j8LEglDT1ZBUklBTlQSJgoNQ09OVFJBVkFSSUFOVBCABBoS4j8PEg1DT05UU
      |  kFWQVJJQU5UEhIKA1ZBTBCACBoI4j8FEgNWQUwSEgoDVkFSEIAQGgjiPwUSA1ZBUhIYCgZTVEFUSUMQgCAaC+I/CBIGU1RBVElDE
      |  hoKB1BSSU1BUlkQgEAaDOI/CRIHUFJJTUFSWRIVCgRFTlVNEICAARoJ4j8GEgRFTlVNEhsKB0RFRkFVTFQQgIACGgziPwkSB0RFR
      |  kFVTFQSFwoFR0lWRU4QgIAEGgriPwcSBUdJVkVOEhkKBklOTElORRCAgAgaC+I/CBIGSU5MSU5FEhUKBE9QRU4QgIAQGgniPwYSB
      |  E9QRU4SIwoLVFJBTlNQQVJFTlQQgIAgGhDiPw0SC1RSQU5TUEFSRU5UEhcKBUlORklYEICAQBoK4j8HEgVJTkZJWBIaCgZPUEFRV
      |  UUQgICAARoL4j8IEgZPUEFRVUUiBAgBEAEiBAgCEAJKBAgCEANKBAgGEAdKBAgHEAhKBAgIEAlKBAgJEApKBAgKEAtKBAgLEAxKB
      |  AgMEA1KBAgOEA9KBAgPEBAinAIKDURvY3VtZW50YXRpb24SJgoHbWVzc2FnZRgBIAEoCUIM4j8JEgdtZXNzYWdlUgdtZXNzYWdlE
      |  lkKBmZvcm1hdBgCIAEoDjI0LnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Eb2N1bWVudGF0aW9uLkZvcm1hdEIL4j8IE
      |  gZmb3JtYXRSBmZvcm1hdCKHAQoGRm9ybWF0EhMKBEhUTUwQABoJ4j8GEgRIVE1MEhsKCE1BUktET1dOEAEaDeI/ChIITUFSS0RPV
      |  04SGQoHSkFWQURPQxACGgziPwkSB0pBVkFET0MSGwoIU0NBTEFET0MQAxoN4j8KEghTQ0FMQURPQxITCgRLRE9DEAQaCeI/BhIES
      |  0RPQyJOCgpBbm5vdGF0aW9uEkAKA3RwZRgBIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlQgjiPwUSA
      |  3RwZVIDdHBlIvcGCgZBY2Nlc3MSagoOcHJpdmF0ZV9hY2Nlc3MYASABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
      |  GIuUHJpdmF0ZUFjY2Vzc0IS4j8PEg1wcml2YXRlQWNjZXNzSABSDXByaXZhdGVBY2Nlc3MSewoTcHJpdmF0ZV90aGlzX2FjY2Vzc
      |  xgCIAEoCzIxLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Qcml2YXRlVGhpc0FjY2Vzc0IW4j8TEhFwcml2YXRlVGhpc
      |  0FjY2Vzc0gAUhFwcml2YXRlVGhpc0FjY2VzcxKDAQoVcHJpdmF0ZV93aXRoaW5fYWNjZXNzGAMgASgLMjMuc2NhbGEubWV0YS5pb
      |  nRlcm5hbC5zZW1hbnRpY2RiLlByaXZhdGVXaXRoaW5BY2Nlc3NCGOI/FRITcHJpdmF0ZVdpdGhpbkFjY2Vzc0gAUhNwcml2YXRlV
      |  2l0aGluQWNjZXNzEnIKEHByb3RlY3RlZF9hY2Nlc3MYBCABKAsyLy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuUHJvd
      |  GVjdGVkQWNjZXNzQhTiPxESD3Byb3RlY3RlZEFjY2Vzc0gAUg9wcm90ZWN0ZWRBY2Nlc3MSgwEKFXByb3RlY3RlZF90aGlzX2FjY
      |  2VzcxgFIAEoCzIzLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5Qcm90ZWN0ZWRUaGlzQWNjZXNzQhjiPxUSE3Byb3RlY
      |  3RlZFRoaXNBY2Nlc3NIAFITcHJvdGVjdGVkVGhpc0FjY2VzcxKLAQoXcHJvdGVjdGVkX3dpdGhpbl9hY2Nlc3MYBiABKAsyNS5zY
      |  2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuUHJvdGVjdGVkV2l0aGluQWNjZXNzQhriPxcSFXByb3RlY3RlZFdpdGhpbkFjY
      |  2Vzc0gAUhVwcm90ZWN0ZWRXaXRoaW5BY2Nlc3MSZgoNcHVibGljX2FjY2VzcxgHIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc
      |  2VtYW50aWNkYi5QdWJsaWNBY2Nlc3NCEeI/DhIMcHVibGljQWNjZXNzSABSDHB1YmxpY0FjY2Vzc0IOCgxzZWFsZWRfdmFsdWUiD
      |  woNUHJpdmF0ZUFjY2VzcyITChFQcml2YXRlVGhpc0FjY2VzcyI6ChNQcml2YXRlV2l0aGluQWNjZXNzEiMKBnN5bWJvbBgBIAEoC
      |  UIL4j8IEgZzeW1ib2xSBnN5bWJvbCIRCg9Qcm90ZWN0ZWRBY2Nlc3MiFQoTUHJvdGVjdGVkVGhpc0FjY2VzcyI8ChVQcm90ZWN0Z
      |  WRXaXRoaW5BY2Nlc3MSIwoGc3ltYm9sGAEgASgJQgviPwgSBnN5bWJvbFIGc3ltYm9sIg4KDFB1YmxpY0FjY2VzcyLDAgoQU3ltY
      |  m9sT2NjdXJyZW5jZRJHCgVyYW5nZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZUIK4j8HEgVyY
      |  W5nZVIFcmFuZ2USIwoGc3ltYm9sGA""".stripMargin) + new String(s"""|IgASgJQgviPwgSBnN5bWJvbFIGc3ltYm9sElQKBHJvbGUYAyABKA4yNS5zY2FsYS5tZXRhL
      |  mludGVybmFsLnNlbWFudGljZGIuU3ltYm9sT2NjdXJyZW5jZS5Sb2xlQgniPwYSBHJvbGVSBHJvbGUiawoEUm9sZRIjCgxVTktOT
      |  1dOX1JPTEUQABoR4j8OEgxVTktOT1dOX1JPTEUSHQoJUkVGRVJFTkNFEAEaDuI/CxIJUkVGRVJFTkNFEh8KCkRFRklOSVRJT04QA
      |  hoP4j8MEgpERUZJTklUSU9OIoEDCgpEaWFnbm9zdGljEkcKBXJhbmdlGAEgASgLMiUuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hb
      |  nRpY2RiLlJhbmdlQgriPwcSBXJhbmdlUgVyYW5nZRJeCghzZXZlcml0eRgCIAEoDjIzLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtY
      |  W50aWNkYi5EaWFnbm9zdGljLlNldmVyaXR5Qg3iPwoSCHNldmVyaXR5UghzZXZlcml0eRImCgdtZXNzYWdlGAMgASgJQgziPwkSB
      |  21lc3NhZ2VSB21lc3NhZ2UioQEKCFNldmVyaXR5EisKEFVOS05PV05fU0VWRVJJVFkQABoV4j8SEhBVTktOT1dOX1NFVkVSSVRZE
      |  hUKBUVSUk9SEAEaCuI/BxIFRVJST1ISGQoHV0FSTklORxACGgziPwkSB1dBUk5JTkcSIQoLSU5GT1JNQVRJT04QAxoQ4j8NEgtJT
      |  kZPUk1BVElPThITCgRISU5UEAQaCeI/BhIESElOVCKZAQoJU3ludGhldGljEkcKBXJhbmdlGAEgASgLMiUuc2NhbGEubWV0YS5pb
      |  nRlcm5hbC5zZW1hbnRpY2RiLlJhbmdlQgriPwcSBXJhbmdlUgVyYW5nZRJDCgR0cmVlGAIgASgLMiQuc2NhbGEubWV0YS5pbnRlc
      |  m5hbC5zZW1hbnRpY2RiLlRyZWVCCeI/BhIEdHJlZVIEdHJlZSLEBgoEVHJlZRJaCgphcHBseV90cmVlGAEgASgLMikuc2NhbGEub
      |  WV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLkFwcGx5VHJlZUIO4j8LEglhcHBseVRyZWVIAFIJYXBwbHlUcmVlEmYKDWZ1bmN0aW9uX
      |  3RyZWUYAiABKAsyLC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuRnVuY3Rpb25UcmVlQhHiPw4SDGZ1bmN0aW9uVHJlZ
      |  UgAUgxmdW5jdGlvblRyZWUSTgoHaWRfdHJlZRgDIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5JZFRyZWVCC
      |  +I/CBIGaWRUcmVlSABSBmlkVHJlZRJiCgxsaXRlcmFsX3RyZWUYBCABKAsyKy5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
      |  GIuTGl0ZXJhbFRyZWVCEOI/DRILbGl0ZXJhbFRyZWVIAFILbGl0ZXJhbFRyZWUSfwoUbWFjcm9fZXhwYW5zaW9uX3RyZWUYBSABK
      |  AsyMi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuTWFjcm9FeHBhbnNpb25UcmVlQhfiPxQSEm1hY3JvRXhwYW5zaW9uV
      |  HJlZUgAUhJtYWNyb0V4cGFuc2lvblRyZWUSZgoNb3JpZ2luYWxfdHJlZRgGIAEoCzIsLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtY
      |  W50aWNkYi5PcmlnaW5hbFRyZWVCEeI/DhIMb3JpZ2luYWxUcmVlSABSDG9yaWdpbmFsVHJlZRJeCgtzZWxlY3RfdHJlZRgHIAEoC
      |  zIqLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5TZWxlY3RUcmVlQg/iPwwSCnNlbGVjdFRyZWVIAFIKc2VsZWN0VHJlZ
      |  RJrCg90eXBlX2FwcGx5X3RyZWUYCCABKAsyLS5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHlwZUFwcGx5VHJlZUIS4
      |  j8PEg10eXBlQXBwbHlUcmVlSABSDXR5cGVBcHBseVRyZWVCDgoMc2VhbGVkX3ZhbHVlIrABCglBcHBseVRyZWUSTwoIZnVuY3Rpb
      |  24YASABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuVHJlZUIN4j8KEghmdW5jdGlvblIIZnVuY3Rpb24SUgoJY
      |  XJndW1lbnRzGAIgAygLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiLlRyZWVCDuI/CxIJYXJndW1lbnRzUglhcmd1b
      |  WVudHMirAEKDEZ1bmN0aW9uVHJlZRJXCgpwYXJhbWV0ZXJzGAEgAygLMiYuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiL
      |  klkVHJlZUIP4j8MEgpwYXJhbWV0ZXJzUgpwYXJhbWV0ZXJzEkMKBGJvZHkYAiABKAsyJC5zY2FsYS5tZXRhLmludGVybmFsLnNlb
      |  WFudGljZGIuVHJlZUIJ4j8GEgRib2R5UgRib2R5Ii0KBklkVHJlZRIjCgZzeW1ib2wYASABKAlCC+I/CBIGc3ltYm9sUgZzeW1ib
      |  2wiYgoLTGl0ZXJhbFRyZWUSUwoIY29uc3RhbnQYASABKAsyKC5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZGIuQ29uc3Rhb
      |  nRCDeI/ChIIY29uc3RhbnRSCGNvbnN0YW50Ir0BChJNYWNyb0V4cGFuc2lvblRyZWUSZQoQYmVmb3JlX2V4cGFuc2lvbhgBIAEoC
      |  zIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UcmVlQhTiPxESD2JlZm9yZUV4cGFuc2lvblIPYmVmb3JlRXhwYW5za
      |  W9uEkAKA3RwZRgCIAEoCzIkLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlQgjiPwUSA3RwZVIDdHBlIlcKDE9ya
      |  WdpbmFsVHJlZRJHCgVyYW5nZRgBIAEoCzIlLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5SYW5nZUIK4j8HEgVyYW5nZ
      |  VIFcmFuZ2UioQEKClNlbGVjdFRyZWUSUgoJcXVhbGlmaWVyGAEgASgLMiQuc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2RiL
      |  lRyZWVCDuI/CxIJcXVhbGlmaWVyUglxdWFsaWZpZXISPwoCaWQYAiABKAsyJi5zY2FsYS5tZXRhLmludGVybmFsLnNlbWFudGljZ
      |  GIuSWRUcmVlQgfiPwQSAmlkUgJpZCLBAQoNVHlwZUFwcGx5VHJlZRJPCghmdW5jdGlvbhgBIAEoCzIkLnNjYWxhLm1ldGEuaW50Z
      |  XJuYWwuc2VtYW50aWNkYi5UcmVlQg3iPwoSCGZ1bmN0aW9uUghmdW5jdGlvbhJfCg50eXBlX2FyZ3VtZW50cxgCIAMoCzIkLnNjY
      |  WxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNkYi5UeXBlQhLiPw8SDXR5cGVBcmd1bWVudHNSDXR5cGVBcmd1bWVudHMqZwoGU2NoZ
      |  W1hEhcKBkxFR0FDWRAAGgviPwgSBkxFR0FDWRIhCgtTRU1BTlRJQ0RCMxADGhDiPw0SC1NFTUFOVElDREIzEiEKC1NFTUFOVElDR
      |  EI0EAQaEOI/DRILU0VNQU5USUNEQjQqYwoITGFuZ3VhZ2USKwoQVU5LTk9XTl9MQU5HVUFHRRAAGhXiPxISEFVOS05PV05fTEFOR
      |  1VBR0USFQoFU0NBTEEQARoK4j8HEgVTQ0FMQRITCgRKQVZBEAIaCeI/BhIESkFWQUIF4j8CSABiBnByb3RvMw==${"\"" * 3}
      |      ).mkString)
      |  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
      |    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
      |    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
      |  }
      |  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
      |    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
      |    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      |      scalapb.options.ScalapbProto.javaDescriptor
      |    ))
      |  }
      |  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
      |  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Signature.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed trait Signature extends scalapb.GeneratedSealedOneof {
      |  type MessageType = scala.meta.internal.semanticdb.SignatureMessage
      |  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Signature.Empty.type]
      |  final def isDefined = !isEmpty
      |  final def asMessage: scala.meta.internal.semanticdb.SignatureMessage = scala.meta.internal.semanticdb.Signature.SignatureTypeMapper.toBase(this)
      |  final def asNonEmpty: Option[scala.meta.internal.semanticdb.Signature.NonEmpty] = if (isEmpty) None else Some(this.asInstanceOf[scala.meta.internal.semanticdb.Signature.NonEmpty])
      |}
      |
      |object Signature {
      |  case object Empty extends scala.meta.internal.semanticdb.Signature
      |  
      |  sealed trait NonEmpty extends scala.meta.internal.semanticdb.Signature
      |  def defaultInstance: scala.meta.internal.semanticdb.Signature = Empty
      |  
      |  implicit val SignatureTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SignatureMessage, scala.meta.internal.semanticdb.Signature] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SignatureMessage, scala.meta.internal.semanticdb.Signature] {
      |    override def toCustom(__base: scala.meta.internal.semanticdb.SignatureMessage): scala.meta.internal.semanticdb.Signature = __base.sealedValue match {
      |      case __v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature => __v.value
      |      case __v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature => __v.value
      |      case __v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature => __v.value
      |      case __v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature => __v.value
      |      case scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty => Empty
      |    }
      |    override def toBase(__custom: scala.meta.internal.semanticdb.Signature): scala.meta.internal.semanticdb.SignatureMessage = scala.meta.internal.semanticdb.SignatureMessage(__custom match {
      |      case __v: scala.meta.internal.semanticdb.ClassSignature => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(__v)
      |      case __v: scala.meta.internal.semanticdb.MethodSignature => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(__v)
      |      case __v: scala.meta.internal.semanticdb.TypeSignature => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(__v)
      |      case __v: scala.meta.internal.semanticdb.ValueSignature => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(__v)
      |      case Empty => scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty
      |    })
      |  }
      |}
      |@SerialVersionUID(0L)
      |final case class SignatureMessage(
      |    sealedValue: scala.meta.internal.semanticdb.SignatureMessage.SealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SignatureMessage] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (sealedValue.classSignature.isDefined) {
      |        val __value = sealedValue.classSignature.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.methodSignature.isDefined) {
      |        val __value = sealedValue.methodSignature.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.typeSignature.isDefined) {
      |        val __value = sealedValue.typeSignature.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.valueSignature.isDefined) {
      |        val __value = sealedValue.valueSignature.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      sealedValue.classSignature.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.methodSignature.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        """.stripMargin) + new String(s"""|__m.writeTo(_output__)
      |      };
      |      sealedValue.typeSignature.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.valueSignature.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(4, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def getClassSignature: scala.meta.internal.semanticdb.ClassSignature = sealedValue.classSignature.getOrElse(scala.meta.internal.semanticdb.ClassSignature.defaultInstance)
      |    def withClassSignature(__v: scala.meta.internal.semanticdb.ClassSignature): SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(__v))
      |    def getMethodSignature: scala.meta.internal.semanticdb.MethodSignature = sealedValue.methodSignature.getOrElse(scala.meta.internal.semanticdb.MethodSignature.defaultInstance)
      |    def withMethodSignature(__v: scala.meta.internal.semanticdb.MethodSignature): SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(__v))
      |    def getTypeSignature: scala.meta.internal.semanticdb.TypeSignature = sealedValue.typeSignature.getOrElse(scala.meta.internal.semanticdb.TypeSignature.defaultInstance)
      |    def withTypeSignature(__v: scala.meta.internal.semanticdb.TypeSignature): SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(__v))
      |    def getValueSignature: scala.meta.internal.semanticdb.ValueSignature = sealedValue.valueSignature.getOrElse(scala.meta.internal.semanticdb.ValueSignature.defaultInstance)
      |    def withValueSignature(__v: scala.meta.internal.semanticdb.ValueSignature): SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(__v))
      |    def clearSealedValue: SignatureMessage = copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty)
      |    def withSealedValue(__v: scala.meta.internal.semanticdb.SignatureMessage.SealedValue): SignatureMessage = copy(sealedValue = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.classSignature.orNull
      |        case 2 => sealedValue.methodSignature.orNull
      |        case 3 => sealedValue.typeSignature.orNull
      |        case 4 => sealedValue.valueSignature.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.classSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => sealedValue.methodSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 3 => sealedValue.typeSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 4 => sealedValue.valueSignature.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.SignatureMessage.type = scala.meta.internal.semanticdb.SignatureMessage
      |    def toSignature: scala.meta.internal.semanticdb.Signature = scala.meta.internal.semanticdb.Signature.SignatureTypeMapper.toCustom(this)
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.Signature])
      |}
      |
      |object SignatureMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SignatureMessage] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SignatureMessage] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SignatureMessage = {
      |    var __sealedValue: scala.meta.internal.semanticdb.SignatureMessage.SealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(__sealedValue.classSignature.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ClassSignature](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(__sealedValue.methodSignature.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.MethodSignature](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 26 =""".stripMargin) + new String(s"""|>
      |          __sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(__sealedValue.typeSignature.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeSignature](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 34 =>
      |          __sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(__sealedValue.valueSignature.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ValueSignature](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.SignatureMessage(
      |        sealedValue = __sealedValue
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SignatureMessage] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.SignatureMessage(
      |        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ClassSignature]]).map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(_))
      |            .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.MethodSignature]]).map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(_)))
      |            .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.TypeSignature]]).map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(_)))
      |            .orElse[scala.meta.internal.semanticdb.SignatureMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ValueSignature]]).map(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(_)))
      |            .getOrElse(scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(33)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(33)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.ClassSignature
      |      case 2 => __out = scala.meta.internal.semanticdb.MethodSignature
      |      case 3 => __out = scala.meta.internal.semanticdb.TypeSignature
      |      case 4 => __out = scala.meta.internal.semanticdb.ValueSignature
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.SignatureMessage(
      |    sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.Empty
      |  )
      |  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
      |    def isEmpty: _root_.scala.Boolean = false
      |    def isDefined: _root_.scala.Boolean = true
      |    def isClassSignature: _root_.scala.Boolean = false
      |    def isMethodSignature: _root_.scala.Boolean = false
      |    def isTypeSignature: _root_.scala.Boolean = false
      |    def isValueSignature: _root_.scala.Boolean = false
      |    def classSignature: _root_.scala.Option[scala.meta.internal.semanticdb.ClassSignature] = _root_.scala.None
      |    def methodSignature: _root_.scala.Option[scala.meta.internal.semanticdb.MethodSignature] = _root_.scala.None
      |    def typeSignature: _root_.scala.Option[scala.meta.internal.semanticdb.TypeSignature] = _root_.scala.None
      |    def valueSignature: _root_.scala.Option[scala.meta.internal.semanticdb.ValueSignature] = _root_.scala.None
      |  }
      |  object SealedValue {
      |    @SerialVersionUID(0L)
      |    case object Empty extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      |      type ValueType = _root_.scala.Nothing
      |      override def isEmpty: _root_.scala.Boolean = true
      |      override def isDefined: _root_.scala.Boolean = false
      |      override def number: _root_.scala.Int = 0
      |      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      |    }
      |  
      |    @SerialVersion""".stripMargin) + new String(s"""|UID(0L)
      |    final case class ClassSignature(value: scala.meta.internal.semanticdb.ClassSignature) extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ClassSignature
      |      override def isClassSignature: _root_.scala.Boolean = true
      |      override def classSignature: _root_.scala.Option[scala.meta.internal.semanticdb.ClassSignature] = Some(value)
      |      override def number: _root_.scala.Int = 1
      |    }
      |    @SerialVersionUID(0L)
      |    final case class MethodSignature(value: scala.meta.internal.semanticdb.MethodSignature) extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.MethodSignature
      |      override def isMethodSignature: _root_.scala.Boolean = true
      |      override def methodSignature: _root_.scala.Option[scala.meta.internal.semanticdb.MethodSignature] = Some(value)
      |      override def number: _root_.scala.Int = 2
      |    }
      |    @SerialVersionUID(0L)
      |    final case class TypeSignature(value: scala.meta.internal.semanticdb.TypeSignature) extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.TypeSignature
      |      override def isTypeSignature: _root_.scala.Boolean = true
      |      override def typeSignature: _root_.scala.Option[scala.meta.internal.semanticdb.TypeSignature] = Some(value)
      |      override def number: _root_.scala.Int = 3
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ValueSignature(value: scala.meta.internal.semanticdb.ValueSignature) extends scala.meta.internal.semanticdb.SignatureMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ValueSignature
      |      override def isValueSignature: _root_.scala.Boolean = true
      |      override def valueSignature: _root_.scala.Option[scala.meta.internal.semanticdb.ValueSignature] = Some(value)
      |      override def number: _root_.scala.Int = 4
      |    }
      |  }
      |  implicit class SignatureMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SignatureMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SignatureMessage](_l) {
      |    def classSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ClassSignature] = field(_.getClassSignature)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ClassSignature(f_)))
      |    def methodSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MethodSignature] = field(_.getMethodSignature)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.MethodSignature(f_)))
      |    def typeSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeSignature] = field(_.getTypeSignature)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.TypeSignature(f_)))
      |    def valueSignature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ValueSignature] = field(_.getValueSignature)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.SignatureMessage.SealedValue.ValueSignature(f_)))
      |    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SignatureMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
      |  }
      |  final val CLASS_SIGNATURE_FIELD_NUMBER = 1
      |  final val METHOD_SIGNATURE_FIELD_NUMBER = 2
      |  final val TYPE_SIGNATURE_FIELD_NUMBER = 3
      |  final val VALUE_SIGNATURE_FIELD_NUMBER = 4
      |  def of(
      |    sealedValue: scala.meta.internal.semanticdb.SignatureMessage.SealedValue
      |  ): _root_.scala.meta.internal.semanticdb.SignatureMessage = _root_.scala.meta.internal.semanticdb.SignatureMessage(
      |    sealedValue
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.Signature])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ClassSignature(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None,
      |    parents: _root_.scala.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.Seq.empty,
      |    self: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Signature.NonEmpty with scalapb.lenses.Updatable[ClassSignature] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (typeParameters.isDefined) {
      |        val __value = typeParameters.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      parents.foreach { __item =>
      |        val __v""".stripMargin) + new String(s"""|alue = scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(self)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      if (declarations.isDefined) {
      |        val __value = declarations.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      typeParameters.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      parents.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toBase(__v)
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(self)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(3, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      declarations.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(4, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def getTypeParameters: scala.meta.internal.semanticdb.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearTypeParameters: ClassSignature = copy(typeParameters = _root_.scala.None)
      |    def withTypeParameters(__v: scala.meta.internal.semanticdb.Scope): ClassSignature = copy(typeParameters = Option(__v))
      |    def clearParents = copy(parents = _root_.scala.Seq.empty)
      |    def addParents(__vs: scala.meta.internal.semanticdb.Type *): ClassSignature = addAllParents(__vs)
      |    def addAllParents(__vs: Iterable[scala.meta.internal.semanticdb.Type]): ClassSignature = copy(parents = parents ++ __vs)
      |    def withParents(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]): ClassSignature = copy(parents = __v)
      |    def withSelf(__v: scala.meta.internal.semanticdb.Type): ClassSignature = copy(self = __v)
      |    def getDeclarations: scala.meta.internal.semanticdb.Scope = declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearDeclarations: ClassSignature = copy(declarations = _root_.scala.None)
      |    def withDeclarations(__v: scala.meta.internal.semanticdb.Scope): ClassSignature = copy(declarations = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => typeParameters.orNull
      |        case 2 => parents.iterator.map(scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toBase(_)).toSeq
      |        case 3 => {
      |          val __t = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(self)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 4 => declarations.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => _root_.scalapb.descriptors.PRepeated(parents.iterator.map(scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toBase(_).toPMessage).toVector)
      |        case 3 => scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toBase(self).toPMessage
      |        case 4 => declarations.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.ClassSignature.type = scala.meta.internal.semanticdb.ClassSignature
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.ClassSignature])
      |}
      |
      |object ClassSignature extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ClassSignature""".stripMargin) + new String(s"""|] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ClassSignature] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ClassSignature = {
      |    var __typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    val __parents: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Type] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Type]
      |    var __self: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var __declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __typeParameters = Option(__typeParameters.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Scope](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __parents += scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toCustom(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))
      |        case 26 =>
      |          __self = _root_.scala.Some(__self.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 34 =>
      |          __declarations = Option(__declarations.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Scope](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ClassSignature(
      |        typeParameters = __typeParameters,
      |        parents = __parents.result(),
      |        self = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(__self.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        declarations = __declarations
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ClassSignature] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ClassSignature(
      |        typeParameters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]),
      |        parents = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.ClassSignature._typemapper_parents.toCustom(_)).toSeq,
      |        self = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        declarations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(34)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(34)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Scope
      |      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 3 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 4 => __out = scala.meta.internal.semanticdb.Scope
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ClassSignature(
      |    typeParameters = _root_.scala.None,
      |    parents = _root_.scala.Seq.empty,
      |    self = scala.meta.internal.semanticdb.ClassSignature._typemapper_self.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    declarations = _root_.scala.None
      |  )
      |  implicit class ClassSignatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ClassSignature]) extends _root_.""".stripMargin) + new String(s"""|scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ClassSignature](_l) {
      |    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
      |    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
      |    def parents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Type]] = field(_.parents)((c_, f_) => c_.copy(parents = f_))
      |    def self: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.self)((c_, f_) => c_.copy(self = f_))
      |    def declarations: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getDeclarations)((c_, f_) => c_.copy(declarations = Option(f_)))
      |    def optionalDeclarations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.declarations)((c_, f_) => c_.copy(declarations = f_))
      |  }
      |  final val TYPE_PARAMETERS_FIELD_NUMBER = 1
      |  final val PARENTS_FIELD_NUMBER = 2
      |  final val SELF_FIELD_NUMBER = 3
      |  final val DECLARATIONS_FIELD_NUMBER = 4
      |  @transient
      |  private[semanticdb] val _typemapper_parents: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  @transient
      |  private[semanticdb] val _typemapper_self: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope],
      |    parents: _root_.scala.Seq[scala.meta.internal.semanticdb.Type],
      |    self: scala.meta.internal.semanticdb.Type,
      |    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope]
      |  ): _root_.scala.meta.internal.semanticdb.ClassSignature = _root_.scala.meta.internal.semanticdb.ClassSignature(
      |    typeParameters,
      |    parents,
      |    self,
      |    declarations
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.ClassSignature])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class MethodSignature(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None,
      |    parameterLists: _root_.scala.Seq[scala.meta.internal.semanticdb.Scope] = _root_.scala.Seq.empty,
      |    returnType: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Signature.NonEmpty with scalapb.lenses.Updatable[MethodSignature] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (typeParameters.isDefined) {
      |        val __value = typeParameters.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      parameterLists.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(returnType)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      typeParameters.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      parameterLists.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(returnType)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(3, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |  """.stripMargin) + new String(s"""|  }
      |    def getTypeParameters: scala.meta.internal.semanticdb.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearTypeParameters: MethodSignature = copy(typeParameters = _root_.scala.None)
      |    def withTypeParameters(__v: scala.meta.internal.semanticdb.Scope): MethodSignature = copy(typeParameters = Option(__v))
      |    def clearParameterLists = copy(parameterLists = _root_.scala.Seq.empty)
      |    def addParameterLists(__vs: scala.meta.internal.semanticdb.Scope *): MethodSignature = addAllParameterLists(__vs)
      |    def addAllParameterLists(__vs: Iterable[scala.meta.internal.semanticdb.Scope]): MethodSignature = copy(parameterLists = parameterLists ++ __vs)
      |    def withParameterLists(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Scope]): MethodSignature = copy(parameterLists = __v)
      |    def withReturnType(__v: scala.meta.internal.semanticdb.Type): MethodSignature = copy(returnType = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => typeParameters.orNull
      |        case 2 => parameterLists
      |        case 3 => {
      |          val __t = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(returnType)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => _root_.scalapb.descriptors.PRepeated(parameterLists.iterator.map(_.toPMessage).toVector)
      |        case 3 => scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toBase(returnType).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.MethodSignature.type = scala.meta.internal.semanticdb.MethodSignature
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.MethodSignature])
      |}
      |
      |object MethodSignature extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MethodSignature] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MethodSignature] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.MethodSignature = {
      |    var __typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    val __parameterLists: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Scope] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Scope]
      |    var __returnType: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __typeParameters = Option(__typeParameters.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Scope](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __parameterLists += _root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Scope](_input__)
      |        case 26 =>
      |          __returnType = _root_.scala.Some(__returnType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.MethodSignature(
      |        typeParameters = __typeParameters,
      |        parameterLists = __parameterLists.result(),
      |        returnType = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toCustom(__returnType.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.MethodSignature] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.MethodSignature(
      |        typeParameters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]),
      |        parameterLists = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.Scope]]).getOrElse(_root_.scala.Seq.empty),
      |        returnType = scala.meta.internal.se""".stripMargin) + new String(s"""|manticdb.MethodSignature._typemapper_returnType.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(35)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(35)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Scope
      |      case 2 => __out = scala.meta.internal.semanticdb.Scope
      |      case 3 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.MethodSignature(
      |    typeParameters = _root_.scala.None,
      |    parameterLists = _root_.scala.Seq.empty,
      |    returnType = scala.meta.internal.semanticdb.MethodSignature._typemapper_returnType.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class MethodSignatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MethodSignature]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.MethodSignature](_l) {
      |    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
      |    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
      |    def parameterLists: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Scope]] = field(_.parameterLists)((c_, f_) => c_.copy(parameterLists = f_))
      |    def returnType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.returnType)((c_, f_) => c_.copy(returnType = f_))
      |  }
      |  final val TYPE_PARAMETERS_FIELD_NUMBER = 1
      |  final val PARAMETER_LISTS_FIELD_NUMBER = 2
      |  final val RETURN_TYPE_FIELD_NUMBER = 3
      |  @transient
      |  private[semanticdb] val _typemapper_returnType: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope],
      |    parameterLists: _root_.scala.Seq[scala.meta.internal.semanticdb.Scope],
      |    returnType: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.MethodSignature = _root_.scala.meta.internal.semanticdb.MethodSignature(
      |    typeParameters,
      |    parameterLists,
      |    returnType
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.MethodSignature])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class TypeSignature(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None,
      |    lowerBound: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    upperBound: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Signature.NonEmpty with scalapb.lenses.Updatable[TypeSignature] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (typeParameters.isDefined) {
      |        val __value = typeParameters.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(lowerBound)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(upperBound)
      |    """.stripMargin) + new String(s"""|    if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      typeParameters.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(lowerBound)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(2, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(upperBound)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(3, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def getTypeParameters: scala.meta.internal.semanticdb.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearTypeParameters: TypeSignature = copy(typeParameters = _root_.scala.None)
      |    def withTypeParameters(__v: scala.meta.internal.semanticdb.Scope): TypeSignature = copy(typeParameters = Option(__v))
      |    def withLowerBound(__v: scala.meta.internal.semanticdb.Type): TypeSignature = copy(lowerBound = __v)
      |    def withUpperBound(__v: scala.meta.internal.semanticdb.Type): TypeSignature = copy(upperBound = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => typeParameters.orNull
      |        case 2 => {
      |          val __t = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(lowerBound)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 3 => {
      |          val __t = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(upperBound)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toBase(lowerBound).toPMessage
      |        case 3 => scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toBase(upperBound).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.TypeSignature.type = scala.meta.internal.semanticdb.TypeSignature
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.TypeSignature])
      |}
      |
      |object TypeSignature extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeSignature] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeSignature] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TypeSignature = {
      |    var __typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    var __lowerBound: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var __upperBound: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __typeParameters = Option(__typeParameters.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Scope](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __lowerBound = _root_.scala.Some(__lowerBound.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 26 =>
      |          __upperBound = _root_.scala.Some(__upperBound.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipFiel""".stripMargin) + new String(s"""|d(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.TypeSignature(
      |        typeParameters = __typeParameters,
      |        lowerBound = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(__lowerBound.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        upperBound = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(__upperBound.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TypeSignature] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TypeSignature(
      |        typeParameters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]),
      |        lowerBound = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        upperBound = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(36)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(36)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Scope
      |      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 3 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TypeSignature(
      |    typeParameters = _root_.scala.None,
      |    lowerBound = scala.meta.internal.semanticdb.TypeSignature._typemapper_lowerBound.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    upperBound = scala.meta.internal.semanticdb.TypeSignature._typemapper_upperBound.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class TypeSignatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeSignature]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TypeSignature](_l) {
      |    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
      |    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
      |    def lowerBound: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.lowerBound)((c_, f_) => c_.copy(lowerBound = f_))
      |    def upperBound: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.upperBound)((c_, f_) => c_.copy(upperBound = f_))
      |  }
      |  final val TYPE_PARAMETERS_FIELD_NUMBER = 1
      |  final val LOWER_BOUND_FIELD_NUMBER = 2
      |  final val UPPER_BOUND_FIELD_NUMBER = 3
      |  @transient
      |  private[semanticdb] val _typemapper_lowerBound: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  @transient
      |  private[semanticdb] val _typemapper_upperBound: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope],
      |    lowerBound: scala.meta.internal.semanticdb.Type,
      |    upperBound: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.TypeSignature = _root_.scala.meta.internal.semanticdb.TypeSign""".stripMargin) + new String(s"""|ature(
      |    typeParameters,
      |    lowerBound,
      |    upperBound
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeSignature])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ValueSignature(
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Signature.NonEmpty with scalapb.lenses.Updatable[ValueSignature] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(tpe)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(tpe)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): ValueSignature = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.ValueSignature.type = scala.meta.internal.semanticdb.ValueSignature
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.ValueSignature])
      |}
      |
      |object ValueSignature extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ValueSignature] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ValueSignature] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ValueSignature = {
      |    var __tpe: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __tpe = _root_.scala.Some(__tpe.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ValueSignature(
      |        tpe = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(__tpe.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ValueSignature] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ValueSignature(
      |        tpe = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(37)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(37)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.""".stripMargin) + new String(s"""|GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ValueSignature(
      |    tpe = scala.meta.internal.semanticdb.ValueSignature._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class ValueSignatureLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ValueSignature]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ValueSignature](_l) {
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val TPE_FIELD_NUMBER = 1
      |  @transient
      |  private[semanticdb] val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.ValueSignature = _root_.scala.meta.internal.semanticdb.ValueSignature(
      |    tpe
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.ValueSignature])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/SymbolInformation.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class SymbolInformation(
      |    symbol: _root_.scala.Predef.String = "",
      |    language: scala.meta.internal.semanticdb.Language = scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE,
      |    kind: scala.meta.internal.semanticdb.SymbolInformation.Kind = scala.meta.internal.semanticdb.SymbolInformation.Kind.UNKNOWN_KIND,
      |    properties: _root_.scala.Int = 0,
      |    displayName: _root_.scala.Predef.String = "",
      |    signature: scala.meta.internal.semanticdb.Signature = scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toCustom(scala.meta.internal.semanticdb.SignatureMessage.defaultInstance),
      |    annotations: _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation] = _root_.scala.Seq.empty,
      |    access: scala.meta.internal.semanticdb.Access = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toCustom(scala.meta.internal.semanticdb.AccessMessage.defaultInstance),
      |    overriddenSymbols: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      |    documentation: _root_.scala.Option[scala.meta.internal.semanticdb.Documentation] = _root_.scala.None
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SymbolInformation] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = symbol
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = language.value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(16, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = kind.value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = properties
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = displayName
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toBase(signature)
      |        if (__value.serializedSize != 0) {
      |          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      annotations.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toBase(access)
      |        if (__value.serializedSize != 0) {
      |          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      overriddenSymbols.foreach { __item =>
      |        val __value = __item
      |        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(19, __value)
      |      }
      |      if (documentation.isDefined) {
      |        val __value = documentation.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = symbol
      |        if (!__v.isEmpty) {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |      {
      |        val __v = kind.value
      |        if (__v != 0) {
      |          _output__.writeEnum(3, __v)
      |        }
      |      };
      |      {
      |        val __v = properties
      |        if (__v != 0) {
      |          _output__.writeInt32(4, __v)
      |        }
      |      };
      |      {
      |        val __v = displayName
      |        if (!__v.isEmpty) {
      |          _output__.writeString(5, __v)
      |        }
      |      };
      |      annotations.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(13, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = language.value
      |        if (__v != 0) {
      |          _output__.writeEnum(16, __v)
      |        }
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.SymbolI""".stripMargin) + new String(s"""|nformation._typemapper_signature.toBase(signature)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(17, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toBase(access)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(18, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      overriddenSymbols.foreach { __v =>
      |        val __m = __v
      |        _output__.writeString(19, __m)
      |      };
      |      documentation.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(20, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def withSymbol(__v: _root_.scala.Predef.String): SymbolInformation = copy(symbol = __v)
      |    def withLanguage(__v: scala.meta.internal.semanticdb.Language): SymbolInformation = copy(language = __v)
      |    def withKind(__v: scala.meta.internal.semanticdb.SymbolInformation.Kind): SymbolInformation = copy(kind = __v)
      |    def withProperties(__v: _root_.scala.Int): SymbolInformation = copy(properties = __v)
      |    def withDisplayName(__v: _root_.scala.Predef.String): SymbolInformation = copy(displayName = __v)
      |    def withSignature(__v: scala.meta.internal.semanticdb.Signature): SymbolInformation = copy(signature = __v)
      |    def clearAnnotations = copy(annotations = _root_.scala.Seq.empty)
      |    def addAnnotations(__vs: scala.meta.internal.semanticdb.Annotation *): SymbolInformation = addAllAnnotations(__vs)
      |    def addAllAnnotations(__vs: Iterable[scala.meta.internal.semanticdb.Annotation]): SymbolInformation = copy(annotations = annotations ++ __vs)
      |    def withAnnotations(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]): SymbolInformation = copy(annotations = __v)
      |    def withAccess(__v: scala.meta.internal.semanticdb.Access): SymbolInformation = copy(access = __v)
      |    def clearOverriddenSymbols = copy(overriddenSymbols = _root_.scala.Seq.empty)
      |    def addOverriddenSymbols(__vs: _root_.scala.Predef.String *): SymbolInformation = addAllOverriddenSymbols(__vs)
      |    def addAllOverriddenSymbols(__vs: Iterable[_root_.scala.Predef.String]): SymbolInformation = copy(overriddenSymbols = overriddenSymbols ++ __vs)
      |    def withOverriddenSymbols(__v: _root_.scala.Seq[_root_.scala.Predef.String]): SymbolInformation = copy(overriddenSymbols = __v)
      |    def getDocumentation: scala.meta.internal.semanticdb.Documentation = documentation.getOrElse(scala.meta.internal.semanticdb.Documentation.defaultInstance)
      |    def clearDocumentation: SymbolInformation = copy(documentation = _root_.scala.None)
      |    def withDocumentation(__v: scala.meta.internal.semanticdb.Documentation): SymbolInformation = copy(documentation = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |        case 16 => {
      |          val __t = language.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |        case 3 => {
      |          val __t = kind.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |        case 4 => {
      |          val __t = properties
      |          if (__t != 0) __t else null
      |        }
      |        case 5 => {
      |          val __t = displayName
      |          if (__t != "") __t else null
      |        }
      |        case 17 => {
      |          val __t = scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toBase(signature)
      |          if (__t != scala.meta.internal.semanticdb.SignatureMessage.defaultInstance) __t else null
      |        }
      |        case 13 => annotations
      |        case 18 => {
      |          val __t = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toBase(access)
      |          if (__t != scala.meta.internal.semanticdb.AccessMessage.defaultInstance) __t else null
      |        }
      |        case 19 => overriddenSymbols
      |        case 20 => documentation.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(symbol)
      |        case 16 => _root_.scalapb.descriptors.PEnum(language.scalaValueDescriptor)
      |        case 3 => _root_.scalapb.descriptors.PEnum(kind.scalaValueDescriptor)
      |        case 4 => _root_.scalapb.descriptors.PInt(properties)
      |        case 5 => _root_.scalapb.descriptors.PString(displayName)
      |        case 17 => scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toBase(signature).toPMessage
      |        case 13 => _root_.scalapb.descriptors.PRepeated(annotations.iterator.map(_.toPMessage).toVector)
      |        """.stripMargin) + new String(s"""|case 18 => scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toBase(access).toPMessage
      |        case 19 => _root_.scalapb.descriptors.PRepeated(overriddenSymbols.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      |        case 20 => documentation.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.SymbolInformation.type = scala.meta.internal.semanticdb.SymbolInformation
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.SymbolInformation])
      |}
      |
      |object SymbolInformation extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SymbolInformation] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SymbolInformation] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SymbolInformation = {
      |    var __symbol: _root_.scala.Predef.String = ""
      |    var __language: scala.meta.internal.semanticdb.Language = scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE
      |    var __kind: scala.meta.internal.semanticdb.SymbolInformation.Kind = scala.meta.internal.semanticdb.SymbolInformation.Kind.UNKNOWN_KIND
      |    var __properties: _root_.scala.Int = 0
      |    var __displayName: _root_.scala.Predef.String = ""
      |    var __signature: _root_.scala.Option[scala.meta.internal.semanticdb.SignatureMessage] = _root_.scala.None
      |    val __annotations: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Annotation] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Annotation]
      |    var __access: _root_.scala.Option[scala.meta.internal.semanticdb.AccessMessage] = _root_.scala.None
      |    val __overriddenSymbols: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      |    var __documentation: _root_.scala.Option[scala.meta.internal.semanticdb.Documentation] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __symbol = _input__.readStringRequireUtf8()
      |        case 128 =>
      |          __language = scala.meta.internal.semanticdb.Language.fromValue(_input__.readEnum())
      |        case 24 =>
      |          __kind = scala.meta.internal.semanticdb.SymbolInformation.Kind.fromValue(_input__.readEnum())
      |        case 32 =>
      |          __properties = _input__.readInt32()
      |        case 42 =>
      |          __displayName = _input__.readStringRequireUtf8()
      |        case 138 =>
      |          __signature = _root_.scala.Some(__signature.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.SignatureMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 106 =>
      |          __annotations += _root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Annotation](_input__)
      |        case 146 =>
      |          __access = _root_.scala.Some(__access.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.AccessMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 154 =>
      |          __overriddenSymbols += _input__.readStringRequireUtf8()
      |        case 162 =>
      |          __documentation = Option(__documentation.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Documentation](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.SymbolInformation(
      |        symbol = __symbol,
      |        language = __language,
      |        kind = __kind,
      |        properties = __properties,
      |        displayName = __displayName,
      |        signature = scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toCustom(__signature.getOrElse(scala.meta.internal.semanticdb.SignatureMessage.defaultInstance)),
      |        annotations = __annotations.result(),
      |        access = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toCustom(__access.getOrElse(scala.meta.internal.semanticdb.AccessMessage.defaultInstance)),
      |        overriddenSymbols = __overriddenSymbols.result(),
      |        documentation = __documentation
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SymbolInformation] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.SymbolInformation(
      |        symbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |  """.stripMargin) + new String(s"""|      language = scala.meta.internal.semanticdb.Language.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE.scalaValueDescriptor).number),
      |        kind = scala.meta.internal.semanticdb.SymbolInformation.Kind.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.SymbolInformation.Kind.UNKNOWN_KIND.scalaValueDescriptor).number),
      |        properties = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
      |        displayName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        signature = scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[scala.meta.internal.semanticdb.SignatureMessage]).getOrElse(scala.meta.internal.semanticdb.SignatureMessage.defaultInstance)),
      |        annotations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]]).getOrElse(_root_.scala.Seq.empty),
      |        access = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).map(_.as[scala.meta.internal.semanticdb.AccessMessage]).getOrElse(scala.meta.internal.semanticdb.AccessMessage.defaultInstance)),
      |        overriddenSymbols = __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
      |        documentation = __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Documentation]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(38)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(38)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 17 => __out = scala.meta.internal.semanticdb.SignatureMessage
      |      case 13 => __out = scala.meta.internal.semanticdb.Annotation
      |      case 18 => __out = scala.meta.internal.semanticdb.AccessMessage
      |      case 20 => __out = scala.meta.internal.semanticdb.Documentation
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      |    (__fieldNumber: @_root_.scala.unchecked) match {
      |      case 16 => scala.meta.internal.semanticdb.Language
      |      case 3 => scala.meta.internal.semanticdb.SymbolInformation.Kind
      |    }
      |  }
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.SymbolInformation(
      |    symbol = "",
      |    language = scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE,
      |    kind = scala.meta.internal.semanticdb.SymbolInformation.Kind.UNKNOWN_KIND,
      |    properties = 0,
      |    displayName = "",
      |    signature = scala.meta.internal.semanticdb.SymbolInformation._typemapper_signature.toCustom(scala.meta.internal.semanticdb.SignatureMessage.defaultInstance),
      |    annotations = _root_.scala.Seq.empty,
      |    access = scala.meta.internal.semanticdb.SymbolInformation._typemapper_access.toCustom(scala.meta.internal.semanticdb.AccessMessage.defaultInstance),
      |    overriddenSymbols = _root_.scala.Seq.empty,
      |    documentation = _root_.scala.None
      |  )
      |  sealed abstract class Kind(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
      |    type EnumType = Kind
      |    def isUnknownKind: _root_.scala.Boolean = false
      |    def isLocal: _root_.scala.Boolean = false
      |    def isField: _root_.scala.Boolean = false
      |    def isMethod: _root_.scala.Boolean = false
      |    def isConstructor: _root_.scala.Boolean = false
      |    def isMacro: _root_.scala.Boolean = false
      |    def isType: _root_.scala.Boolean = false
      |    def isParameter: _root_.scala.Boolean = false
      |    def isSelfParameter: _root_.scala.Boolean = false
      |    def isTypeParameter: _root_.scala.Boolean = false
      |    def isObject: _root_.scala.Boolean = false
      |    def isPackage: _root_.scala.Boolean = false
      |    def isPackageObject: _root_.scala.Boolean = false
      |    def isClass: _root_.scala.Boolean = false
      |    def isTrait: _root_.scala.Boolean = false
      |    def isInterface: _root_.scala.Boolean = false
      |    def companion: _root_.scalapb.GeneratedEnumCompanion[Kind] = scala.meta.internal.semanticdb.SymbolInformation.Kind
      |    final def as""".stripMargin) + new String(s"""|Recognized: _root_.scala.Option[scala.meta.internal.semanticdb.SymbolInformation.Kind.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[scala.meta.internal.semanticdb.SymbolInformation.Kind.Recognized])
      |  }
      |  
      |  object Kind extends _root_.scalapb.GeneratedEnumCompanion[Kind] {
      |    sealed trait Recognized extends Kind
      |    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Kind] = this
      |    
      |    @SerialVersionUID(0L)
      |    case object UNKNOWN_KIND extends Kind(0) with Kind.Recognized {
      |      val index = 0
      |      val name = "UNKNOWN_KIND"
      |      override def isUnknownKind: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object LOCAL extends Kind(19) with Kind.Recognized {
      |      val index = 1
      |      val name = "LOCAL"
      |      override def isLocal: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object FIELD extends Kind(20) with Kind.Recognized {
      |      val index = 2
      |      val name = "FIELD"
      |      override def isField: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object METHOD extends Kind(3) with Kind.Recognized {
      |      val index = 3
      |      val name = "METHOD"
      |      override def isMethod: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object CONSTRUCTOR extends Kind(21) with Kind.Recognized {
      |      val index = 4
      |      val name = "CONSTRUCTOR"
      |      override def isConstructor: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object MACRO extends Kind(6) with Kind.Recognized {
      |      val index = 5
      |      val name = "MACRO"
      |      override def isMacro: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object TYPE extends Kind(7) with Kind.Recognized {
      |      val index = 6
      |      val name = "TYPE"
      |      override def isType: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object PARAMETER extends Kind(8) with Kind.Recognized {
      |      val index = 7
      |      val name = "PARAMETER"
      |      override def isParameter: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object SELF_PARAMETER extends Kind(17) with Kind.Recognized {
      |      val index = 8
      |      val name = "SELF_PARAMETER"
      |      override def isSelfParameter: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object TYPE_PARAMETER extends Kind(9) with Kind.Recognized {
      |      val index = 9
      |      val name = "TYPE_PARAMETER"
      |      override def isTypeParameter: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object OBJECT extends Kind(10) with Kind.Recognized {
      |      val index = 10
      |      val name = "OBJECT"
      |      override def isObject: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object PACKAGE extends Kind(11) with Kind.Recognized {
      |      val index = 11
      |      val name = "PACKAGE"
      |      override def isPackage: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object PACKAGE_OBJECT extends Kind(12) with Kind.Recognized {
      |      val index = 12
      |      val name = "PACKAGE_OBJECT"
      |      override def isPackageObject: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object CLASS extends Kind(13) with Kind.Recognized {
      |      val index = 13
      |      val name = "CLASS"
      |      override def isClass: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object TRAIT extends Kind(14) with Kind.Recognized {
      |      val index = 14
      |      val name = "TRAIT"
      |      override def isTrait: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object INTERFACE extends Kind(18) with Kind.Recognized {
      |      val index = 15
      |      val name = "INTERFACE"
      |      override def isInterface: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Kind(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
      |    lazy val values = scala.collection.immutable.Seq(UNKNOWN_KIND, LOCAL, FIELD, METHOD, CONSTRUCTOR, MACRO, TYPE, PARAMETER, SELF_PARAMETER, TYPE_PARAMETER, OBJECT, PACKAGE, PACKAGE_OBJECT, CLASS, TRAIT, INTERFACE)
      |    def fromValue(__value: _root_.scala.Int): Kind = __value match {
      |      case 0 => UNKNOWN_KIND
      |      case 3 => METHOD
      |      case 6 => MACRO
      |      case 7 => TYPE
      |      case 8 => PARAMETER
      |      case 9 => TYPE_PARAMETER
      |      case 10 => OBJECT
      |      case 11 => PACKAGE
      |      case 12 => PACKAGE_OBJECT
      |      case 13 => CLASS
      |      case 14 => TRAIT
      |      case 17 => SELF_PARAMETER
      |      case 18 => INTERFACE
      |      case 19 => LOCAL
      |      case 20 => FIELD
      |      case 21 => CONSTRUCTOR
      |      case __other => Unrecognized(__other)
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb.SymbolInformation.javaDescriptor.getEnumTypes().get(0)
      |    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb.SymbolInformation.sca""".stripMargin) + new String(s"""|laDescriptor.enums(0)
      |  }
      |  sealed abstract class Property(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
      |    type EnumType = Property
      |    def isUnknownProperty: _root_.scala.Boolean = false
      |    def isAbstract: _root_.scala.Boolean = false
      |    def isFinal: _root_.scala.Boolean = false
      |    def isSealed: _root_.scala.Boolean = false
      |    def isImplicit: _root_.scala.Boolean = false
      |    def isLazy: _root_.scala.Boolean = false
      |    def isCase: _root_.scala.Boolean = false
      |    def isCovariant: _root_.scala.Boolean = false
      |    def isContravariant: _root_.scala.Boolean = false
      |    def isVal: _root_.scala.Boolean = false
      |    def isVar: _root_.scala.Boolean = false
      |    def isStatic: _root_.scala.Boolean = false
      |    def isPrimary: _root_.scala.Boolean = false
      |    def isEnum: _root_.scala.Boolean = false
      |    def isDefault: _root_.scala.Boolean = false
      |    def isGiven: _root_.scala.Boolean = false
      |    def isInline: _root_.scala.Boolean = false
      |    def isOpen: _root_.scala.Boolean = false
      |    def isTransparent: _root_.scala.Boolean = false
      |    def isInfix: _root_.scala.Boolean = false
      |    def isOpaque: _root_.scala.Boolean = false
      |    def companion: _root_.scalapb.GeneratedEnumCompanion[Property] = scala.meta.internal.semanticdb.SymbolInformation.Property
      |    final def asRecognized: _root_.scala.Option[scala.meta.internal.semanticdb.SymbolInformation.Property.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[scala.meta.internal.semanticdb.SymbolInformation.Property.Recognized])
      |  }
      |  
      |  object Property extends _root_.scalapb.GeneratedEnumCompanion[Property] {
      |    sealed trait Recognized extends Property
      |    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Property] = this
      |    
      |    @SerialVersionUID(0L)
      |    case object UNKNOWN_PROPERTY extends Property(0) with Property.Recognized {
      |      val index = 0
      |      val name = "UNKNOWN_PROPERTY"
      |      override def isUnknownProperty: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object ABSTRACT extends Property(4) with Property.Recognized {
      |      val index = 1
      |      val name = "ABSTRACT"
      |      override def isAbstract: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object FINAL extends Property(8) with Property.Recognized {
      |      val index = 2
      |      val name = "FINAL"
      |      override def isFinal: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object SEALED extends Property(16) with Property.Recognized {
      |      val index = 3
      |      val name = "SEALED"
      |      override def isSealed: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object IMPLICIT extends Property(32) with Property.Recognized {
      |      val index = 4
      |      val name = "IMPLICIT"
      |      override def isImplicit: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object LAZY extends Property(64) with Property.Recognized {
      |      val index = 5
      |      val name = "LAZY"
      |      override def isLazy: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object CASE extends Property(128) with Property.Recognized {
      |      val index = 6
      |      val name = "CASE"
      |      override def isCase: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object COVARIANT extends Property(256) with Property.Recognized {
      |      val index = 7
      |      val name = "COVARIANT"
      |      override def isCovariant: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object CONTRAVARIANT extends Property(512) with Property.Recognized {
      |      val index = 8
      |      val name = "CONTRAVARIANT"
      |      override def isContravariant: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object VAL extends Property(1024) with Property.Recognized {
      |      val index = 9
      |      val name = "VAL"
      |      override def isVal: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object VAR extends Property(2048) with Property.Recognized {
      |      val index = 10
      |      val name = "VAR"
      |      override def isVar: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object STATIC extends Property(4096) with Property.Recognized {
      |      val index = 11
      |      val name = "STATIC"
      |      override def isStatic: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object PRIMARY extends Property(8192) with Property.Recognized {
      |      val index = 12
      |      val name = "PRIMARY"
      |      override def isPrimary: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object ENUM extends Property(16384) with Property.Recognized {
      |      val index = 13
      |      val name = "ENUM"
      |      override def isEnum: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object DEFAULT extends Property(32768) with Property.Recognized {
      |      val index = 14
      |      val name = "DEFAULT"
      |      override def isDefault: _root_.scala.Boolean = true
      |    }
      |    
      |    @""".stripMargin) + new String(s"""|SerialVersionUID(0L)
      |    case object GIVEN extends Property(65536) with Property.Recognized {
      |      val index = 15
      |      val name = "GIVEN"
      |      override def isGiven: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object INLINE extends Property(131072) with Property.Recognized {
      |      val index = 16
      |      val name = "INLINE"
      |      override def isInline: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object OPEN extends Property(262144) with Property.Recognized {
      |      val index = 17
      |      val name = "OPEN"
      |      override def isOpen: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object TRANSPARENT extends Property(524288) with Property.Recognized {
      |      val index = 18
      |      val name = "TRANSPARENT"
      |      override def isTransparent: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object INFIX extends Property(1048576) with Property.Recognized {
      |      val index = 19
      |      val name = "INFIX"
      |      override def isInfix: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object OPAQUE extends Property(2097152) with Property.Recognized {
      |      val index = 20
      |      val name = "OPAQUE"
      |      override def isOpaque: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Property(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
      |    lazy val values = scala.collection.immutable.Seq(UNKNOWN_PROPERTY, ABSTRACT, FINAL, SEALED, IMPLICIT, LAZY, CASE, COVARIANT, CONTRAVARIANT, VAL, VAR, STATIC, PRIMARY, ENUM, DEFAULT, GIVEN, INLINE, OPEN, TRANSPARENT, INFIX, OPAQUE)
      |    def fromValue(__value: _root_.scala.Int): Property = __value match {
      |      case 0 => UNKNOWN_PROPERTY
      |      case 4 => ABSTRACT
      |      case 8 => FINAL
      |      case 16 => SEALED
      |      case 32 => IMPLICIT
      |      case 64 => LAZY
      |      case 128 => CASE
      |      case 256 => COVARIANT
      |      case 512 => CONTRAVARIANT
      |      case 1024 => VAL
      |      case 2048 => VAR
      |      case 4096 => STATIC
      |      case 8192 => PRIMARY
      |      case 16384 => ENUM
      |      case 32768 => DEFAULT
      |      case 65536 => GIVEN
      |      case 131072 => INLINE
      |      case 262144 => OPEN
      |      case 524288 => TRANSPARENT
      |      case 1048576 => INFIX
      |      case 2097152 => OPAQUE
      |      case __other => Unrecognized(__other)
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb.SymbolInformation.javaDescriptor.getEnumTypes().get(1)
      |    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb.SymbolInformation.scalaDescriptor.enums(1)
      |  }
      |  implicit class SymbolInformationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SymbolInformation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SymbolInformation](_l) {
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |    def language: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Language] = field(_.language)((c_, f_) => c_.copy(language = f_))
      |    def kind: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SymbolInformation.Kind] = field(_.kind)((c_, f_) => c_.copy(kind = f_))
      |    def properties: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.properties)((c_, f_) => c_.copy(properties = f_))
      |    def displayName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.displayName)((c_, f_) => c_.copy(displayName = f_))
      |    def signature: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Signature] = field(_.signature)((c_, f_) => c_.copy(signature = f_))
      |    def annotations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]] = field(_.annotations)((c_, f_) => c_.copy(annotations = f_))
      |    def access: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Access] = field(_.access)((c_, f_) => c_.copy(access = f_))
      |    def overriddenSymbols: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.overriddenSymbols)((c_, f_) => c_.copy(overriddenSymbols = f_))
      |    def documentation: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Documentation] = field(_.getDocumentation)((c_, f_) => c_.copy(documentation = Option(f_)))
      |    def optionalDocumentation: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Documentation]] = field(_.documentation)((c_, f_) => c_.copy(documentation = f_))
      |  }
      |  final val SYMBOL_FIELD_NUMBER = 1
      |  final val LANGUAGE_FIELD_NUMBER = 16
      |  final val KIND_FIELD_NUMBER = 3
      |  final val PROPERTIES_FIELD_NUMBER = 4
      |  final val DISPLAY_NAME_FIELD_NUMBER = 5
      |  final val SIGNATURE_FIELD_NUMBER = 17
      |  final val ANNOTATIONS_FIELD_NUMBER = 13
      |  final val ACCESS_FIELD_""".stripMargin) + new String(s"""|NUMBER = 18
      |  final val OVERRIDDEN_SYMBOLS_FIELD_NUMBER = 19
      |  final val DOCUMENTATION_FIELD_NUMBER = 20
      |  @transient
      |  private[semanticdb] val _typemapper_signature: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SignatureMessage, scala.meta.internal.semanticdb.Signature] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.SignatureMessage, scala.meta.internal.semanticdb.Signature]]
      |  @transient
      |  private[semanticdb] val _typemapper_access: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.AccessMessage, scala.meta.internal.semanticdb.Access] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.AccessMessage, scala.meta.internal.semanticdb.Access]]
      |  def of(
      |    symbol: _root_.scala.Predef.String,
      |    language: scala.meta.internal.semanticdb.Language,
      |    kind: scala.meta.internal.semanticdb.SymbolInformation.Kind,
      |    properties: _root_.scala.Int,
      |    displayName: _root_.scala.Predef.String,
      |    signature: scala.meta.internal.semanticdb.Signature,
      |    annotations: _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation],
      |    access: scala.meta.internal.semanticdb.Access,
      |    overriddenSymbols: _root_.scala.Seq[_root_.scala.Predef.String],
      |    documentation: _root_.scala.Option[scala.meta.internal.semanticdb.Documentation]
      |  ): _root_.scala.meta.internal.semanticdb.SymbolInformation = _root_.scala.meta.internal.semanticdb.SymbolInformation(
      |    symbol,
      |    language,
      |    kind,
      |    properties,
      |    displayName,
      |    signature,
      |    annotations,
      |    access,
      |    overriddenSymbols,
      |    documentation
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.SymbolInformation])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/SymbolOccurrence.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class SymbolOccurrence(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None,
      |    symbol: _root_.scala.Predef.String = "",
      |    role: scala.meta.internal.semanticdb.SymbolOccurrence.Role = scala.meta.internal.semanticdb.SymbolOccurrence.Role.UNKNOWN_ROLE
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SymbolOccurrence] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (range.isDefined) {
      |        val __value = range.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      
      |      {
      |        val __value = symbol
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = role.value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      range.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = symbol
      |        if (!__v.isEmpty) {
      |          _output__.writeString(2, __v)
      |        }
      |      };
      |      {
      |        val __v = role.value
      |        if (__v != 0) {
      |          _output__.writeEnum(3, __v)
      |        }
      |      };
      |    }
      |    def getRange: scala.meta.internal.semanticdb.Range = range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)
      |    def clearRange: SymbolOccurrence = copy(range = _root_.scala.None)
      |    def withRange(__v: scala.meta.internal.semanticdb.Range): SymbolOccurrence = copy(range = Option(__v))
      |    def withSymbol(__v: _root_.scala.Predef.String): SymbolOccurrence = copy(symbol = __v)
      |    def withRole(__v: scala.meta.internal.semanticdb.SymbolOccurrence.Role): SymbolOccurrence = copy(role = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => range.orNull
      |        case 2 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |        case 3 => {
      |          val __t = role.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => _root_.scalapb.descriptors.PString(symbol)
      |        case 3 => _root_.scalapb.descriptors.PEnum(role.scalaValueDescriptor)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.SymbolOccurrence.type = scala.meta.internal.semanticdb.SymbolOccurrence
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.SymbolOccurrence])
      |}
      |
      |object SymbolOccurrence extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SymbolOccurrence] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SymbolOccurrence] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SymbolOccurrence = {
      |    var __range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None
      |    var __symbol: _root_.scala.Predef.String = ""
      |    var __role: scala.meta.internal.semanticdb.SymbolOccurrence.Role = scala.meta.internal.semanticdb.SymbolOccurrence.Role.UNKNOWN_ROLE
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __range = Option(__range.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Range](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __symbol = _input__.readStringRequireUtf8()
      |        case 24 =>
      |          __role = scala.meta.internal.semanticdb.SymbolOccurrence.Ro""".stripMargin) + new String(s"""|le.fromValue(_input__.readEnum())
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.SymbolOccurrence(
      |        range = __range,
      |        symbol = __symbol,
      |        role = __role
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SymbolOccurrence] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.SymbolOccurrence(
      |        range = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Range]]),
      |        symbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        role = scala.meta.internal.semanticdb.SymbolOccurrence.Role.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.SymbolOccurrence.Role.UNKNOWN_ROLE.scalaValueDescriptor).number)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(49)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(49)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Range
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      |    (__fieldNumber: @_root_.scala.unchecked) match {
      |      case 3 => scala.meta.internal.semanticdb.SymbolOccurrence.Role
      |    }
      |  }
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.SymbolOccurrence(
      |    range = _root_.scala.None,
      |    symbol = "",
      |    role = scala.meta.internal.semanticdb.SymbolOccurrence.Role.UNKNOWN_ROLE
      |  )
      |  sealed abstract class Role(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
      |    type EnumType = Role
      |    def isUnknownRole: _root_.scala.Boolean = false
      |    def isReference: _root_.scala.Boolean = false
      |    def isDefinition: _root_.scala.Boolean = false
      |    def companion: _root_.scalapb.GeneratedEnumCompanion[Role] = scala.meta.internal.semanticdb.SymbolOccurrence.Role
      |    final def asRecognized: _root_.scala.Option[scala.meta.internal.semanticdb.SymbolOccurrence.Role.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[scala.meta.internal.semanticdb.SymbolOccurrence.Role.Recognized])
      |  }
      |  
      |  object Role extends _root_.scalapb.GeneratedEnumCompanion[Role] {
      |    sealed trait Recognized extends Role
      |    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Role] = this
      |    
      |    @SerialVersionUID(0L)
      |    case object UNKNOWN_ROLE extends Role(0) with Role.Recognized {
      |      val index = 0
      |      val name = "UNKNOWN_ROLE"
      |      override def isUnknownRole: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object REFERENCE extends Role(1) with Role.Recognized {
      |      val index = 1
      |      val name = "REFERENCE"
      |      override def isReference: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    case object DEFINITION extends Role(2) with Role.Recognized {
      |      val index = 2
      |      val name = "DEFINITION"
      |      override def isDefinition: _root_.scala.Boolean = true
      |    }
      |    
      |    @SerialVersionUID(0L)
      |    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Role(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
      |    lazy val values = scala.collection.immutable.Seq(UNKNOWN_ROLE, REFERENCE, DEFINITION)
      |    def fromValue(__value: _root_.scala.Int): Role = __value match {
      |      case 0 => UNKNOWN_ROLE
      |      case 1 => REFERENCE
      |      case 2 => DEFINITION
      |      case __other => Unrecognized(__other)
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scala.meta.internal.semanticdb.SymbolOccurrence.javaDescriptor.getEnumTypes().get(0)
      |    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scala.meta.internal.semanticdb.SymbolOccurrence.scalaDescriptor.enums(0)
      |  }
      |  implicit class SymbolOccurrenceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SymbolOccurrence]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SymbolOccurrence](_l) {
      |    def range: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.inter""".stripMargin) + new String(s"""|nal.semanticdb.Range] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
      |    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Range]] = field(_.range)((c_, f_) => c_.copy(range = f_))
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |    def role: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SymbolOccurrence.Role] = field(_.role)((c_, f_) => c_.copy(role = f_))
      |  }
      |  final val RANGE_FIELD_NUMBER = 1
      |  final val SYMBOL_FIELD_NUMBER = 2
      |  final val ROLE_FIELD_NUMBER = 3
      |  def of(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range],
      |    symbol: _root_.scala.Predef.String,
      |    role: scala.meta.internal.semanticdb.SymbolOccurrence.Role
      |  ): _root_.scala.meta.internal.semanticdb.SymbolOccurrence = _root_.scala.meta.internal.semanticdb.SymbolOccurrence(
      |    range,
      |    symbol,
      |    role
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.SymbolOccurrence])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Synthetic.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class Synthetic(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None,
      |    tree: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Synthetic] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (range.isDefined) {
      |        val __value = range.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toBase(tree)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      range.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toBase(tree)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(2, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def getRange: scala.meta.internal.semanticdb.Range = range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)
      |    def clearRange: Synthetic = copy(range = _root_.scala.None)
      |    def withRange(__v: scala.meta.internal.semanticdb.Range): Synthetic = copy(range = Option(__v))
      |    def withTree(__v: scala.meta.internal.semanticdb.Tree): Synthetic = copy(tree = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => range.orNull
      |        case 2 => {
      |          val __t = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toBase(tree)
      |          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toBase(tree).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.Synthetic.type = scala.meta.internal.semanticdb.Synthetic
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.Synthetic])
      |}
      |
      |object Synthetic extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Synthetic] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.Synthetic] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.Synthetic = {
      |    var __range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None
      |    var __tree: _root_.scala.Option[scala.meta.internal.semanticdb.TreeMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __range = Option(__range.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Range](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __tree = _root_.scala.Some(__tree.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TreeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.Synthetic(
      |        range = __range,
      |        tree = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toCustom(__tree.getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance))
      |    )
      | """.stripMargin) + new String(s"""| }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.Synthetic] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.Synthetic(
      |        range = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Range]]),
      |        tree = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(51)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(51)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Range
      |      case 2 => __out = scala.meta.internal.semanticdb.TreeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.Synthetic(
      |    range = _root_.scala.None,
      |    tree = scala.meta.internal.semanticdb.Synthetic._typemapper_tree.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)
      |  )
      |  implicit class SyntheticLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Synthetic]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.Synthetic](_l) {
      |    def range: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
      |    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Range]] = field(_.range)((c_, f_) => c_.copy(range = f_))
      |    def tree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.tree)((c_, f_) => c_.copy(tree = f_))
      |  }
      |  final val RANGE_FIELD_NUMBER = 1
      |  final val TREE_FIELD_NUMBER = 2
      |  @transient
      |  private[semanticdb] val _typemapper_tree: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  def of(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range],
      |    tree: scala.meta.internal.semanticdb.Tree
      |  ): _root_.scala.meta.internal.semanticdb.Synthetic = _root_.scala.meta.internal.semanticdb.Synthetic(
      |    range,
      |    tree
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.Synthetic])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/TextDocument.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class TextDocument(
      |    schema: scala.meta.internal.semanticdb.Schema = scala.meta.internal.semanticdb.Schema.LEGACY,
      |    uri: _root_.scala.Predef.String = "",
      |    text: _root_.scala.Predef.String = "",
      |    md5: _root_.scala.Predef.String = "",
      |    language: scala.meta.internal.semanticdb.Language = scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE,
      |    symbols: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation] = _root_.scala.Seq.empty,
      |    occurrences: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolOccurrence] = _root_.scala.Seq.empty,
      |    diagnostics: _root_.scala.Seq[scala.meta.internal.semanticdb.Diagnostic] = _root_.scala.Seq.empty,
      |    synthetics: _root_.scala.Seq[scala.meta.internal.semanticdb.Synthetic] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TextDocument] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = schema.value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = uri
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = text
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = md5
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, __value)
      |        }
      |      };
      |      
      |      {
      |        val __value = language.value
      |        if (__value != 0) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(10, __value)
      |        }
      |      };
      |      symbols.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      occurrences.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      diagnostics.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      synthetics.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = schema.value
      |        if (__v != 0) {
      |          _output__.writeEnum(1, __v)
      |        }
      |      };
      |      {
      |        val __v = uri
      |        if (!__v.isEmpty) {
      |          _output__.writeString(2, __v)
      |        }
      |      };
      |      {
      |        val __v = text
      |        if (!__v.isEmpty) {
      |          _output__.writeString(3, __v)
      |        }
      |      };
      |      symbols.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(5, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      occurrences.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(6, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      diagnostics.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(7, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = language.value
      |        if (__v != 0) {
      |          _output__.writeEnum(10, __v)
      |        }
      |      };
      |      {
      |        val __v = md5
      |        if (!__v.isEmpty) {
      |          _output__.writeString(11, __v)
      |        }
      |      };
      |      synthetics.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(12, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def withSchema(__v: scala.meta.internal.semanticdb.Schema): TextDocument = copy(schema = __v)
      |    def withUri(__v: _root_.scala.Predef.String): TextDocument = copy(uri = __v)
      |    def withText(__v: _root_.scala.Predef.String): TextDocument = copy(text = __v)
      |    def wit""".stripMargin) + new String(s"""|hMd5(__v: _root_.scala.Predef.String): TextDocument = copy(md5 = __v)
      |    def withLanguage(__v: scala.meta.internal.semanticdb.Language): TextDocument = copy(language = __v)
      |    def clearSymbols = copy(symbols = _root_.scala.Seq.empty)
      |    def addSymbols(__vs: scala.meta.internal.semanticdb.SymbolInformation *): TextDocument = addAllSymbols(__vs)
      |    def addAllSymbols(__vs: Iterable[scala.meta.internal.semanticdb.SymbolInformation]): TextDocument = copy(symbols = symbols ++ __vs)
      |    def withSymbols(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]): TextDocument = copy(symbols = __v)
      |    def clearOccurrences = copy(occurrences = _root_.scala.Seq.empty)
      |    def addOccurrences(__vs: scala.meta.internal.semanticdb.SymbolOccurrence *): TextDocument = addAllOccurrences(__vs)
      |    def addAllOccurrences(__vs: Iterable[scala.meta.internal.semanticdb.SymbolOccurrence]): TextDocument = copy(occurrences = occurrences ++ __vs)
      |    def withOccurrences(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolOccurrence]): TextDocument = copy(occurrences = __v)
      |    def clearDiagnostics = copy(diagnostics = _root_.scala.Seq.empty)
      |    def addDiagnostics(__vs: scala.meta.internal.semanticdb.Diagnostic *): TextDocument = addAllDiagnostics(__vs)
      |    def addAllDiagnostics(__vs: Iterable[scala.meta.internal.semanticdb.Diagnostic]): TextDocument = copy(diagnostics = diagnostics ++ __vs)
      |    def withDiagnostics(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Diagnostic]): TextDocument = copy(diagnostics = __v)
      |    def clearSynthetics = copy(synthetics = _root_.scala.Seq.empty)
      |    def addSynthetics(__vs: scala.meta.internal.semanticdb.Synthetic *): TextDocument = addAllSynthetics(__vs)
      |    def addAllSynthetics(__vs: Iterable[scala.meta.internal.semanticdb.Synthetic]): TextDocument = copy(synthetics = synthetics ++ __vs)
      |    def withSynthetics(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Synthetic]): TextDocument = copy(synthetics = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = schema.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |        case 2 => {
      |          val __t = uri
      |          if (__t != "") __t else null
      |        }
      |        case 3 => {
      |          val __t = text
      |          if (__t != "") __t else null
      |        }
      |        case 11 => {
      |          val __t = md5
      |          if (__t != "") __t else null
      |        }
      |        case 10 => {
      |          val __t = language.javaValueDescriptor
      |          if (__t.getNumber() != 0) __t else null
      |        }
      |        case 5 => symbols
      |        case 6 => occurrences
      |        case 7 => diagnostics
      |        case 12 => synthetics
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PEnum(schema.scalaValueDescriptor)
      |        case 2 => _root_.scalapb.descriptors.PString(uri)
      |        case 3 => _root_.scalapb.descriptors.PString(text)
      |        case 11 => _root_.scalapb.descriptors.PString(md5)
      |        case 10 => _root_.scalapb.descriptors.PEnum(language.scalaValueDescriptor)
      |        case 5 => _root_.scalapb.descriptors.PRepeated(symbols.iterator.map(_.toPMessage).toVector)
      |        case 6 => _root_.scalapb.descriptors.PRepeated(occurrences.iterator.map(_.toPMessage).toVector)
      |        case 7 => _root_.scalapb.descriptors.PRepeated(diagnostics.iterator.map(_.toPMessage).toVector)
      |        case 12 => _root_.scalapb.descriptors.PRepeated(synthetics.iterator.map(_.toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.TextDocument.type = scala.meta.internal.semanticdb.TextDocument
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.TextDocument])
      |}
      |
      |object TextDocument extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TextDocument] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TextDocument] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TextDocument = {
      |    var __schema: scala.meta.internal.semanticdb.Schema = scala.meta.internal.semanticdb.Schema.LEGACY
      |    var __uri: _root_.scala.Predef.String = ""
      |    var __text: _root_.scala.Predef.String = ""
      |    var __md5: _root_.scala.Predef.String = ""
      |    var __language: scala.meta.internal.semanticdb.Language = scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE
      |    val __symbols: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.SymbolInformation] = new _root_.scala.collection.immutable.Vect""".stripMargin) + new String(s"""|orBuilder[scala.meta.internal.semanticdb.SymbolInformation]
      |    val __occurrences: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.SymbolOccurrence] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.SymbolOccurrence]
      |    val __diagnostics: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Diagnostic] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Diagnostic]
      |    val __synthetics: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Synthetic] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Synthetic]
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 8 =>
      |          __schema = scala.meta.internal.semanticdb.Schema.fromValue(_input__.readEnum())
      |        case 18 =>
      |          __uri = _input__.readStringRequireUtf8()
      |        case 26 =>
      |          __text = _input__.readStringRequireUtf8()
      |        case 90 =>
      |          __md5 = _input__.readStringRequireUtf8()
      |        case 80 =>
      |          __language = scala.meta.internal.semanticdb.Language.fromValue(_input__.readEnum())
      |        case 42 =>
      |          __symbols += _root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.SymbolInformation](_input__)
      |        case 50 =>
      |          __occurrences += _root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.SymbolOccurrence](_input__)
      |        case 58 =>
      |          __diagnostics += _root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Diagnostic](_input__)
      |        case 98 =>
      |          __synthetics += _root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Synthetic](_input__)
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.TextDocument(
      |        schema = __schema,
      |        uri = __uri,
      |        text = __text,
      |        md5 = __md5,
      |        language = __language,
      |        symbols = __symbols.result(),
      |        occurrences = __occurrences.result(),
      |        diagnostics = __diagnostics.result(),
      |        synthetics = __synthetics.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TextDocument] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TextDocument(
      |        schema = scala.meta.internal.semanticdb.Schema.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.Schema.LEGACY.scalaValueDescriptor).number),
      |        uri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        text = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        md5 = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |        language = scala.meta.internal.semanticdb.Language.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE.scalaValueDescriptor).number),
      |        symbols = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]]).getOrElse(_root_.scala.Seq.empty),
      |        occurrences = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.SymbolOccurrence]]).getOrElse(_root_.scala.Seq.empty),
      |        diagnostics = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.Diagnostic]]).getOrElse(_root_.scala.Seq.empty),
      |        synthetics = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.Synthetic]]).getOrElse(_root_.scala.Seq.empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(1)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(1)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 5 => __out = scala.meta.internal.semanticdb.SymbolInformation
      |      case 6 => __out = scala.meta.internal.semanticdb.SymbolOccur""".stripMargin) + new String(s"""|rence
      |      case 7 => __out = scala.meta.internal.semanticdb.Diagnostic
      |      case 12 => __out = scala.meta.internal.semanticdb.Synthetic
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      |    (__fieldNumber: @_root_.scala.unchecked) match {
      |      case 1 => scala.meta.internal.semanticdb.Schema
      |      case 10 => scala.meta.internal.semanticdb.Language
      |    }
      |  }
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TextDocument(
      |    schema = scala.meta.internal.semanticdb.Schema.LEGACY,
      |    uri = "",
      |    text = "",
      |    md5 = "",
      |    language = scala.meta.internal.semanticdb.Language.UNKNOWN_LANGUAGE,
      |    symbols = _root_.scala.Seq.empty,
      |    occurrences = _root_.scala.Seq.empty,
      |    diagnostics = _root_.scala.Seq.empty,
      |    synthetics = _root_.scala.Seq.empty
      |  )
      |  implicit class TextDocumentLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TextDocument]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TextDocument](_l) {
      |    def schema: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Schema] = field(_.schema)((c_, f_) => c_.copy(schema = f_))
      |    def uri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.uri)((c_, f_) => c_.copy(uri = f_))
      |    def text: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.text)((c_, f_) => c_.copy(text = f_))
      |    def md5: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.md5)((c_, f_) => c_.copy(md5 = f_))
      |    def language: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Language] = field(_.language)((c_, f_) => c_.copy(language = f_))
      |    def symbols: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation]] = field(_.symbols)((c_, f_) => c_.copy(symbols = f_))
      |    def occurrences: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolOccurrence]] = field(_.occurrences)((c_, f_) => c_.copy(occurrences = f_))
      |    def diagnostics: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Diagnostic]] = field(_.diagnostics)((c_, f_) => c_.copy(diagnostics = f_))
      |    def synthetics: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Synthetic]] = field(_.synthetics)((c_, f_) => c_.copy(synthetics = f_))
      |  }
      |  final val SCHEMA_FIELD_NUMBER = 1
      |  final val URI_FIELD_NUMBER = 2
      |  final val TEXT_FIELD_NUMBER = 3
      |  final val MD5_FIELD_NUMBER = 11
      |  final val LANGUAGE_FIELD_NUMBER = 10
      |  final val SYMBOLS_FIELD_NUMBER = 5
      |  final val OCCURRENCES_FIELD_NUMBER = 6
      |  final val DIAGNOSTICS_FIELD_NUMBER = 7
      |  final val SYNTHETICS_FIELD_NUMBER = 12
      |  def of(
      |    schema: scala.meta.internal.semanticdb.Schema,
      |    uri: _root_.scala.Predef.String,
      |    text: _root_.scala.Predef.String,
      |    md5: _root_.scala.Predef.String,
      |    language: scala.meta.internal.semanticdb.Language,
      |    symbols: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolInformation],
      |    occurrences: _root_.scala.Seq[scala.meta.internal.semanticdb.SymbolOccurrence],
      |    diagnostics: _root_.scala.Seq[scala.meta.internal.semanticdb.Diagnostic],
      |    synthetics: _root_.scala.Seq[scala.meta.internal.semanticdb.Synthetic]
      |  ): _root_.scala.meta.internal.semanticdb.TextDocument = _root_.scala.meta.internal.semanticdb.TextDocument(
      |    schema,
      |    uri,
      |    text,
      |    md5,
      |    language,
      |    symbols,
      |    occurrences,
      |    diagnostics,
      |    synthetics
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.TextDocument])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/TextDocuments.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |@SerialVersionUID(0L)
      |final case class TextDocuments(
      |    documents: _root_.scala.Seq[scala.meta.internal.semanticdb.TextDocument] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TextDocuments] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      documents.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      documents.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def clearDocuments = copy(documents = _root_.scala.Seq.empty)
      |    def addDocuments(__vs: scala.meta.internal.semanticdb.TextDocument *): TextDocuments = addAllDocuments(__vs)
      |    def addAllDocuments(__vs: Iterable[scala.meta.internal.semanticdb.TextDocument]): TextDocuments = copy(documents = documents ++ __vs)
      |    def withDocuments(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.TextDocument]): TextDocuments = copy(documents = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => documents
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(documents.iterator.map(_.toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.TextDocuments.type = scala.meta.internal.semanticdb.TextDocuments
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.TextDocuments])
      |}
      |
      |object TextDocuments extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TextDocuments] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TextDocuments] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TextDocuments = {
      |    val __documents: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.TextDocument] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.TextDocument]
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __documents += _root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TextDocument](_input__)
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.TextDocuments(
      |        documents = __documents.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TextDocuments] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TextDocuments(
      |        documents = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TextDocument]]).getOrElse(_root_.scala.Seq.empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(0)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(0)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TextDocument
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.e""".stripMargin) + new String(s"""|mpty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TextDocuments(
      |    documents = _root_.scala.Seq.empty
      |  )
      |  implicit class TextDocumentsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TextDocuments]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TextDocuments](_l) {
      |    def documents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.TextDocument]] = field(_.documents)((c_, f_) => c_.copy(documents = f_))
      |  }
      |  final val DOCUMENTS_FIELD_NUMBER = 1
      |  def of(
      |    documents: _root_.scala.Seq[scala.meta.internal.semanticdb.TextDocument]
      |  ): _root_.scala.meta.internal.semanticdb.TextDocuments = _root_.scala.meta.internal.semanticdb.TextDocuments(
      |    documents
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.TextDocuments])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Tree.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed trait Tree extends scalapb.GeneratedSealedOneof {
      |  type MessageType = scala.meta.internal.semanticdb.TreeMessage
      |  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Tree.Empty.type]
      |  final def isDefined = !isEmpty
      |  final def asMessage: scala.meta.internal.semanticdb.TreeMessage = scala.meta.internal.semanticdb.Tree.TreeTypeMapper.toBase(this)
      |  final def asNonEmpty: Option[scala.meta.internal.semanticdb.Tree.NonEmpty] = if (isEmpty) None else Some(this.asInstanceOf[scala.meta.internal.semanticdb.Tree.NonEmpty])
      |}
      |
      |object Tree {
      |  case object Empty extends scala.meta.internal.semanticdb.Tree
      |  
      |  sealed trait NonEmpty extends scala.meta.internal.semanticdb.Tree
      |  def defaultInstance: scala.meta.internal.semanticdb.Tree = Empty
      |  
      |  implicit val TreeTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] {
      |    override def toCustom(__base: scala.meta.internal.semanticdb.TreeMessage): scala.meta.internal.semanticdb.Tree = __base.sealedValue match {
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree => __v.value
      |      case __v: scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree => __v.value
      |      case scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty => Empty
      |    }
      |    override def toBase(__custom: scala.meta.internal.semanticdb.Tree): scala.meta.internal.semanticdb.TreeMessage = scala.meta.internal.semanticdb.TreeMessage(__custom match {
      |      case __v: scala.meta.internal.semanticdb.ApplyTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(__v)
      |      case __v: scala.meta.internal.semanticdb.FunctionTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(__v)
      |      case __v: scala.meta.internal.semanticdb.IdTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(__v)
      |      case __v: scala.meta.internal.semanticdb.LiteralTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(__v)
      |      case __v: scala.meta.internal.semanticdb.MacroExpansionTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(__v)
      |      case __v: scala.meta.internal.semanticdb.OriginalTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(__v)
      |      case __v: scala.meta.internal.semanticdb.SelectTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(__v)
      |      case __v: scala.meta.internal.semanticdb.TypeApplyTree => scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(__v)
      |      case Empty => scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty
      |    })
      |  }
      |}
      |@SerialVersionUID(0L)
      |final case class TreeMessage(
      |    sealedValue: scala.meta.internal.semanticdb.TreeMessage.SealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TreeMessage] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (sealedValue.applyTree.isDefined) {
      |        val __value = sealedValue.applyTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.functionTree.isDefined) {
      |        val __value = sealedValue.functionTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.idTree.isDefined) {
      |        val __value = sealedValue.idTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.literalTree.isDefined) {
      |        val __value = sealedValue.literalTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.macroExpansionTree.isDefined) {
      |     """.stripMargin) + new String(s"""|   val __value = sealedValue.macroExpansionTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.originalTree.isDefined) {
      |        val __value = sealedValue.originalTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.selectTree.isDefined) {
      |        val __value = sealedValue.selectTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.typeApplyTree.isDefined) {
      |        val __value = sealedValue.typeApplyTree.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      sealedValue.applyTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.functionTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.idTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.literalTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(4, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.macroExpansionTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(5, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.originalTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(6, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.selectTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(7, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.typeApplyTree.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(8, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def getApplyTree: scala.meta.internal.semanticdb.ApplyTree = sealedValue.applyTree.getOrElse(scala.meta.internal.semanticdb.ApplyTree.defaultInstance)
      |    def withApplyTree(__v: scala.meta.internal.semanticdb.ApplyTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(__v))
      |    def getFunctionTree: scala.meta.internal.semanticdb.FunctionTree = sealedValue.functionTree.getOrElse(scala.meta.internal.semanticdb.FunctionTree.defaultInstance)
      |    def withFunctionTree(__v: scala.meta.internal.semanticdb.FunctionTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(__v))
      |    def getIdTree: scala.meta.internal.semanticdb.IdTree = sealedValue.idTree.getOrElse(scala.meta.internal.semanticdb.IdTree.defaultInstance)
      |    def withIdTree(__v: scala.meta.internal.semanticdb.IdTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(__v))
      |    def getLiteralTree: scala.meta.internal.semanticdb.LiteralTree = sealedValue.literalTree.getOrElse(scala.meta.internal.semanticdb.LiteralTree.defaultInstance)
      |    def withLiteralTree(__v: scala.meta.internal.semanticdb.LiteralTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(__v))
      |    def getMacroExpansionTree: scala.meta.internal.semanticdb.MacroExpansionTree = sealedValue.macroExpansionTree.getOrElse(scala.meta.internal.semanticdb.MacroExpansionTree.defaultInstance)
      |    def withMacroExpansionTree(__v: scala.meta.internal.semanticdb.MacroExpansionTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(__v))
      |    def getOriginalTree: scala.meta.internal.semanticdb.OriginalTree = sealedValue.originalTree.getOrElse(scala.meta.internal.semanticdb.OriginalTree.defaultInstance)
      |    def withOriginalTree(__v: scala.meta.internal.semanticdb.OriginalTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(__v))
      |    def getSelectTree: scala.meta.int""".stripMargin) + new String(s"""|ernal.semanticdb.SelectTree = sealedValue.selectTree.getOrElse(scala.meta.internal.semanticdb.SelectTree.defaultInstance)
      |    def withSelectTree(__v: scala.meta.internal.semanticdb.SelectTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(__v))
      |    def getTypeApplyTree: scala.meta.internal.semanticdb.TypeApplyTree = sealedValue.typeApplyTree.getOrElse(scala.meta.internal.semanticdb.TypeApplyTree.defaultInstance)
      |    def withTypeApplyTree(__v: scala.meta.internal.semanticdb.TypeApplyTree): TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(__v))
      |    def clearSealedValue: TreeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty)
      |    def withSealedValue(__v: scala.meta.internal.semanticdb.TreeMessage.SealedValue): TreeMessage = copy(sealedValue = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.applyTree.orNull
      |        case 2 => sealedValue.functionTree.orNull
      |        case 3 => sealedValue.idTree.orNull
      |        case 4 => sealedValue.literalTree.orNull
      |        case 5 => sealedValue.macroExpansionTree.orNull
      |        case 6 => sealedValue.originalTree.orNull
      |        case 7 => sealedValue.selectTree.orNull
      |        case 8 => sealedValue.typeApplyTree.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.applyTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => sealedValue.functionTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 3 => sealedValue.idTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 4 => sealedValue.literalTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 5 => sealedValue.macroExpansionTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 6 => sealedValue.originalTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 7 => sealedValue.selectTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 8 => sealedValue.typeApplyTree.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.TreeMessage.type = scala.meta.internal.semanticdb.TreeMessage
      |    def toTree: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.Tree.TreeTypeMapper.toCustom(this)
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.Tree])
      |}
      |
      |object TreeMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TreeMessage] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TreeMessage] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TreeMessage = {
      |    var __sealedValue: scala.meta.internal.semanticdb.TreeMessage.SealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(__sealedValue.applyTree.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ApplyTree](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(__sealedValue.functionTree.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.FunctionTree](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 26 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(__sealedValue.idTree.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.IdTree](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 34 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(__sealedValue.literalTree.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.LiteralTree](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 42 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(__sealedValue.macroExpansionTree.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.MacroExpansionTree](_input""".stripMargin) + new String(s"""|__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 50 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(__sealedValue.originalTree.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.OriginalTree](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 58 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(__sealedValue.selectTree.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.SelectTree](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 66 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(__sealedValue.typeApplyTree.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeApplyTree](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.TreeMessage(
      |        sealedValue = __sealedValue
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TreeMessage] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TreeMessage(
      |        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ApplyTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(_))
      |            .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.FunctionTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(_)))
      |            .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.IdTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(_)))
      |            .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.LiteralTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(_)))
      |            .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.MacroExpansionTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(_)))
      |            .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.OriginalTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(_)))
      |            .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.SelectTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(_)))
      |            .orElse[scala.meta.internal.semanticdb.TreeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.TypeApplyTree]]).map(scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(_)))
      |            .getOrElse(scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(52)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(52)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.ApplyTree
      |      case 2 => __out = scala.meta.internal.semanticdb.FunctionTree
      |      case 3 => __out = scala.meta.internal.semanticdb.IdTree
      |      case 4 => __out = scala.meta.internal.semanticdb.LiteralTree
      |      case 5 => __out = scala.meta.internal.semanticdb.MacroExpansionTree
      |      case 6 => __out = scala.meta.internal.semanticdb.OriginalTree
      |      case 7 => __out = scala.meta.internal.semanticdb.SelectTree
      |      case 8 => __out = scala.meta.internal.semanticdb.TypeApplyTree
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMess""".stripMargin) + new String(s"""|ageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TreeMessage(
      |    sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.Empty
      |  )
      |  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
      |    def isEmpty: _root_.scala.Boolean = false
      |    def isDefined: _root_.scala.Boolean = true
      |    def isApplyTree: _root_.scala.Boolean = false
      |    def isFunctionTree: _root_.scala.Boolean = false
      |    def isIdTree: _root_.scala.Boolean = false
      |    def isLiteralTree: _root_.scala.Boolean = false
      |    def isMacroExpansionTree: _root_.scala.Boolean = false
      |    def isOriginalTree: _root_.scala.Boolean = false
      |    def isSelectTree: _root_.scala.Boolean = false
      |    def isTypeApplyTree: _root_.scala.Boolean = false
      |    def applyTree: _root_.scala.Option[scala.meta.internal.semanticdb.ApplyTree] = _root_.scala.None
      |    def functionTree: _root_.scala.Option[scala.meta.internal.semanticdb.FunctionTree] = _root_.scala.None
      |    def idTree: _root_.scala.Option[scala.meta.internal.semanticdb.IdTree] = _root_.scala.None
      |    def literalTree: _root_.scala.Option[scala.meta.internal.semanticdb.LiteralTree] = _root_.scala.None
      |    def macroExpansionTree: _root_.scala.Option[scala.meta.internal.semanticdb.MacroExpansionTree] = _root_.scala.None
      |    def originalTree: _root_.scala.Option[scala.meta.internal.semanticdb.OriginalTree] = _root_.scala.None
      |    def selectTree: _root_.scala.Option[scala.meta.internal.semanticdb.SelectTree] = _root_.scala.None
      |    def typeApplyTree: _root_.scala.Option[scala.meta.internal.semanticdb.TypeApplyTree] = _root_.scala.None
      |  }
      |  object SealedValue {
      |    @SerialVersionUID(0L)
      |    case object Empty extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = _root_.scala.Nothing
      |      override def isEmpty: _root_.scala.Boolean = true
      |      override def isDefined: _root_.scala.Boolean = false
      |      override def number: _root_.scala.Int = 0
      |      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      |    }
      |  
      |    @SerialVersionUID(0L)
      |    final case class ApplyTree(value: scala.meta.internal.semanticdb.ApplyTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ApplyTree
      |      override def isApplyTree: _root_.scala.Boolean = true
      |      override def applyTree: _root_.scala.Option[scala.meta.internal.semanticdb.ApplyTree] = Some(value)
      |      override def number: _root_.scala.Int = 1
      |    }
      |    @SerialVersionUID(0L)
      |    final case class FunctionTree(value: scala.meta.internal.semanticdb.FunctionTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.FunctionTree
      |      override def isFunctionTree: _root_.scala.Boolean = true
      |      override def functionTree: _root_.scala.Option[scala.meta.internal.semanticdb.FunctionTree] = Some(value)
      |      override def number: _root_.scala.Int = 2
      |    }
      |    @SerialVersionUID(0L)
      |    final case class IdTree(value: scala.meta.internal.semanticdb.IdTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.IdTree
      |      override def isIdTree: _root_.scala.Boolean = true
      |      override def idTree: _root_.scala.Option[scala.meta.internal.semanticdb.IdTree] = Some(value)
      |      override def number: _root_.scala.Int = 3
      |    }
      |    @SerialVersionUID(0L)
      |    final case class LiteralTree(value: scala.meta.internal.semanticdb.LiteralTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.LiteralTree
      |      override def isLiteralTree: _root_.scala.Boolean = true
      |      override def literalTree: _root_.scala.Option[scala.meta.internal.semanticdb.LiteralTree] = Some(value)
      |      override def number: _root_.scala.Int = 4
      |    }
      |    @SerialVersionUID(0L)
      |    final case class MacroExpansionTree(value: scala.meta.internal.semanticdb.MacroExpansionTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.MacroExpansionTree
      |      override def isMacroExpansionTree: _root_.scala.Boolean = true
      |      override def macroExpansionTree: _root_.scala.Option[scala.meta.internal.semanticdb.MacroExpansionTree] = Some(value)
      |      override def number: _root_.scala.Int = 5
      |    }
      |    @SerialVersionUID(0L)
      |    final case class OriginalTree(value: scala.meta.internal.semanticdb.OriginalTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.OriginalTree
      |      override def isOriginalTree: _root_.scala.Boolean = true
      |      override def originalTree: _root_.scala.Option[scala.meta.internal.semanticdb.OriginalTree]""".stripMargin) + new String(s"""| = Some(value)
      |      override def number: _root_.scala.Int = 6
      |    }
      |    @SerialVersionUID(0L)
      |    final case class SelectTree(value: scala.meta.internal.semanticdb.SelectTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.SelectTree
      |      override def isSelectTree: _root_.scala.Boolean = true
      |      override def selectTree: _root_.scala.Option[scala.meta.internal.semanticdb.SelectTree] = Some(value)
      |      override def number: _root_.scala.Int = 7
      |    }
      |    @SerialVersionUID(0L)
      |    final case class TypeApplyTree(value: scala.meta.internal.semanticdb.TypeApplyTree) extends scala.meta.internal.semanticdb.TreeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.TypeApplyTree
      |      override def isTypeApplyTree: _root_.scala.Boolean = true
      |      override def typeApplyTree: _root_.scala.Option[scala.meta.internal.semanticdb.TypeApplyTree] = Some(value)
      |      override def number: _root_.scala.Int = 8
      |    }
      |  }
      |  implicit class TreeMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TreeMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TreeMessage](_l) {
      |    def applyTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ApplyTree] = field(_.getApplyTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.ApplyTree(f_)))
      |    def functionTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.FunctionTree] = field(_.getFunctionTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.FunctionTree(f_)))
      |    def idTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IdTree] = field(_.getIdTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.IdTree(f_)))
      |    def literalTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.LiteralTree] = field(_.getLiteralTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.LiteralTree(f_)))
      |    def macroExpansionTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MacroExpansionTree] = field(_.getMacroExpansionTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.MacroExpansionTree(f_)))
      |    def originalTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.OriginalTree] = field(_.getOriginalTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.OriginalTree(f_)))
      |    def selectTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SelectTree] = field(_.getSelectTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.SelectTree(f_)))
      |    def typeApplyTree: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeApplyTree] = field(_.getTypeApplyTree)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TreeMessage.SealedValue.TypeApplyTree(f_)))
      |    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TreeMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
      |  }
      |  final val APPLY_TREE_FIELD_NUMBER = 1
      |  final val FUNCTION_TREE_FIELD_NUMBER = 2
      |  final val ID_TREE_FIELD_NUMBER = 3
      |  final val LITERAL_TREE_FIELD_NUMBER = 4
      |  final val MACRO_EXPANSION_TREE_FIELD_NUMBER = 5
      |  final val ORIGINAL_TREE_FIELD_NUMBER = 6
      |  final val SELECT_TREE_FIELD_NUMBER = 7
      |  final val TYPE_APPLY_TREE_FIELD_NUMBER = 8
      |  def of(
      |    sealedValue: scala.meta.internal.semanticdb.TreeMessage.SealedValue
      |  ): _root_.scala.meta.internal.semanticdb.TreeMessage = _root_.scala.meta.internal.semanticdb.TreeMessage(
      |    sealedValue
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.Tree])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ApplyTree(
      |    function: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    arguments: _root_.scala.Seq[scala.meta.internal.semanticdb.Tree] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.lenses.Updatable[ApplyTree] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toBase(function)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      arguments.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.ApplyT""".stripMargin) + new String(s"""|ree._typemapper_arguments.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toBase(function)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      arguments.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.ApplyTree._typemapper_arguments.toBase(__v)
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def withFunction(__v: scala.meta.internal.semanticdb.Tree): ApplyTree = copy(function = __v)
      |    def clearArguments = copy(arguments = _root_.scala.Seq.empty)
      |    def addArguments(__vs: scala.meta.internal.semanticdb.Tree *): ApplyTree = addAllArguments(__vs)
      |    def addAllArguments(__vs: Iterable[scala.meta.internal.semanticdb.Tree]): ApplyTree = copy(arguments = arguments ++ __vs)
      |    def withArguments(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Tree]): ApplyTree = copy(arguments = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toBase(function)
      |          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => arguments.iterator.map(scala.meta.internal.semanticdb.ApplyTree._typemapper_arguments.toBase(_)).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toBase(function).toPMessage
      |        case 2 => _root_.scalapb.descriptors.PRepeated(arguments.iterator.map(scala.meta.internal.semanticdb.ApplyTree._typemapper_arguments.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.ApplyTree.type = scala.meta.internal.semanticdb.ApplyTree
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.ApplyTree])
      |}
      |
      |object ApplyTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ApplyTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ApplyTree] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ApplyTree = {
      |    var __function: _root_.scala.Option[scala.meta.internal.semanticdb.TreeMessage] = _root_.scala.None
      |    val __arguments: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Tree] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Tree]
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __function = _root_.scala.Some(__function.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TreeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __arguments += scala.meta.internal.semanticdb.ApplyTree._typemapper_arguments.toCustom(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TreeMessage](_input__))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ApplyTree(
      |        function = scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toCustom(__function.getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
      |        arguments = __arguments.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ApplyTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ApplyTree(
      |        function = scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toCustom(__fieldsMap.get""".stripMargin) + new String(s"""|(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
      |        arguments = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TreeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.ApplyTree._typemapper_arguments.toCustom(_)).toSeq
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(53)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(53)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TreeMessage
      |      case 2 => __out = scala.meta.internal.semanticdb.TreeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ApplyTree(
      |    function = scala.meta.internal.semanticdb.ApplyTree._typemapper_function.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    arguments = _root_.scala.Seq.empty
      |  )
      |  implicit class ApplyTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ApplyTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ApplyTree](_l) {
      |    def function: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.function)((c_, f_) => c_.copy(function = f_))
      |    def arguments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Tree]] = field(_.arguments)((c_, f_) => c_.copy(arguments = f_))
      |  }
      |  final val FUNCTION_FIELD_NUMBER = 1
      |  final val ARGUMENTS_FIELD_NUMBER = 2
      |  @transient
      |  private[semanticdb] val _typemapper_function: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  @transient
      |  private[semanticdb] val _typemapper_arguments: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  def of(
      |    function: scala.meta.internal.semanticdb.Tree,
      |    arguments: _root_.scala.Seq[scala.meta.internal.semanticdb.Tree]
      |  ): _root_.scala.meta.internal.semanticdb.ApplyTree = _root_.scala.meta.internal.semanticdb.ApplyTree(
      |    function,
      |    arguments
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.ApplyTree])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class FunctionTree(
      |    parameters: _root_.scala.Seq[scala.meta.internal.semanticdb.IdTree] = _root_.scala.Seq.empty,
      |    body: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.lenses.Updatable[FunctionTree] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      parameters.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toBase(body)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      parameters.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      {
      |        val __v = scala.met""".stripMargin) + new String(s"""|a.internal.semanticdb.FunctionTree._typemapper_body.toBase(body)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(2, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def clearParameters = copy(parameters = _root_.scala.Seq.empty)
      |    def addParameters(__vs: scala.meta.internal.semanticdb.IdTree *): FunctionTree = addAllParameters(__vs)
      |    def addAllParameters(__vs: Iterable[scala.meta.internal.semanticdb.IdTree]): FunctionTree = copy(parameters = parameters ++ __vs)
      |    def withParameters(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.IdTree]): FunctionTree = copy(parameters = __v)
      |    def withBody(__v: scala.meta.internal.semanticdb.Tree): FunctionTree = copy(body = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => parameters
      |        case 2 => {
      |          val __t = scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toBase(body)
      |          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(parameters.iterator.map(_.toPMessage).toVector)
      |        case 2 => scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toBase(body).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.FunctionTree.type = scala.meta.internal.semanticdb.FunctionTree
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.FunctionTree])
      |}
      |
      |object FunctionTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.FunctionTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.FunctionTree] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.FunctionTree = {
      |    val __parameters: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.IdTree] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.IdTree]
      |    var __body: _root_.scala.Option[scala.meta.internal.semanticdb.TreeMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __parameters += _root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.IdTree](_input__)
      |        case 18 =>
      |          __body = _root_.scala.Some(__body.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TreeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.FunctionTree(
      |        parameters = __parameters.result(),
      |        body = scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toCustom(__body.getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance))
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.FunctionTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.FunctionTree(
      |        parameters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.IdTree]]).getOrElse(_root_.scala.Seq.empty),
      |        body = scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(54)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(54)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.IdTree
      |      case 2 => __out = scala.meta.internal.semanticdb.TreeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesComp""".stripMargin) + new String(s"""|anions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.FunctionTree(
      |    parameters = _root_.scala.Seq.empty,
      |    body = scala.meta.internal.semanticdb.FunctionTree._typemapper_body.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)
      |  )
      |  implicit class FunctionTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.FunctionTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.FunctionTree](_l) {
      |    def parameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.IdTree]] = field(_.parameters)((c_, f_) => c_.copy(parameters = f_))
      |    def body: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.body)((c_, f_) => c_.copy(body = f_))
      |  }
      |  final val PARAMETERS_FIELD_NUMBER = 1
      |  final val BODY_FIELD_NUMBER = 2
      |  @transient
      |  private[semanticdb] val _typemapper_body: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  def of(
      |    parameters: _root_.scala.Seq[scala.meta.internal.semanticdb.IdTree],
      |    body: scala.meta.internal.semanticdb.Tree
      |  ): _root_.scala.meta.internal.semanticdb.FunctionTree = _root_.scala.meta.internal.semanticdb.FunctionTree(
      |    parameters,
      |    body
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.FunctionTree])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class IdTree(
      |    symbol: _root_.scala.Predef.String = ""
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.lenses.Updatable[IdTree] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = symbol
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = symbol
      |        if (!__v.isEmpty) {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |    }
      |    def withSymbol(__v: _root_.scala.Predef.String): IdTree = copy(symbol = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(symbol)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.IdTree.type = scala.meta.internal.semanticdb.IdTree
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.IdTree])
      |}
      |
      |object IdTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IdTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IdTree] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.IdTree = {
      |    var __symbol: _root_.scala.Predef.String = ""
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __symbol = _input__.readStringRequireUtf8()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.IdTree(
      |        symbol = __symbol
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.IdTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.IdTree(
      |        symbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(""".stripMargin) + new String(s"""|1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(55)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(55)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.IdTree(
      |    symbol = ""
      |  )
      |  implicit class IdTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IdTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.IdTree](_l) {
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |  }
      |  final val SYMBOL_FIELD_NUMBER = 1
      |  def of(
      |    symbol: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.IdTree = _root_.scala.meta.internal.semanticdb.IdTree(
      |    symbol
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.IdTree])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class LiteralTree(
      |    constant: scala.meta.internal.semanticdb.Constant = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toCustom(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.lenses.Updatable[LiteralTree] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toBase(constant)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toBase(constant)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def withConstant(__v: scala.meta.internal.semanticdb.Constant): LiteralTree = copy(constant = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toBase(constant)
      |          if (__t != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toBase(constant).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.LiteralTree.type = scala.meta.internal.semanticdb.LiteralTree
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.LiteralTree])
      |}
      |
      |object LiteralTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.LiteralTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.LiteralTree] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.LiteralTree = {
      |    var __constant: _root_.scala.Option[scala.meta.internal.semanticdb.ConstantMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __constant = _root_.scala.Some(__constant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ConstantMessage](_in""".stripMargin) + new String(s"""|put__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.LiteralTree(
      |        constant = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toCustom(__constant.getOrElse(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance))
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.LiteralTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.LiteralTree(
      |        constant = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.ConstantMessage]).getOrElse(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(56)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(56)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.ConstantMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.LiteralTree(
      |    constant = scala.meta.internal.semanticdb.LiteralTree._typemapper_constant.toCustom(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance)
      |  )
      |  implicit class LiteralTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.LiteralTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.LiteralTree](_l) {
      |    def constant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Constant] = field(_.constant)((c_, f_) => c_.copy(constant = f_))
      |  }
      |  final val CONSTANT_FIELD_NUMBER = 1
      |  @transient
      |  private[semanticdb] val _typemapper_constant: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant]]
      |  def of(
      |    constant: scala.meta.internal.semanticdb.Constant
      |  ): _root_.scala.meta.internal.semanticdb.LiteralTree = _root_.scala.meta.internal.semanticdb.LiteralTree(
      |    constant
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.LiteralTree])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class MacroExpansionTree(
      |    beforeExpansion: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.lenses.Updatable[MacroExpansionTree] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toBase(beforeExpansion)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(tpe)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |    """.stripMargin) + new String(s"""|    val __v = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toBase(beforeExpansion)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      {
      |        val __v = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(tpe)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(2, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def withBeforeExpansion(__v: scala.meta.internal.semanticdb.Tree): MacroExpansionTree = copy(beforeExpansion = __v)
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): MacroExpansionTree = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toBase(beforeExpansion)
      |          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => {
      |          val __t = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toBase(beforeExpansion).toPMessage
      |        case 2 => scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.MacroExpansionTree.type = scala.meta.internal.semanticdb.MacroExpansionTree
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.MacroExpansionTree])
      |}
      |
      |object MacroExpansionTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MacroExpansionTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MacroExpansionTree] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.MacroExpansionTree = {
      |    var __beforeExpansion: _root_.scala.Option[scala.meta.internal.semanticdb.TreeMessage] = _root_.scala.None
      |    var __tpe: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __beforeExpansion = _root_.scala.Some(__beforeExpansion.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TreeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __tpe = _root_.scala.Some(__tpe.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.MacroExpansionTree(
      |        beforeExpansion = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toCustom(__beforeExpansion.getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
      |        tpe = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(__tpe.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.MacroExpansionTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.MacroExpansionTree(
      |        beforeExpansion = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
      |        tpe = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaD""".stripMargin) + new String(s"""|escriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(57)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(57)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TreeMessage
      |      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.MacroExpansionTree(
      |    beforeExpansion = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_beforeExpansion.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    tpe = scala.meta.internal.semanticdb.MacroExpansionTree._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class MacroExpansionTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MacroExpansionTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.MacroExpansionTree](_l) {
      |    def beforeExpansion: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.beforeExpansion)((c_, f_) => c_.copy(beforeExpansion = f_))
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val BEFORE_EXPANSION_FIELD_NUMBER = 1
      |  final val TPE_FIELD_NUMBER = 2
      |  @transient
      |  private[semanticdb] val _typemapper_beforeExpansion: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  @transient
      |  private[semanticdb] val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    beforeExpansion: scala.meta.internal.semanticdb.Tree,
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.MacroExpansionTree = _root_.scala.meta.internal.semanticdb.MacroExpansionTree(
      |    beforeExpansion,
      |    tpe
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.MacroExpansionTree])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class OriginalTree(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.lenses.Updatable[OriginalTree] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (range.isDefined) {
      |        val __value = range.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      range.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def getRange: scala.meta.internal.semanticdb.Range = range.getOrElse(scala.meta.internal.semanticdb.Range.defaultInstance)
      |    def clearRange: OriginalTree = copy(range = _root_.scala.None)
      |    def withRange(__v: scala.meta.internal.semanticdb.Range): OriginalTree = copy(range = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => range.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextForm""".stripMargin) + new String(s"""|at.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.OriginalTree.type = scala.meta.internal.semanticdb.OriginalTree
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.OriginalTree])
      |}
      |
      |object OriginalTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.OriginalTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.OriginalTree] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.OriginalTree = {
      |    var __range: _root_.scala.Option[scala.meta.internal.semanticdb.Range] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __range = Option(__range.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Range](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.OriginalTree(
      |        range = __range
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.OriginalTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.OriginalTree(
      |        range = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Range]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(58)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(58)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Range
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.OriginalTree(
      |    range = _root_.scala.None
      |  )
      |  implicit class OriginalTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.OriginalTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.OriginalTree](_l) {
      |    def range: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Range] = field(_.getRange)((c_, f_) => c_.copy(range = Option(f_)))
      |    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Range]] = field(_.range)((c_, f_) => c_.copy(range = f_))
      |  }
      |  final val RANGE_FIELD_NUMBER = 1
      |  def of(
      |    range: _root_.scala.Option[scala.meta.internal.semanticdb.Range]
      |  ): _root_.scala.meta.internal.semanticdb.OriginalTree = _root_.scala.meta.internal.semanticdb.OriginalTree(
      |    range
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.OriginalTree])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class SelectTree(
      |    qualifier: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    id: _root_.scala.Option[scala.meta.internal.semanticdb.IdTree] = _root_.scala.None
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.lenses.Updatable[SelectTree] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toBase(qualifier)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      if (id.isDefined) {
      |        val __value = id.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized """.stripMargin) + new String(s"""|= __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toBase(qualifier)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      id.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def withQualifier(__v: scala.meta.internal.semanticdb.Tree): SelectTree = copy(qualifier = __v)
      |    def getId: scala.meta.internal.semanticdb.IdTree = id.getOrElse(scala.meta.internal.semanticdb.IdTree.defaultInstance)
      |    def clearId: SelectTree = copy(id = _root_.scala.None)
      |    def withId(__v: scala.meta.internal.semanticdb.IdTree): SelectTree = copy(id = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toBase(qualifier)
      |          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => id.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toBase(qualifier).toPMessage
      |        case 2 => id.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.SelectTree.type = scala.meta.internal.semanticdb.SelectTree
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.SelectTree])
      |}
      |
      |object SelectTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SelectTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SelectTree] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SelectTree = {
      |    var __qualifier: _root_.scala.Option[scala.meta.internal.semanticdb.TreeMessage] = _root_.scala.None
      |    var __id: _root_.scala.Option[scala.meta.internal.semanticdb.IdTree] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __qualifier = _root_.scala.Some(__qualifier.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TreeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __id = Option(__id.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.IdTree](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.SelectTree(
      |        qualifier = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toCustom(__qualifier.getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
      |        id = __id
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SelectTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.SelectTree(
      |        qualifier = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
      |        id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.IdTree]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(59)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(59)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.Tr""".stripMargin) + new String(s"""|eeMessage
      |      case 2 => __out = scala.meta.internal.semanticdb.IdTree
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.SelectTree(
      |    qualifier = scala.meta.internal.semanticdb.SelectTree._typemapper_qualifier.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    id = _root_.scala.None
      |  )
      |  implicit class SelectTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SelectTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SelectTree](_l) {
      |    def qualifier: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.qualifier)((c_, f_) => c_.copy(qualifier = f_))
      |    def id: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IdTree] = field(_.getId)((c_, f_) => c_.copy(id = Option(f_)))
      |    def optionalId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.IdTree]] = field(_.id)((c_, f_) => c_.copy(id = f_))
      |  }
      |  final val QUALIFIER_FIELD_NUMBER = 1
      |  final val ID_FIELD_NUMBER = 2
      |  @transient
      |  private[semanticdb] val _typemapper_qualifier: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  def of(
      |    qualifier: scala.meta.internal.semanticdb.Tree,
      |    id: _root_.scala.Option[scala.meta.internal.semanticdb.IdTree]
      |  ): _root_.scala.meta.internal.semanticdb.SelectTree = _root_.scala.meta.internal.semanticdb.SelectTree(
      |    qualifier,
      |    id
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.SelectTree])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class TypeApplyTree(
      |    function: scala.meta.internal.semanticdb.Tree = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    typeArguments: _root_.scala.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Tree.NonEmpty with scalapb.lenses.Updatable[TypeApplyTree] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toBase(function)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      typeArguments.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toBase(function)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      typeArguments.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toBase(__v)
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def withFunction(__v: scala.meta.internal.semanticdb.Tree): TypeApplyTree = copy(function = __v)
      |    def clearTypeArguments = copy(typeArguments = _root_.scala.Seq.empty)
      |    def addTypeArguments(__vs: scala.meta.internal.semanticdb.Type *): TypeApplyTree = addAllTypeArguments(__vs)
      |    def addAllTypeArguments(__vs: Iterable[scala.meta.internal.semanticdb.Type]): TypeApplyTree = copy(typeArguments = typeArguments ++ __vs)
      |    def withTypeArguments(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]): TypeApplyTree = copy(typeArguments = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.TypeA""".stripMargin) + new String(s"""|pplyTree._typemapper_function.toBase(function)
      |          if (__t != scala.meta.internal.semanticdb.TreeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => typeArguments.iterator.map(scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toBase(_)).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toBase(function).toPMessage
      |        case 2 => _root_.scalapb.descriptors.PRepeated(typeArguments.iterator.map(scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.TypeApplyTree.type = scala.meta.internal.semanticdb.TypeApplyTree
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.TypeApplyTree])
      |}
      |
      |object TypeApplyTree extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeApplyTree] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeApplyTree] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TypeApplyTree = {
      |    var __function: _root_.scala.Option[scala.meta.internal.semanticdb.TreeMessage] = _root_.scala.None
      |    val __typeArguments: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Type] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Type]
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __function = _root_.scala.Some(__function.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TreeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __typeArguments += scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toCustom(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.TypeApplyTree(
      |        function = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toCustom(__function.getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
      |        typeArguments = __typeArguments.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TypeApplyTree] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TypeApplyTree(
      |        function = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TreeMessage]).getOrElse(scala.meta.internal.semanticdb.TreeMessage.defaultInstance)),
      |        typeArguments = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.TypeApplyTree._typemapper_typeArguments.toCustom(_)).toSeq
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(60)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(60)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TreeMessage
      |      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TypeApplyTree(
      |    function = scala.meta.internal.semanticdb.TypeApplyTree._typemapper_function.toCustom(scala.meta.internal.semanticdb.TreeMessage.defaultInstance),
      |    typeArguments = _root_.scala.Seq.empty
      |  )
      |  implici""".stripMargin) + new String(s"""|t class TypeApplyTreeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeApplyTree]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TypeApplyTree](_l) {
      |    def function: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Tree] = field(_.function)((c_, f_) => c_.copy(function = f_))
      |    def typeArguments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Type]] = field(_.typeArguments)((c_, f_) => c_.copy(typeArguments = f_))
      |  }
      |  final val FUNCTION_FIELD_NUMBER = 1
      |  final val TYPE_ARGUMENTS_FIELD_NUMBER = 2
      |  @transient
      |  private[semanticdb] val _typemapper_function: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TreeMessage, scala.meta.internal.semanticdb.Tree]]
      |  @transient
      |  private[semanticdb] val _typemapper_typeArguments: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    function: scala.meta.internal.semanticdb.Tree,
      |    typeArguments: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]
      |  ): _root_.scala.meta.internal.semanticdb.TypeApplyTree = _root_.scala.meta.internal.semanticdb.TypeApplyTree(
      |    function,
      |    typeArguments
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeApplyTree])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticdb/Type.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticdb
      |
      |sealed trait Type extends scalapb.GeneratedSealedOneof {
      |  type MessageType = scala.meta.internal.semanticdb.TypeMessage
      |  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticdb.Type.Empty.type]
      |  final def isDefined = !isEmpty
      |  final def asMessage: scala.meta.internal.semanticdb.TypeMessage = scala.meta.internal.semanticdb.Type.TypeTypeMapper.toBase(this)
      |  final def asNonEmpty: Option[scala.meta.internal.semanticdb.Type.NonEmpty] = if (isEmpty) None else Some(this.asInstanceOf[scala.meta.internal.semanticdb.Type.NonEmpty])
      |}
      |
      |object Type {
      |  case object Empty extends scala.meta.internal.semanticdb.Type
      |  
      |  sealed trait NonEmpty extends scala.meta.internal.semanticdb.Type
      |  def defaultInstance: scala.meta.internal.semanticdb.Type = Empty
      |  
      |  implicit val TypeTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] {
      |    override def toCustom(__base: scala.meta.internal.semanticdb.TypeMessage): scala.meta.internal.semanticdb.Type = __base.sealedValue match {
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType => __v.value
      |      case __v: scala.meta.internal.semanticdb.TypeMessage.SealedValue.MatchType => __v.value
      |      case scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty => Empty
      |    }
      |    override def toBase(__custom: scala.meta.internal.semanticdb.Type): scala.meta.internal.semanticdb.TypeMessage = scala.meta.internal.semanticdb.TypeMessage(__custom match {
      |      case __v: scala.meta.internal.semanticdb.TypeRef => scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(__v)
      |      case __v: scala.meta.internal.semanticdb.SingleType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(__v)
      |      case __v: scala.meta.internal.semanticdb.ThisType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(__v)
      |      case __v: scala.meta.internal.semanticdb.SuperType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(__v)
      |      case __v: scala.meta.internal.semanticdb.ConstantType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(__v)
      |      case __v: scala.meta.internal.semanticdb.IntersectionType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(__v)
      |      case __v: scala.meta.internal.semanticdb.UnionType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(__v)
      |      case __v: scala.meta.internal.semanticdb.WithType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(__v)
      |      case __v: scala.meta.internal.semanticdb.StructuralType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType(__v)
      |      case __v: scala.meta.internal.semanticdb.AnnotatedType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(__v)
      |      case __v: scala.meta.internal.semanticdb.ExistentialType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(__v)
      |      case __v: scala.meta.internal.semanticdb.UniversalType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(__v)
      |      case __v: scala.meta.internal.semanticdb.ByNameType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(__v)
      |      case __v: scala.meta.internal.semanticdb.RepeatedType => scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType(__v)
      |      case __v: scala.meta.internal.semanticdb.MatchType => scala.meta.internal.semanticdb.TypeM""".stripMargin) + new String(s"""|essage.SealedValue.MatchType(__v)
      |      case Empty => scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty
      |    })
      |  }
      |}
      |@SerialVersionUID(0L)
      |final case class TypeMessage(
      |    sealedValue: scala.meta.internal.semanticdb.TypeMessage.SealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TypeMessage] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (sealedValue.typeRef.isDefined) {
      |        val __value = sealedValue.typeRef.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.singleType.isDefined) {
      |        val __value = sealedValue.singleType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.thisType.isDefined) {
      |        val __value = sealedValue.thisType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.superType.isDefined) {
      |        val __value = sealedValue.superType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.constantType.isDefined) {
      |        val __value = sealedValue.constantType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.intersectionType.isDefined) {
      |        val __value = sealedValue.intersectionType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.unionType.isDefined) {
      |        val __value = sealedValue.unionType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.withType.isDefined) {
      |        val __value = sealedValue.withType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.structuralType.isDefined) {
      |        val __value = sealedValue.structuralType.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.annotatedType.isDefined) {
      |        val __value = sealedValue.annotatedType.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.existentialType.isDefined) {
      |        val __value = sealedValue.existentialType.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.universalType.isDefined) {
      |        val __value = sealedValue.universalType.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.byNameType.isDefined) {
      |        val __value = sealedValue.byNameType.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.repeatedType.isDefined) {
      |        val __value = sealedValue.repeatedType.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.matchType.isDefined) {
      |        val __value = sealedValue.matchType.get
      |        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      sealedValue.typeRef.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.structuralType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(7, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)""".stripMargin) + new String(s"""|      };
      |      sealedValue.annotatedType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(8, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.existentialType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(9, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.universalType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(10, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.byNameType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(13, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.repeatedType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(14, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.intersectionType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(17, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.unionType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(18, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.withType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(19, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.singleType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(20, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.thisType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(21, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.superType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(22, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.constantType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(23, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.matchType.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(25, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def getTypeRef: scala.meta.internal.semanticdb.TypeRef = sealedValue.typeRef.getOrElse(scala.meta.internal.semanticdb.TypeRef.defaultInstance)
      |    def withTypeRef(__v: scala.meta.internal.semanticdb.TypeRef): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(__v))
      |    def getSingleType: scala.meta.internal.semanticdb.SingleType = sealedValue.singleType.getOrElse(scala.meta.internal.semanticdb.SingleType.defaultInstance)
      |    def withSingleType(__v: scala.meta.internal.semanticdb.SingleType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(__v))
      |    def getThisType: scala.meta.internal.semanticdb.ThisType = sealedValue.thisType.getOrElse(scala.meta.internal.semanticdb.ThisType.defaultInstance)
      |    def withThisType(__v: scala.meta.internal.semanticdb.ThisType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(__v))
      |    def getSuperType: scala.meta.internal.semanticdb.SuperType = sealedValue.superType.getOrElse(scala.meta.internal.semanticdb.SuperType.defaultInstance)
      |    def withSuperType(__v: scala.meta.internal.semanticdb.SuperType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(__v))
      |    def getConstantType: scala.meta.internal.semanticdb.ConstantType = sealedValue.constantType.getOrElse(scala.meta.internal.semanticdb.ConstantType.defaultInstance)
      |    def withConstantType(__v: scala.meta.internal.semanticdb.ConstantType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(__v))
      |    def getIntersectionType: scala.meta.internal.semanticdb.IntersectionType = sealedValue.intersectionType.getOrElse(scala.meta.internal.semanticdb.IntersectionType.defaultInstance)
      |    def withIntersectionType(__v: scala.meta.internal.semanticdb.IntersectionType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(__v))
      |    def getUnionType: scala.meta.internal.semanticdb.UnionType = sealedValue.unionType.getOrElse(scala.meta.internal.semanticdb.UnionType.defaultInstance)
      |    def withUnionType(__v: scala.meta.internal.semanticdb.UnionType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(__v))
      |    def getWithType: scala.meta.internal.semanticdb.W""".stripMargin) + new String(s"""|ithType = sealedValue.withType.getOrElse(scala.meta.internal.semanticdb.WithType.defaultInstance)
      |    def withWithType(__v: scala.meta.internal.semanticdb.WithType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(__v))
      |    def getStructuralType: scala.meta.internal.semanticdb.StructuralType = sealedValue.structuralType.getOrElse(scala.meta.internal.semanticdb.StructuralType.defaultInstance)
      |    def withStructuralType(__v: scala.meta.internal.semanticdb.StructuralType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType(__v))
      |    def getAnnotatedType: scala.meta.internal.semanticdb.AnnotatedType = sealedValue.annotatedType.getOrElse(scala.meta.internal.semanticdb.AnnotatedType.defaultInstance)
      |    def withAnnotatedType(__v: scala.meta.internal.semanticdb.AnnotatedType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(__v))
      |    def getExistentialType: scala.meta.internal.semanticdb.ExistentialType = sealedValue.existentialType.getOrElse(scala.meta.internal.semanticdb.ExistentialType.defaultInstance)
      |    def withExistentialType(__v: scala.meta.internal.semanticdb.ExistentialType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(__v))
      |    def getUniversalType: scala.meta.internal.semanticdb.UniversalType = sealedValue.universalType.getOrElse(scala.meta.internal.semanticdb.UniversalType.defaultInstance)
      |    def withUniversalType(__v: scala.meta.internal.semanticdb.UniversalType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(__v))
      |    def getByNameType: scala.meta.internal.semanticdb.ByNameType = sealedValue.byNameType.getOrElse(scala.meta.internal.semanticdb.ByNameType.defaultInstance)
      |    def withByNameType(__v: scala.meta.internal.semanticdb.ByNameType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(__v))
      |    def getRepeatedType: scala.meta.internal.semanticdb.RepeatedType = sealedValue.repeatedType.getOrElse(scala.meta.internal.semanticdb.RepeatedType.defaultInstance)
      |    def withRepeatedType(__v: scala.meta.internal.semanticdb.RepeatedType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType(__v))
      |    def getMatchType: scala.meta.internal.semanticdb.MatchType = sealedValue.matchType.getOrElse(scala.meta.internal.semanticdb.MatchType.defaultInstance)
      |    def withMatchType(__v: scala.meta.internal.semanticdb.MatchType): TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.MatchType(__v))
      |    def clearSealedValue: TypeMessage = copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty)
      |    def withSealedValue(__v: scala.meta.internal.semanticdb.TypeMessage.SealedValue): TypeMessage = copy(sealedValue = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 2 => sealedValue.typeRef.orNull
      |        case 20 => sealedValue.singleType.orNull
      |        case 21 => sealedValue.thisType.orNull
      |        case 22 => sealedValue.superType.orNull
      |        case 23 => sealedValue.constantType.orNull
      |        case 17 => sealedValue.intersectionType.orNull
      |        case 18 => sealedValue.unionType.orNull
      |        case 19 => sealedValue.withType.orNull
      |        case 7 => sealedValue.structuralType.orNull
      |        case 8 => sealedValue.annotatedType.orNull
      |        case 9 => sealedValue.existentialType.orNull
      |        case 10 => sealedValue.universalType.orNull
      |        case 13 => sealedValue.byNameType.orNull
      |        case 14 => sealedValue.repeatedType.orNull
      |        case 25 => sealedValue.matchType.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 2 => sealedValue.typeRef.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 20 => sealedValue.singleType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 21 => sealedValue.thisType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 22 => sealedValue.superType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 23 => sealedValue.constantType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 17 => sealedValue.intersectionType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 18 => sealedValue.unionType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 19 => sealedValue.withType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 7 => sealedValue.stru""".stripMargin) + new String(s"""|cturalType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 8 => sealedValue.annotatedType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 9 => sealedValue.existentialType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 10 => sealedValue.universalType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 13 => sealedValue.byNameType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 14 => sealedValue.repeatedType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 25 => sealedValue.matchType.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.TypeMessage.type = scala.meta.internal.semanticdb.TypeMessage
      |    def toType: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.Type.TypeTypeMapper.toCustom(this)
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.Type])
      |}
      |
      |object TypeMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeMessage] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeMessage] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TypeMessage = {
      |    var __sealedValue: scala.meta.internal.semanticdb.TypeMessage.SealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 18 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(__sealedValue.typeRef.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeRef](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 162 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(__sealedValue.singleType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.SingleType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 170 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(__sealedValue.thisType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ThisType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 178 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(__sealedValue.superType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.SuperType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 186 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(__sealedValue.constantType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ConstantType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 138 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(__sealedValue.intersectionType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.IntersectionType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 146 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(__sealedValue.unionType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.UnionType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 154 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(__sealedValue.withType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.WithType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 58 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType(__sealedValue.structuralType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.StructuralType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 66 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(__sealedValue.annotatedType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.AnnotatedType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 74 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(__sealedValue.existentialType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ExistentialType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 82 =>
      |          __se""".stripMargin) + new String(s"""|aledValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(__sealedValue.universalType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.UniversalType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 106 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(__sealedValue.byNameType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ByNameType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 114 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType(__sealedValue.repeatedType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.RepeatedType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 202 =>
      |          __sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.MatchType(__sealedValue.matchType.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.MatchType](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.TypeMessage(
      |        sealedValue = __sealedValue
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TypeMessage] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TypeMessage(
      |        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.TypeRef]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(_))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.SingleType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ThisType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.SuperType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ConstantType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.IntersectionType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.UnionType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.WithType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.StructuralType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.AnnotatedType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ExistentialType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.sem""".stripMargin) + new String(s"""|anticdb.UniversalType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.ByNameType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.RepeatedType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType(_)))
      |            .orElse[scala.meta.internal.semanticdb.TypeMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.MatchType]]).map(scala.meta.internal.semanticdb.TypeMessage.SealedValue.MatchType(_)))
      |            .getOrElse(scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(5)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(5)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 2 => __out = scala.meta.internal.semanticdb.TypeRef
      |      case 20 => __out = scala.meta.internal.semanticdb.SingleType
      |      case 21 => __out = scala.meta.internal.semanticdb.ThisType
      |      case 22 => __out = scala.meta.internal.semanticdb.SuperType
      |      case 23 => __out = scala.meta.internal.semanticdb.ConstantType
      |      case 17 => __out = scala.meta.internal.semanticdb.IntersectionType
      |      case 18 => __out = scala.meta.internal.semanticdb.UnionType
      |      case 19 => __out = scala.meta.internal.semanticdb.WithType
      |      case 7 => __out = scala.meta.internal.semanticdb.StructuralType
      |      case 8 => __out = scala.meta.internal.semanticdb.AnnotatedType
      |      case 9 => __out = scala.meta.internal.semanticdb.ExistentialType
      |      case 10 => __out = scala.meta.internal.semanticdb.UniversalType
      |      case 13 => __out = scala.meta.internal.semanticdb.ByNameType
      |      case 14 => __out = scala.meta.internal.semanticdb.RepeatedType
      |      case 25 => __out = scala.meta.internal.semanticdb.MatchType
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TypeMessage(
      |    sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.Empty
      |  )
      |  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
      |    def isEmpty: _root_.scala.Boolean = false
      |    def isDefined: _root_.scala.Boolean = true
      |    def isTypeRef: _root_.scala.Boolean = false
      |    def isSingleType: _root_.scala.Boolean = false
      |    def isThisType: _root_.scala.Boolean = false
      |    def isSuperType: _root_.scala.Boolean = false
      |    def isConstantType: _root_.scala.Boolean = false
      |    def isIntersectionType: _root_.scala.Boolean = false
      |    def isUnionType: _root_.scala.Boolean = false
      |    def isWithType: _root_.scala.Boolean = false
      |    def isStructuralType: _root_.scala.Boolean = false
      |    def isAnnotatedType: _root_.scala.Boolean = false
      |    def isExistentialType: _root_.scala.Boolean = false
      |    def isUniversalType: _root_.scala.Boolean = false
      |    def isByNameType: _root_.scala.Boolean = false
      |    def isRepeatedType: _root_.scala.Boolean = false
      |    def isMatchType: _root_.scala.Boolean = false
      |    def typeRef: _root_.scala.Option[scala.meta.internal.semanticdb.TypeRef] = _root_.scala.None
      |    def singleType: _root_.scala.Option[scala.meta.internal.semanticdb.SingleType] = _root_.scala.None
      |    def thisType: _root_.scala.Option[scala.meta.internal.semanticdb.ThisType] = _root_.scala.None
      |    def superType: _root_.scala.Option[scala.meta.internal.semanticdb.SuperType] = _root_.scala.None
      |    def constantType: _root_.scala.Option[scala.meta.internal.semanticdb.ConstantType] = _root_.scala.None
      |    def intersectionType: _root_.scala.Option[scala.meta.internal.semanticdb.IntersectionType] = _root_.scala.None
      |    def unionType: _root_.scala.Option[scala.meta.internal.semanticdb.UnionType] = _root_.scala.None
      |    def withType: _root_.scala.Option[scala.meta.internal.semanticdb.WithType] = _root_.scala.None
      |    def structuralType: _root_.scala.Option[scala.meta.internal.semanticdb.StructuralType] = _root_.scala.None
      |    def annotatedType: _root_.scala.Option[scala.meta.internal""".stripMargin) + new String(s"""|.semanticdb.AnnotatedType] = _root_.scala.None
      |    def existentialType: _root_.scala.Option[scala.meta.internal.semanticdb.ExistentialType] = _root_.scala.None
      |    def universalType: _root_.scala.Option[scala.meta.internal.semanticdb.UniversalType] = _root_.scala.None
      |    def byNameType: _root_.scala.Option[scala.meta.internal.semanticdb.ByNameType] = _root_.scala.None
      |    def repeatedType: _root_.scala.Option[scala.meta.internal.semanticdb.RepeatedType] = _root_.scala.None
      |    def matchType: _root_.scala.Option[scala.meta.internal.semanticdb.MatchType] = _root_.scala.None
      |  }
      |  object SealedValue {
      |    @SerialVersionUID(0L)
      |    case object Empty extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = _root_.scala.Nothing
      |      override def isEmpty: _root_.scala.Boolean = true
      |      override def isDefined: _root_.scala.Boolean = false
      |      override def number: _root_.scala.Int = 0
      |      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      |    }
      |  
      |    @SerialVersionUID(0L)
      |    final case class TypeRef(value: scala.meta.internal.semanticdb.TypeRef) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.TypeRef
      |      override def isTypeRef: _root_.scala.Boolean = true
      |      override def typeRef: _root_.scala.Option[scala.meta.internal.semanticdb.TypeRef] = Some(value)
      |      override def number: _root_.scala.Int = 2
      |    }
      |    @SerialVersionUID(0L)
      |    final case class SingleType(value: scala.meta.internal.semanticdb.SingleType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.SingleType
      |      override def isSingleType: _root_.scala.Boolean = true
      |      override def singleType: _root_.scala.Option[scala.meta.internal.semanticdb.SingleType] = Some(value)
      |      override def number: _root_.scala.Int = 20
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ThisType(value: scala.meta.internal.semanticdb.ThisType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ThisType
      |      override def isThisType: _root_.scala.Boolean = true
      |      override def thisType: _root_.scala.Option[scala.meta.internal.semanticdb.ThisType] = Some(value)
      |      override def number: _root_.scala.Int = 21
      |    }
      |    @SerialVersionUID(0L)
      |    final case class SuperType(value: scala.meta.internal.semanticdb.SuperType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.SuperType
      |      override def isSuperType: _root_.scala.Boolean = true
      |      override def superType: _root_.scala.Option[scala.meta.internal.semanticdb.SuperType] = Some(value)
      |      override def number: _root_.scala.Int = 22
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ConstantType(value: scala.meta.internal.semanticdb.ConstantType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ConstantType
      |      override def isConstantType: _root_.scala.Boolean = true
      |      override def constantType: _root_.scala.Option[scala.meta.internal.semanticdb.ConstantType] = Some(value)
      |      override def number: _root_.scala.Int = 23
      |    }
      |    @SerialVersionUID(0L)
      |    final case class IntersectionType(value: scala.meta.internal.semanticdb.IntersectionType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.IntersectionType
      |      override def isIntersectionType: _root_.scala.Boolean = true
      |      override def intersectionType: _root_.scala.Option[scala.meta.internal.semanticdb.IntersectionType] = Some(value)
      |      override def number: _root_.scala.Int = 17
      |    }
      |    @SerialVersionUID(0L)
      |    final case class UnionType(value: scala.meta.internal.semanticdb.UnionType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.UnionType
      |      override def isUnionType: _root_.scala.Boolean = true
      |      override def unionType: _root_.scala.Option[scala.meta.internal.semanticdb.UnionType] = Some(value)
      |      override def number: _root_.scala.Int = 18
      |    }
      |    @SerialVersionUID(0L)
      |    final case class WithType(value: scala.meta.internal.semanticdb.WithType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.WithType
      |      override def isWithType: _root_.scala.Boolean = true
      |      override def withType: _root_.scala.Option[scala.meta.internal.semanticdb.WithType] = Some(value)
      |      override def number: _root_.scala.Int = 19
      |    }
      |    @SerialVersionUID(0L)
      |    final case class StructuralType(value: scala.meta.internal.semanticdb.StructuralType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.StructuralType
      |      override def""".stripMargin) + new String(s"""| isStructuralType: _root_.scala.Boolean = true
      |      override def structuralType: _root_.scala.Option[scala.meta.internal.semanticdb.StructuralType] = Some(value)
      |      override def number: _root_.scala.Int = 7
      |    }
      |    @SerialVersionUID(0L)
      |    final case class AnnotatedType(value: scala.meta.internal.semanticdb.AnnotatedType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.AnnotatedType
      |      override def isAnnotatedType: _root_.scala.Boolean = true
      |      override def annotatedType: _root_.scala.Option[scala.meta.internal.semanticdb.AnnotatedType] = Some(value)
      |      override def number: _root_.scala.Int = 8
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ExistentialType(value: scala.meta.internal.semanticdb.ExistentialType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ExistentialType
      |      override def isExistentialType: _root_.scala.Boolean = true
      |      override def existentialType: _root_.scala.Option[scala.meta.internal.semanticdb.ExistentialType] = Some(value)
      |      override def number: _root_.scala.Int = 9
      |    }
      |    @SerialVersionUID(0L)
      |    final case class UniversalType(value: scala.meta.internal.semanticdb.UniversalType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.UniversalType
      |      override def isUniversalType: _root_.scala.Boolean = true
      |      override def universalType: _root_.scala.Option[scala.meta.internal.semanticdb.UniversalType] = Some(value)
      |      override def number: _root_.scala.Int = 10
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ByNameType(value: scala.meta.internal.semanticdb.ByNameType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.ByNameType
      |      override def isByNameType: _root_.scala.Boolean = true
      |      override def byNameType: _root_.scala.Option[scala.meta.internal.semanticdb.ByNameType] = Some(value)
      |      override def number: _root_.scala.Int = 13
      |    }
      |    @SerialVersionUID(0L)
      |    final case class RepeatedType(value: scala.meta.internal.semanticdb.RepeatedType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.RepeatedType
      |      override def isRepeatedType: _root_.scala.Boolean = true
      |      override def repeatedType: _root_.scala.Option[scala.meta.internal.semanticdb.RepeatedType] = Some(value)
      |      override def number: _root_.scala.Int = 14
      |    }
      |    @SerialVersionUID(0L)
      |    final case class MatchType(value: scala.meta.internal.semanticdb.MatchType) extends scala.meta.internal.semanticdb.TypeMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticdb.MatchType
      |      override def isMatchType: _root_.scala.Boolean = true
      |      override def matchType: _root_.scala.Option[scala.meta.internal.semanticdb.MatchType] = Some(value)
      |      override def number: _root_.scala.Int = 25
      |    }
      |  }
      |  implicit class TypeMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TypeMessage](_l) {
      |    def typeRef: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeRef] = field(_.getTypeRef)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.TypeRef(f_)))
      |    def singleType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SingleType] = field(_.getSingleType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SingleType(f_)))
      |    def thisType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ThisType] = field(_.getThisType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ThisType(f_)))
      |    def superType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SuperType] = field(_.getSuperType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.SuperType(f_)))
      |    def constantType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ConstantType] = field(_.getConstantType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ConstantType(f_)))
      |    def intersectionType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IntersectionType] = field(_.getIntersectionType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.IntersectionType(f_)))
      |    def unionType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UnionType] = field(_.getUnionType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UnionType(f_)))
      |    def withType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.WithType] =""".stripMargin) + new String(s"""| field(_.getWithType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.WithType(f_)))
      |    def structuralType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.StructuralType] = field(_.getStructuralType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.StructuralType(f_)))
      |    def annotatedType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.AnnotatedType] = field(_.getAnnotatedType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.AnnotatedType(f_)))
      |    def existentialType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ExistentialType] = field(_.getExistentialType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ExistentialType(f_)))
      |    def universalType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UniversalType] = field(_.getUniversalType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.UniversalType(f_)))
      |    def byNameType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ByNameType] = field(_.getByNameType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.ByNameType(f_)))
      |    def repeatedType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.RepeatedType] = field(_.getRepeatedType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.RepeatedType(f_)))
      |    def matchType: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MatchType] = field(_.getMatchType)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticdb.TypeMessage.SealedValue.MatchType(f_)))
      |    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
      |  }
      |  final val TYPE_REF_FIELD_NUMBER = 2
      |  final val SINGLE_TYPE_FIELD_NUMBER = 20
      |  final val THIS_TYPE_FIELD_NUMBER = 21
      |  final val SUPER_TYPE_FIELD_NUMBER = 22
      |  final val CONSTANT_TYPE_FIELD_NUMBER = 23
      |  final val INTERSECTION_TYPE_FIELD_NUMBER = 17
      |  final val UNION_TYPE_FIELD_NUMBER = 18
      |  final val WITH_TYPE_FIELD_NUMBER = 19
      |  final val STRUCTURAL_TYPE_FIELD_NUMBER = 7
      |  final val ANNOTATED_TYPE_FIELD_NUMBER = 8
      |  final val EXISTENTIAL_TYPE_FIELD_NUMBER = 9
      |  final val UNIVERSAL_TYPE_FIELD_NUMBER = 10
      |  final val BY_NAME_TYPE_FIELD_NUMBER = 13
      |  final val REPEATED_TYPE_FIELD_NUMBER = 14
      |  final val MATCH_TYPE_FIELD_NUMBER = 25
      |  def of(
      |    sealedValue: scala.meta.internal.semanticdb.TypeMessage.SealedValue
      |  ): _root_.scala.meta.internal.semanticdb.TypeMessage = _root_.scala.meta.internal.semanticdb.TypeMessage(
      |    sealedValue
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.Type])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class TypeRef(
      |    prefix: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    symbol: _root_.scala.Predef.String = "",
      |    typeArguments: _root_.scala.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[TypeRef] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(prefix)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      
      |      {
      |        val __value = symbol
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      |        }
      |      };
      |      typeArguments.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(prefix)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |         """.stripMargin) + new String(s"""| __v.writeTo(_output__)
      |        }
      |      };
      |      {
      |        val __v = symbol
      |        if (!__v.isEmpty) {
      |          _output__.writeString(2, __v)
      |        }
      |      };
      |      typeArguments.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toBase(__v)
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def withPrefix(__v: scala.meta.internal.semanticdb.Type): TypeRef = copy(prefix = __v)
      |    def withSymbol(__v: _root_.scala.Predef.String): TypeRef = copy(symbol = __v)
      |    def clearTypeArguments = copy(typeArguments = _root_.scala.Seq.empty)
      |    def addTypeArguments(__vs: scala.meta.internal.semanticdb.Type *): TypeRef = addAllTypeArguments(__vs)
      |    def addAllTypeArguments(__vs: Iterable[scala.meta.internal.semanticdb.Type]): TypeRef = copy(typeArguments = typeArguments ++ __vs)
      |    def withTypeArguments(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]): TypeRef = copy(typeArguments = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(prefix)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |        case 3 => typeArguments.iterator.map(scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toBase(_)).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toBase(prefix).toPMessage
      |        case 2 => _root_.scalapb.descriptors.PString(symbol)
      |        case 3 => _root_.scalapb.descriptors.PRepeated(typeArguments.iterator.map(scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.TypeRef.type = scala.meta.internal.semanticdb.TypeRef
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.TypeRef])
      |}
      |
      |object TypeRef extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeRef] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeRef] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.TypeRef = {
      |    var __prefix: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var __symbol: _root_.scala.Predef.String = ""
      |    val __typeArguments: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Type] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Type]
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __prefix = _root_.scala.Some(__prefix.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __symbol = _input__.readStringRequireUtf8()
      |        case 26 =>
      |          __typeArguments += scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toCustom(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.TypeRef(
      |        prefix = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(__prefix.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        symbol = __symbol,
      |        typeArguments = __typeArguments.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.TypeRef] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.TypeRef(
      |        prefix = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        symbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).g""".stripMargin) + new String(s"""|etOrElse(""),
      |        typeArguments = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.TypeRef._typemapper_typeArguments.toCustom(_)).toSeq
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(6)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(6)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 3 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.TypeRef(
      |    prefix = scala.meta.internal.semanticdb.TypeRef._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    symbol = "",
      |    typeArguments = _root_.scala.Seq.empty
      |  )
      |  implicit class TypeRefLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.TypeRef]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.TypeRef](_l) {
      |    def prefix: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.prefix)((c_, f_) => c_.copy(prefix = f_))
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |    def typeArguments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Type]] = field(_.typeArguments)((c_, f_) => c_.copy(typeArguments = f_))
      |  }
      |  final val PREFIX_FIELD_NUMBER = 1
      |  final val SYMBOL_FIELD_NUMBER = 2
      |  final val TYPE_ARGUMENTS_FIELD_NUMBER = 3
      |  @transient
      |  private[semanticdb] val _typemapper_prefix: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  @transient
      |  private[semanticdb] val _typemapper_typeArguments: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    prefix: scala.meta.internal.semanticdb.Type,
      |    symbol: _root_.scala.Predef.String,
      |    typeArguments: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]
      |  ): _root_.scala.meta.internal.semanticdb.TypeRef = _root_.scala.meta.internal.semanticdb.TypeRef(
      |    prefix,
      |    symbol,
      |    typeArguments
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.TypeRef])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class SingleType(
      |    prefix: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    symbol: _root_.scala.Predef.String = ""
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[SingleType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(prefix)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      
      |      {
      |        val __value = symbol
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(prefix)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoT""".stripMargin) + new String(s"""|ag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      {
      |        val __v = symbol
      |        if (!__v.isEmpty) {
      |          _output__.writeString(2, __v)
      |        }
      |      };
      |    }
      |    def withPrefix(__v: scala.meta.internal.semanticdb.Type): SingleType = copy(prefix = __v)
      |    def withSymbol(__v: _root_.scala.Predef.String): SingleType = copy(symbol = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(prefix)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toBase(prefix).toPMessage
      |        case 2 => _root_.scalapb.descriptors.PString(symbol)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.SingleType.type = scala.meta.internal.semanticdb.SingleType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.SingleType])
      |}
      |
      |object SingleType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SingleType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SingleType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SingleType = {
      |    var __prefix: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var __symbol: _root_.scala.Predef.String = ""
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __prefix = _root_.scala.Some(__prefix.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __symbol = _input__.readStringRequireUtf8()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.SingleType(
      |        prefix = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(__prefix.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        symbol = __symbol
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SingleType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.SingleType(
      |        prefix = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        symbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(7)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(7)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.SingleType(
      |    prefix = scala.meta.internal.semanticdb.SingleType._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    symbol = ""
      |  )
      |  implicit class SingleTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SingleType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SingleType](_l) {
      |    def prefi""".stripMargin) + new String(s"""|x: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.prefix)((c_, f_) => c_.copy(prefix = f_))
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |  }
      |  final val PREFIX_FIELD_NUMBER = 1
      |  final val SYMBOL_FIELD_NUMBER = 2
      |  @transient
      |  private[semanticdb] val _typemapper_prefix: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    prefix: scala.meta.internal.semanticdb.Type,
      |    symbol: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.SingleType = _root_.scala.meta.internal.semanticdb.SingleType(
      |    prefix,
      |    symbol
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.SingleType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ThisType(
      |    symbol: _root_.scala.Predef.String = ""
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[ThisType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = symbol
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = symbol
      |        if (!__v.isEmpty) {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |    }
      |    def withSymbol(__v: _root_.scala.Predef.String): ThisType = copy(symbol = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(symbol)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.ThisType.type = scala.meta.internal.semanticdb.ThisType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.ThisType])
      |}
      |
      |object ThisType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ThisType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ThisType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ThisType = {
      |    var __symbol: _root_.scala.Predef.String = ""
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __symbol = _input__.readStringRequireUtf8()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ThisType(
      |        symbol = __symbol
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ThisType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ThisType(
      |        symbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(8)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(8)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy v""".stripMargin) + new String(s"""|al defaultInstance = scala.meta.internal.semanticdb.ThisType(
      |    symbol = ""
      |  )
      |  implicit class ThisTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ThisType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ThisType](_l) {
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |  }
      |  final val SYMBOL_FIELD_NUMBER = 1
      |  def of(
      |    symbol: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.ThisType = _root_.scala.meta.internal.semanticdb.ThisType(
      |    symbol
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.ThisType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class SuperType(
      |    prefix: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    symbol: _root_.scala.Predef.String = ""
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[SuperType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(prefix)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      
      |      {
      |        val __value = symbol
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(prefix)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      {
      |        val __v = symbol
      |        if (!__v.isEmpty) {
      |          _output__.writeString(2, __v)
      |        }
      |      };
      |    }
      |    def withPrefix(__v: scala.meta.internal.semanticdb.Type): SuperType = copy(prefix = __v)
      |    def withSymbol(__v: _root_.scala.Predef.String): SuperType = copy(symbol = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(prefix)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => {
      |          val __t = symbol
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toBase(prefix).toPMessage
      |        case 2 => _root_.scalapb.descriptors.PString(symbol)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.SuperType.type = scala.meta.internal.semanticdb.SuperType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.SuperType])
      |}
      |
      |object SuperType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SuperType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.SuperType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.SuperType = {
      |    var __prefix: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var __symbol: _root_.scala.Predef.String = ""
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __prefix = _root_.scala.Some(__prefix.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __symbol = _input__.readStringRequireUtf8()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.S""".stripMargin) + new String(s"""|uperType(
      |        prefix = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(__prefix.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        symbol = __symbol
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.SuperType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.SuperType(
      |        prefix = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        symbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(9)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(9)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.SuperType(
      |    prefix = scala.meta.internal.semanticdb.SuperType._typemapper_prefix.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    symbol = ""
      |  )
      |  implicit class SuperTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.SuperType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.SuperType](_l) {
      |    def prefix: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.prefix)((c_, f_) => c_.copy(prefix = f_))
      |    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
      |  }
      |  final val PREFIX_FIELD_NUMBER = 1
      |  final val SYMBOL_FIELD_NUMBER = 2
      |  @transient
      |  private[semanticdb] val _typemapper_prefix: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    prefix: scala.meta.internal.semanticdb.Type,
      |    symbol: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticdb.SuperType = _root_.scala.meta.internal.semanticdb.SuperType(
      |    prefix,
      |    symbol
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.SuperType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ConstantType(
      |    constant: scala.meta.internal.semanticdb.Constant = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[ConstantType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(constant)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(constant)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def withConstant(__v: scala.meta.internal.semanticdb.Constant): ConstantType = copy(constant = __v)
      |    def getFieldByN""".stripMargin) + new String(s"""|umber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(constant)
      |          if (__t != scala.meta.internal.semanticdb.ConstantMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toBase(constant).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.ConstantType.type = scala.meta.internal.semanticdb.ConstantType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.ConstantType])
      |}
      |
      |object ConstantType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ConstantType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ConstantType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ConstantType = {
      |    var __constant: _root_.scala.Option[scala.meta.internal.semanticdb.ConstantMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __constant = _root_.scala.Some(__constant.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.ConstantMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ConstantType(
      |        constant = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(__constant.getOrElse(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance))
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ConstantType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ConstantType(
      |        constant = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.ConstantMessage]).getOrElse(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(10)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(10)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.ConstantMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ConstantType(
      |    constant = scala.meta.internal.semanticdb.ConstantType._typemapper_constant.toCustom(scala.meta.internal.semanticdb.ConstantMessage.defaultInstance)
      |  )
      |  implicit class ConstantTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ConstantType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ConstantType](_l) {
      |    def constant: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Constant] = field(_.constant)((c_, f_) => c_.copy(constant = f_))
      |  }
      |  final val CONSTANT_FIELD_NUMBER = 1
      |  @transient
      |  private[semanticdb] val _typemapper_constant: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.ConstantMessage, scala.meta.internal.semanticdb.Constant]]
      |  def of(
      |    constant: scala.meta.internal.semanticdb.Constant
      |  ): _root_.scala.meta.internal.semanticdb.ConstantType = _root_.scala.meta.internal.semanticdb.ConstantType(
      |    constant
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal""".stripMargin) + new String(s"""|.semanticdb.ConstantType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class IntersectionType(
      |    types: _root_.scala.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[IntersectionType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      types.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      types.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toBase(__v)
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def clearTypes = copy(types = _root_.scala.Seq.empty)
      |    def addTypes(__vs: scala.meta.internal.semanticdb.Type *): IntersectionType = addAllTypes(__vs)
      |    def addAllTypes(__vs: Iterable[scala.meta.internal.semanticdb.Type]): IntersectionType = copy(types = types ++ __vs)
      |    def withTypes(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]): IntersectionType = copy(types = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => types.iterator.map(scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toBase(_)).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(types.iterator.map(scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.IntersectionType.type = scala.meta.internal.semanticdb.IntersectionType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.IntersectionType])
      |}
      |
      |object IntersectionType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntersectionType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntersectionType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.IntersectionType = {
      |    val __types: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Type] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Type]
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __types += scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toCustom(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.IntersectionType(
      |        types = __types.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.IntersectionType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.IntersectionType(
      |        types = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.IntersectionType._typemapper_types.toCustom(_)).toSeq
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(11)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(11)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion""".stripMargin) + new String(s"""|[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.IntersectionType(
      |    types = _root_.scala.Seq.empty
      |  )
      |  implicit class IntersectionTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.IntersectionType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.IntersectionType](_l) {
      |    def types: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Type]] = field(_.types)((c_, f_) => c_.copy(types = f_))
      |  }
      |  final val TYPES_FIELD_NUMBER = 1
      |  @transient
      |  private[semanticdb] val _typemapper_types: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    types: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]
      |  ): _root_.scala.meta.internal.semanticdb.IntersectionType = _root_.scala.meta.internal.semanticdb.IntersectionType(
      |    types
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.IntersectionType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class UnionType(
      |    types: _root_.scala.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[UnionType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      types.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.UnionType._typemapper_types.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      types.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.UnionType._typemapper_types.toBase(__v)
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def clearTypes = copy(types = _root_.scala.Seq.empty)
      |    def addTypes(__vs: scala.meta.internal.semanticdb.Type *): UnionType = addAllTypes(__vs)
      |    def addAllTypes(__vs: Iterable[scala.meta.internal.semanticdb.Type]): UnionType = copy(types = types ++ __vs)
      |    def withTypes(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]): UnionType = copy(types = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => types.iterator.map(scala.meta.internal.semanticdb.UnionType._typemapper_types.toBase(_)).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(types.iterator.map(scala.meta.internal.semanticdb.UnionType._typemapper_types.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.UnionType.type = scala.meta.internal.semanticdb.UnionType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.UnionType])
      |}
      |
      |object UnionType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnionType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnionType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.UnionType = {
      |    val __types: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Type] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Type]
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {""".stripMargin) + new String(s"""|
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __types += scala.meta.internal.semanticdb.UnionType._typemapper_types.toCustom(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.UnionType(
      |        types = __types.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.UnionType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.UnionType(
      |        types = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.UnionType._typemapper_types.toCustom(_)).toSeq
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(12)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(12)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.UnionType(
      |    types = _root_.scala.Seq.empty
      |  )
      |  implicit class UnionTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UnionType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.UnionType](_l) {
      |    def types: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Type]] = field(_.types)((c_, f_) => c_.copy(types = f_))
      |  }
      |  final val TYPES_FIELD_NUMBER = 1
      |  @transient
      |  private[semanticdb] val _typemapper_types: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    types: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]
      |  ): _root_.scala.meta.internal.semanticdb.UnionType = _root_.scala.meta.internal.semanticdb.UnionType(
      |    types
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.UnionType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class WithType(
      |    types: _root_.scala.Seq[scala.meta.internal.semanticdb.Type] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[WithType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      types.foreach { __item =>
      |        val __value = scala.meta.internal.semanticdb.WithType._typemapper_types.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      types.foreach { __v =>
      |        val __m = scala.meta.internal.semanticdb.WithType._typemapper_types.toBase(__v)
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def clearTypes = copy(types = _root_.scala.Seq.empty)
      |    def addTypes(__vs: scala.meta.internal.semanticdb.Type *): WithType = addAllTypes(__vs)
      |    def addAllTypes(__vs: Iterable[scala.meta.internal.semanticdb.Type]): WithType = copy(types = types ++ __vs)
      |    def withTypes(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]): WithType = copy(types = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => types.iterator.map(scala.meta.internal.semanticdb.WithType._typemapper_type""".stripMargin) + new String(s"""|s.toBase(_)).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(types.iterator.map(scala.meta.internal.semanticdb.WithType._typemapper_types.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.WithType.type = scala.meta.internal.semanticdb.WithType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.WithType])
      |}
      |
      |object WithType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.WithType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.WithType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.WithType = {
      |    val __types: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Type] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Type]
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __types += scala.meta.internal.semanticdb.WithType._typemapper_types.toCustom(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.WithType(
      |        types = __types.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.WithType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.WithType(
      |        types = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.TypeMessage]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticdb.WithType._typemapper_types.toCustom(_)).toSeq
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(13)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(13)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.WithType(
      |    types = _root_.scala.Seq.empty
      |  )
      |  implicit class WithTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.WithType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.WithType](_l) {
      |    def types: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Type]] = field(_.types)((c_, f_) => c_.copy(types = f_))
      |  }
      |  final val TYPES_FIELD_NUMBER = 1
      |  @transient
      |  private[semanticdb] val _typemapper_types: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    types: _root_.scala.Seq[scala.meta.internal.semanticdb.Type]
      |  ): _root_.scala.meta.internal.semanticdb.WithType = _root_.scala.meta.internal.semanticdb.WithType(
      |    types
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.WithType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class StructuralType(
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[StructuralType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.In""".stripMargin) + new String(s"""|t = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(tpe)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      if (declarations.isDefined) {
      |        val __value = declarations.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(tpe)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(4, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      declarations.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(5, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): StructuralType = copy(tpe = __v)
      |    def getDeclarations: scala.meta.internal.semanticdb.Scope = declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearDeclarations: StructuralType = copy(declarations = _root_.scala.None)
      |    def withDeclarations(__v: scala.meta.internal.semanticdb.Scope): StructuralType = copy(declarations = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 4 => {
      |          val __t = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 5 => declarations.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 4 => scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toBase(tpe).toPMessage
      |        case 5 => declarations.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.StructuralType.type = scala.meta.internal.semanticdb.StructuralType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.StructuralType])
      |}
      |
      |object StructuralType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.StructuralType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.StructuralType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.StructuralType = {
      |    var __tpe: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var __declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 34 =>
      |          __tpe = _root_.scala.Some(__tpe.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 42 =>
      |          __declarations = Option(__declarations.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Scope](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.StructuralType(
      |        tpe = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toCustom(__tpe.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        declarations = __declarations
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.StructuralType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.StructuralType(
      |        tpe = scala.meta.internal.semanticdb.""".stripMargin) + new String(s"""|StructuralType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        declarations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(14)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(14)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 4 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 5 => __out = scala.meta.internal.semanticdb.Scope
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.StructuralType(
      |    tpe = scala.meta.internal.semanticdb.StructuralType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    declarations = _root_.scala.None
      |  )
      |  implicit class StructuralTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.StructuralType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.StructuralType](_l) {
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |    def declarations: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getDeclarations)((c_, f_) => c_.copy(declarations = Option(f_)))
      |    def optionalDeclarations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.declarations)((c_, f_) => c_.copy(declarations = f_))
      |  }
      |  final val TPE_FIELD_NUMBER = 4
      |  final val DECLARATIONS_FIELD_NUMBER = 5
      |  @transient
      |  private[semanticdb] val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    tpe: scala.meta.internal.semanticdb.Type,
      |    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope]
      |  ): _root_.scala.meta.internal.semanticdb.StructuralType = _root_.scala.meta.internal.semanticdb.StructuralType(
      |    tpe,
      |    declarations
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.StructuralType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class AnnotatedType(
      |    annotations: _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation] = _root_.scala.Seq.empty,
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[AnnotatedType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      annotations.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(tpe)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(tpe)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      annotations.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _""".stripMargin) + new String(s"""|output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def clearAnnotations = copy(annotations = _root_.scala.Seq.empty)
      |    def addAnnotations(__vs: scala.meta.internal.semanticdb.Annotation *): AnnotatedType = addAllAnnotations(__vs)
      |    def addAllAnnotations(__vs: Iterable[scala.meta.internal.semanticdb.Annotation]): AnnotatedType = copy(annotations = annotations ++ __vs)
      |    def withAnnotations(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]): AnnotatedType = copy(annotations = __v)
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): AnnotatedType = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 3 => annotations
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 3 => _root_.scalapb.descriptors.PRepeated(annotations.iterator.map(_.toPMessage).toVector)
      |        case 1 => scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.AnnotatedType.type = scala.meta.internal.semanticdb.AnnotatedType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.AnnotatedType])
      |}
      |
      |object AnnotatedType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.AnnotatedType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.AnnotatedType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.AnnotatedType = {
      |    val __annotations: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Annotation] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.Annotation]
      |    var __tpe: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 26 =>
      |          __annotations += _root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Annotation](_input__)
      |        case 10 =>
      |          __tpe = _root_.scala.Some(__tpe.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.AnnotatedType(
      |        annotations = __annotations.result(),
      |        tpe = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(__tpe.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.AnnotatedType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.AnnotatedType(
      |        annotations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]]).getOrElse(_root_.scala.Seq.empty),
      |        tpe = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(15)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(15)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 3 => __out = scala.meta.internal.semanticdb.Annotation
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def """.stripMargin) + new String(s"""|enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.AnnotatedType(
      |    annotations = _root_.scala.Seq.empty,
      |    tpe = scala.meta.internal.semanticdb.AnnotatedType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class AnnotatedTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.AnnotatedType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.AnnotatedType](_l) {
      |    def annotations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation]] = field(_.annotations)((c_, f_) => c_.copy(annotations = f_))
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val ANNOTATIONS_FIELD_NUMBER = 3
      |  final val TPE_FIELD_NUMBER = 1
      |  @transient
      |  private[semanticdb] val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    annotations: _root_.scala.Seq[scala.meta.internal.semanticdb.Annotation],
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.AnnotatedType = _root_.scala.meta.internal.semanticdb.AnnotatedType(
      |    annotations,
      |    tpe
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.AnnotatedType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ExistentialType(
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[ExistentialType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(tpe)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      if (declarations.isDefined) {
      |        val __value = declarations.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(tpe)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      declarations.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): ExistentialType = copy(tpe = __v)
      |    def getDeclarations: scala.meta.internal.semanticdb.Scope = declarations.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearDeclarations: ExistentialType = copy(declarations = _root_.scala.None)
      |    def withDeclarations(__v: scala.meta.internal.semanticdb.Scope): ExistentialType = copy(declarations = Option(__v))
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 3 => declarations.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toBase(tpe).toPMessage
      |        case 3 => declarations.map(_.toPMessage).getOrElse(_root_.scalapb.descrip""".stripMargin) + new String(s"""|tors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.ExistentialType.type = scala.meta.internal.semanticdb.ExistentialType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.ExistentialType])
      |}
      |
      |object ExistentialType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ExistentialType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ExistentialType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ExistentialType = {
      |    var __tpe: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var __declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __tpe = _root_.scala.Some(__tpe.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 26 =>
      |          __declarations = Option(__declarations.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Scope](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ExistentialType(
      |        tpe = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(__tpe.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        declarations = __declarations
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ExistentialType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ExistentialType(
      |        tpe = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        declarations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]])
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(16)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(16)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 3 => __out = scala.meta.internal.semanticdb.Scope
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ExistentialType(
      |    tpe = scala.meta.internal.semanticdb.ExistentialType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    declarations = _root_.scala.None
      |  )
      |  implicit class ExistentialTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ExistentialType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ExistentialType](_l) {
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |    def declarations: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getDeclarations)((c_, f_) => c_.copy(declarations = Option(f_)))
      |    def optionalDeclarations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.declarations)((c_, f_) => c_.copy(declarations = f_))
      |  }
      |  final val TPE_FIELD_NUMBER = 1
      |  final val DECLARATIONS_FIELD_NUMBER = 3
      |  @transient
      |  private[semanticdb] val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    tpe: scala.meta.internal.sem""".stripMargin) + new String(s"""|anticdb.Type,
      |    declarations: _root_.scala.Option[scala.meta.internal.semanticdb.Scope]
      |  ): _root_.scala.meta.internal.semanticdb.ExistentialType = _root_.scala.meta.internal.semanticdb.ExistentialType(
      |    tpe,
      |    declarations
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.ExistentialType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class UniversalType(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None,
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[UniversalType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (typeParameters.isDefined) {
      |        val __value = typeParameters.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(tpe)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(tpe)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(2, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      typeParameters.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(3, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def getTypeParameters: scala.meta.internal.semanticdb.Scope = typeParameters.getOrElse(scala.meta.internal.semanticdb.Scope.defaultInstance)
      |    def clearTypeParameters: UniversalType = copy(typeParameters = _root_.scala.None)
      |    def withTypeParameters(__v: scala.meta.internal.semanticdb.Scope): UniversalType = copy(typeParameters = Option(__v))
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): UniversalType = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 3 => typeParameters.orNull
      |        case 2 => {
      |          val __t = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 3 => typeParameters.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.UniversalType.type = scala.meta.internal.semanticdb.UniversalType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.UniversalType])
      |}
      |
      |object UniversalType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UniversalType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.UniversalType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.UniversalType = {
      |    var __typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope] = _root_.scala.None
      |    var __tpe: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 26 =>
      |          __typeParameters = Option(__typeParameters.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.Scope](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __tpe = _root_.scala.Some(__tpe.fold(_root_.scalapb.""".stripMargin) + new String(s"""|LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.UniversalType(
      |        typeParameters = __typeParameters,
      |        tpe = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(__tpe.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.UniversalType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.UniversalType(
      |        typeParameters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticdb.Scope]]),
      |        tpe = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(17)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(17)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 3 => __out = scala.meta.internal.semanticdb.Scope
      |      case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.UniversalType(
      |    typeParameters = _root_.scala.None,
      |    tpe = scala.meta.internal.semanticdb.UniversalType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class UniversalTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.UniversalType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.UniversalType](_l) {
      |    def typeParameters: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Scope] = field(_.getTypeParameters)((c_, f_) => c_.copy(typeParameters = Option(f_)))
      |    def optionalTypeParameters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scala.meta.internal.semanticdb.Scope]] = field(_.typeParameters)((c_, f_) => c_.copy(typeParameters = f_))
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val TYPE_PARAMETERS_FIELD_NUMBER = 3
      |  final val TPE_FIELD_NUMBER = 2
      |  @transient
      |  private[semanticdb] val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    typeParameters: _root_.scala.Option[scala.meta.internal.semanticdb.Scope],
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.UniversalType = _root_.scala.meta.internal.semanticdb.UniversalType(
      |    typeParameters,
      |    tpe
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.UniversalType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class ByNameType(
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[ByNameType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(tpe)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __""".stripMargin) + new String(s"""|computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(tpe)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): ByNameType = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.ByNameType.type = scala.meta.internal.semanticdb.ByNameType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.ByNameType])
      |}
      |
      |object ByNameType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByNameType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByNameType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.ByNameType = {
      |    var __tpe: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __tpe = _root_.scala.Some(__tpe.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.ByNameType(
      |        tpe = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(__tpe.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.ByNameType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.ByNameType(
      |        tpe = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(18)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(18)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.ByNameType(
      |    tpe = scala.meta.internal.semanticdb.ByNameType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class ByNameTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.ByNameType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.ByNameType](_l) {
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val TPE_FIELD_NUMBER = 1
      |  @transient
      |  private[semanticdb] val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.""".stripMargin) + new String(s"""|internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.ByNameType = _root_.scala.meta.internal.semanticdb.ByNameType(
      |    tpe
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.ByNameType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class RepeatedType(
      |    tpe: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[RepeatedType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(tpe)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(tpe)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |    }
      |    def withTpe(__v: scala.meta.internal.semanticdb.Type): RepeatedType = copy(tpe = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(tpe)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toBase(tpe).toPMessage
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.RepeatedType.type = scala.meta.internal.semanticdb.RepeatedType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.RepeatedType])
      |}
      |
      |object RepeatedType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.RepeatedType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.RepeatedType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.RepeatedType = {
      |    var __tpe: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __tpe = _root_.scala.Some(__tpe.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.RepeatedType(
      |        tpe = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(__tpe.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.RepeatedType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.RepeatedType(
      |        tpe = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMe""".stripMargin) + new String(s"""|ssageTypes().get(19)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(19)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.RepeatedType(
      |    tpe = scala.meta.internal.semanticdb.RepeatedType._typemapper_tpe.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |  )
      |  implicit class RepeatedTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.RepeatedType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.RepeatedType](_l) {
      |    def tpe: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.tpe)((c_, f_) => c_.copy(tpe = f_))
      |  }
      |  final val TPE_FIELD_NUMBER = 1
      |  @transient
      |  private[semanticdb] val _typemapper_tpe: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    tpe: scala.meta.internal.semanticdb.Type
      |  ): _root_.scala.meta.internal.semanticdb.RepeatedType = _root_.scala.meta.internal.semanticdb.RepeatedType(
      |    tpe
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.RepeatedType])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class MatchType(
      |    scrutinee: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    cases: _root_.scala.Seq[scala.meta.internal.semanticdb.MatchType.CaseType] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticdb.Type.NonEmpty with scalapb.lenses.Updatable[MatchType] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toBase(scrutinee)
      |        if (__value.serializedSize != 0) {
      |          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |        }
      |      };
      |      cases.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toBase(scrutinee)
      |        if (__v.serializedSize != 0) {
      |          _output__.writeTag(1, 2)
      |          _output__.writeUInt32NoTag(__v.serializedSize)
      |          __v.writeTo(_output__)
      |        }
      |      };
      |      cases.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def withScrutinee(__v: scala.meta.internal.semanticdb.Type): MatchType = copy(scrutinee = __v)
      |    def clearCases = copy(cases = _root_.scala.Seq.empty)
      |    def addCases(__vs: scala.meta.internal.semanticdb.MatchType.CaseType *): MatchType = addAllCases(__vs)
      |    def addAllCases(__vs: Iterable[scala.meta.internal.semanticdb.MatchType.CaseType]): MatchType = copy(cases = cases ++ __vs)
      |    def withCases(__v: _root_.scala.Seq[scala.meta.internal.semanticdb.MatchType.CaseType]): MatchType = copy(cases = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toBase(scrutinee)
      |          if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |        }
      |        case 2 => cases
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingM""".stripMargin) + new String(s"""|essage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toBase(scrutinee).toPMessage
      |        case 2 => _root_.scalapb.descriptors.PRepeated(cases.iterator.map(_.toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticdb.MatchType.type = scala.meta.internal.semanticdb.MatchType
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.MatchType])
      |}
      |
      |object MatchType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MatchType] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MatchType] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.MatchType = {
      |    var __scrutinee: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |    val __cases: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.MatchType.CaseType] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticdb.MatchType.CaseType]
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __scrutinee = _root_.scala.Some(__scrutinee.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __cases += _root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.MatchType.CaseType](_input__)
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticdb.MatchType(
      |        scrutinee = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toCustom(__scrutinee.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        cases = __cases.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.MatchType] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticdb.MatchType(
      |        scrutinee = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |        cases = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticdb.MatchType.CaseType]]).getOrElse(_root_.scala.Seq.empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticdbProto.javaDescriptor.getMessageTypes().get(20)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticdbProto.scalaDescriptor.messages(20)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      case 2 => __out = scala.meta.internal.semanticdb.MatchType.CaseType
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      |    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      |      _root_.scala.meta.internal.semanticdb.MatchType.CaseType
      |    )
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticdb.MatchType(
      |    scrutinee = scala.meta.internal.semanticdb.MatchType._typemapper_scrutinee.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |    cases = _root_.scala.Seq.empty
      |  )
      |  @SerialVersionUID(0L)
      |  final case class CaseType(
      |      key: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |      body: scala.meta.internal.semanticdb.Type = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CaseType] {
      |      @transient
      |      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |      private[this] def __computeSerializedSi""".stripMargin) + new String(s"""|ze(): _root_.scala.Int = {
      |        var __size = 0
      |        
      |        {
      |          val __value = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toBase(key)
      |          if (__value.serializedSize != 0) {
      |            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |          }
      |        };
      |        
      |        {
      |          val __value = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toBase(body)
      |          if (__value.serializedSize != 0) {
      |            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |          }
      |        };
      |        __size
      |      }
      |      override def serializedSize: _root_.scala.Int = {
      |        var __size = __serializedSizeMemoized
      |        if (__size == 0) {
      |          __size = __computeSerializedSize() + 1
      |          __serializedSizeMemoized = __size
      |        }
      |        __size - 1
      |        
      |      }
      |      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |        {
      |          val __v = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toBase(key)
      |          if (__v.serializedSize != 0) {
      |            _output__.writeTag(1, 2)
      |            _output__.writeUInt32NoTag(__v.serializedSize)
      |            __v.writeTo(_output__)
      |          }
      |        };
      |        {
      |          val __v = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toBase(body)
      |          if (__v.serializedSize != 0) {
      |            _output__.writeTag(2, 2)
      |            _output__.writeUInt32NoTag(__v.serializedSize)
      |            __v.writeTo(_output__)
      |          }
      |        };
      |      }
      |      def withKey(__v: scala.meta.internal.semanticdb.Type): CaseType = copy(key = __v)
      |      def withBody(__v: scala.meta.internal.semanticdb.Type): CaseType = copy(body = __v)
      |      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |        (__fieldNumber: @_root_.scala.unchecked) match {
      |          case 1 => {
      |            val __t = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toBase(key)
      |            if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |          }
      |          case 2 => {
      |            val __t = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toBase(body)
      |            if (__t != scala.meta.internal.semanticdb.TypeMessage.defaultInstance) __t else null
      |          }
      |        }
      |      }
      |      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |        (__field.number: @_root_.scala.unchecked) match {
      |          case 1 => scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toBase(key).toPMessage
      |          case 2 => scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toBase(body).toPMessage
      |        }
      |      }
      |      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |      def companion: scala.meta.internal.semanticdb.MatchType.CaseType.type = scala.meta.internal.semanticdb.MatchType.CaseType
      |      // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticdb.MatchType.CaseType])
      |  }
      |  
      |  object CaseType extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MatchType.CaseType] {
      |    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticdb.MatchType.CaseType] = this
      |    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticdb.MatchType.CaseType = {
      |      var __key: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |      var __body: _root_.scala.Option[scala.meta.internal.semanticdb.TypeMessage] = _root_.scala.None
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __key = _root_.scala.Some(__key.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |          case 18 =>
      |            __body = _root_.scala.Some(__body.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticdb.TypeMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticdb.MatchType.CaseType(
      |          key = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toCustom(__key.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |          body = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toCustom(__body.getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |      )
      |    }
      |   """.stripMargin) + new String(s"""| implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticdb.MatchType.CaseType] = _root_.scalapb.descriptors.Reads{
      |      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |        scala.meta.internal.semanticdb.MatchType.CaseType(
      |          key = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)),
      |          body = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticdb.TypeMessage]).getOrElse(scala.meta.internal.semanticdb.TypeMessage.defaultInstance))
      |        )
      |      case _ => throw new RuntimeException("Expected PMessage")
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = scala.meta.internal.semanticdb.MatchType.javaDescriptor.getNestedTypes().get(0)
      |    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = scala.meta.internal.semanticdb.MatchType.scalaDescriptor.nestedMessages(0)
      |    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |      (__number: @_root_.scala.unchecked) match {
      |        case 1 => __out = scala.meta.internal.semanticdb.TypeMessage
      |        case 2 => __out = scala.meta.internal.semanticdb.TypeMessage
      |      }
      |      __out
      |    }
      |    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |    lazy val defaultInstance = scala.meta.internal.semanticdb.MatchType.CaseType(
      |      key = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_key.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance),
      |      body = scala.meta.internal.semanticdb.MatchType.CaseType._typemapper_body.toCustom(scala.meta.internal.semanticdb.TypeMessage.defaultInstance)
      |    )
      |    implicit class CaseTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MatchType.CaseType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.MatchType.CaseType](_l) {
      |      def key: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.key)((c_, f_) => c_.copy(key = f_))
      |      def body: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.body)((c_, f_) => c_.copy(body = f_))
      |    }
      |    final val KEY_FIELD_NUMBER = 1
      |    final val BODY_FIELD_NUMBER = 2
      |    @transient
      |    private[semanticdb] val _typemapper_key: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |    @transient
      |    private[semanticdb] val _typemapper_body: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |    def of(
      |      key: scala.meta.internal.semanticdb.Type,
      |      body: scala.meta.internal.semanticdb.Type
      |    ): _root_.scala.meta.internal.semanticdb.MatchType.CaseType = _root_.scala.meta.internal.semanticdb.MatchType.CaseType(
      |      key,
      |      body
      |    )
      |    // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.MatchType.CaseType])
      |  }
      |  
      |  implicit class MatchTypeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.MatchType]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticdb.MatchType](_l) {
      |    def scrutinee: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticdb.Type] = field(_.scrutinee)((c_, f_) => c_.copy(scrutinee = f_))
      |    def cases: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticdb.MatchType.CaseType]] = field(_.cases)((c_, f_) => c_.copy(cases = f_))
      |  }
      |  final val SCRUTINEE_FIELD_NUMBER = 1
      |  final val CASES_FIELD_NUMBER = 2
      |  @transient
      |  private[semanticdb] val _typemapper_scrutinee: _root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticdb.TypeMessage, scala.meta.internal.semanticdb.Type]]
      |  def of(
      |    scrutinee: scala.meta.internal.semanticdb.Type,
      |    cases: _root_.scala.Seq[scala.meta.internal.semanticdb.MatchType.CaseT""".stripMargin) + new String(s"""|ype]
      |  ): _root_.scala.meta.internal.semanticdb.MatchType = _root_.scala.meta.internal.semanticdb.MatchType(
      |    scrutinee,
      |    cases
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticdb.MatchType])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticidx/Entry.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticidx
      |
      |sealed trait Entry extends scalapb.GeneratedSealedOneof {
      |  type MessageType = scala.meta.internal.semanticidx.EntryMessage
      |  final def isEmpty = this.isInstanceOf[scala.meta.internal.semanticidx.Entry.Empty.type]
      |  final def isDefined = !isEmpty
      |  final def asMessage: scala.meta.internal.semanticidx.EntryMessage = scala.meta.internal.semanticidx.Entry.EntryTypeMapper.toBase(this)
      |  final def asNonEmpty: Option[scala.meta.internal.semanticidx.Entry.NonEmpty] = if (isEmpty) None else Some(this.asInstanceOf[scala.meta.internal.semanticidx.Entry.NonEmpty])
      |}
      |
      |object Entry {
      |  case object Empty extends scala.meta.internal.semanticidx.Entry
      |  
      |  sealed trait NonEmpty extends scala.meta.internal.semanticidx.Entry
      |  def defaultInstance: scala.meta.internal.semanticidx.Entry = Empty
      |  
      |  implicit val EntryTypeMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.EntryMessage, scala.meta.internal.semanticidx.Entry] = new _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.EntryMessage, scala.meta.internal.semanticidx.Entry] {
      |    override def toCustom(__base: scala.meta.internal.semanticidx.EntryMessage): scala.meta.internal.semanticidx.Entry = __base.sealedValue match {
      |      case __v: scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry => __v.value
      |      case __v: scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry => __v.value
      |      case scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty => Empty
      |    }
      |    override def toBase(__custom: scala.meta.internal.semanticidx.Entry): scala.meta.internal.semanticidx.EntryMessage = scala.meta.internal.semanticidx.EntryMessage(__custom match {
      |      case __v: scala.meta.internal.semanticidx.PackageEntry => scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry(__v)
      |      case __v: scala.meta.internal.semanticidx.ToplevelEntry => scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry(__v)
      |      case Empty => scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty
      |    })
      |  }
      |}
      |@SerialVersionUID(0L)
      |final case class EntryMessage(
      |    sealedValue: scala.meta.internal.semanticidx.EntryMessage.SealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[EntryMessage] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      if (sealedValue.packageEntry.isDefined) {
      |        val __value = sealedValue.packageEntry.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      if (sealedValue.toplevelEntry.isDefined) {
      |        val __value = sealedValue.toplevelEntry.get
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      sealedValue.packageEntry.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |      sealedValue.toplevelEntry.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(2, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def getPackageEntry: scala.meta.internal.semanticidx.PackageEntry = sealedValue.packageEntry.getOrElse(scala.meta.internal.semanticidx.PackageEntry.defaultInstance)
      |    def withPackageEntry(__v: scala.meta.internal.semanticidx.PackageEntry): EntryMessage = copy(sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry(__v))
      |    def getToplevelEntry: scala.meta.internal.semanticidx.ToplevelEntry = sealedValue.toplevelEntry.getOrElse(scala.meta.internal.semanticidx.ToplevelEntry.defaultInstance)
      |    def withToplevelEntry(__v: scala.meta.internal.semanticidx.ToplevelEntry): EntryMessage = copy(sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry(__v))
      |    def clearSealedValue: EntryMessage = copy(sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty)
      |    def withSealedValue(__v: scala.meta.internal.semanticidx.EntryMessage.SealedValue): EntryMessage = copy(sealedValue = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.""".stripMargin) + new String(s"""|scala.unchecked) match {
      |        case 1 => sealedValue.packageEntry.orNull
      |        case 2 => sealedValue.toplevelEntry.orNull
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => sealedValue.packageEntry.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |        case 2 => sealedValue.toplevelEntry.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticidx.EntryMessage.type = scala.meta.internal.semanticidx.EntryMessage
      |    def toEntry: scala.meta.internal.semanticidx.Entry = scala.meta.internal.semanticidx.Entry.EntryTypeMapper.toCustom(this)
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticidx.Entry])
      |}
      |
      |object EntryMessage extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.EntryMessage] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.EntryMessage] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.EntryMessage = {
      |    var __sealedValue: scala.meta.internal.semanticidx.EntryMessage.SealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry(__sealedValue.packageEntry.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticidx.PackageEntry](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case 18 =>
      |          __sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry(__sealedValue.toplevelEntry.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticidx.ToplevelEntry](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticidx.EntryMessage(
      |        sealedValue = __sealedValue
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.EntryMessage] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticidx.EntryMessage(
      |        sealedValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticidx.PackageEntry]]).map(scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry(_))
      |            .orElse[scala.meta.internal.semanticidx.EntryMessage.SealedValue](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scala.meta.internal.semanticidx.ToplevelEntry]]).map(scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry(_)))
      |            .getOrElse(scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticidxProto.javaDescriptor.getMessageTypes().get(2)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticidxProto.scalaDescriptor.messages(2)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticidx.PackageEntry
      |      case 2 => __out = scala.meta.internal.semanticidx.ToplevelEntry
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticidx.EntryMessage(
      |    sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.Empty
      |  )
      |  sealed trait SealedValue extends _root_.scalapb.GeneratedOneof {
      |    def isEmpty: _root_.scala.Boolean = false
      |    def isDefined: _root_.scala.Boolean = true
      |    def isPackageEntry: _root_.scala.Boolean = false
      |    def isToplevelEntry: _root_.scala.Boolean = false
      |    def packageEntry: _root_.scala.Option[scala.meta.internal.semanticidx.PackageEntry] = _root_.scala.None
      |    def topl""".stripMargin) + new String(s"""|evelEntry: _root_.scala.Option[scala.meta.internal.semanticidx.ToplevelEntry] = _root_.scala.None
      |  }
      |  object SealedValue {
      |    @SerialVersionUID(0L)
      |    case object Empty extends scala.meta.internal.semanticidx.EntryMessage.SealedValue {
      |      type ValueType = _root_.scala.Nothing
      |      override def isEmpty: _root_.scala.Boolean = true
      |      override def isDefined: _root_.scala.Boolean = false
      |      override def number: _root_.scala.Int = 0
      |      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      |    }
      |  
      |    @SerialVersionUID(0L)
      |    final case class PackageEntry(value: scala.meta.internal.semanticidx.PackageEntry) extends scala.meta.internal.semanticidx.EntryMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticidx.PackageEntry
      |      override def isPackageEntry: _root_.scala.Boolean = true
      |      override def packageEntry: _root_.scala.Option[scala.meta.internal.semanticidx.PackageEntry] = Some(value)
      |      override def number: _root_.scala.Int = 1
      |    }
      |    @SerialVersionUID(0L)
      |    final case class ToplevelEntry(value: scala.meta.internal.semanticidx.ToplevelEntry) extends scala.meta.internal.semanticidx.EntryMessage.SealedValue {
      |      type ValueType = scala.meta.internal.semanticidx.ToplevelEntry
      |      override def isToplevelEntry: _root_.scala.Boolean = true
      |      override def toplevelEntry: _root_.scala.Option[scala.meta.internal.semanticidx.ToplevelEntry] = Some(value)
      |      override def number: _root_.scala.Int = 2
      |    }
      |  }
      |  implicit class EntryMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.EntryMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.EntryMessage](_l) {
      |    def packageEntry: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.PackageEntry] = field(_.getPackageEntry)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.PackageEntry(f_)))
      |    def toplevelEntry: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.ToplevelEntry] = field(_.getToplevelEntry)((c_, f_) => c_.copy(sealedValue = scala.meta.internal.semanticidx.EntryMessage.SealedValue.ToplevelEntry(f_)))
      |    def sealedValue: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.EntryMessage.SealedValue] = field(_.sealedValue)((c_, f_) => c_.copy(sealedValue = f_))
      |  }
      |  final val PACKAGEENTRY_FIELD_NUMBER = 1
      |  final val TOPLEVELENTRY_FIELD_NUMBER = 2
      |  def of(
      |    sealedValue: scala.meta.internal.semanticidx.EntryMessage.SealedValue
      |  ): _root_.scala.meta.internal.semanticidx.EntryMessage = _root_.scala.meta.internal.semanticidx.EntryMessage(
      |    sealedValue
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticidx.Entry])
      |}
      |
      |@SerialVersionUID(0L)
      |final case class PackageEntry(
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticidx.Entry.NonEmpty with scalapb.lenses.Updatable[PackageEntry] {
      |    final override def serializedSize: _root_.scala.Int = 0
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |    }
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticidx.PackageEntry.type = scala.meta.internal.semanticidx.PackageEntry
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticidx.PackageEntry])
      |}
      |
      |object PackageEntry extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.PackageEntry] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.PackageEntry] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.PackageEntry = {
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticidx.PackageEntry(
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.PackageEntry] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticidx.PackageEntry(
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticidxProto.javaDescriptor.getMessageTypes().get(3)
      |  def scalaDescriptor: _root""".stripMargin) + new String(s"""|_.scalapb.descriptors.Descriptor = SemanticidxProto.scalaDescriptor.messages(3)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticidx.PackageEntry(
      |  )
      |  implicit class PackageEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.PackageEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.PackageEntry](_l) {
      |  }
      |  def of(
      |  ): _root_.scala.meta.internal.semanticidx.PackageEntry = _root_.scala.meta.internal.semanticidx.PackageEntry(
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticidx.PackageEntry])
      |}
      |
      |/** @param uri
      |  *   relative URI to semanticdb file containing full information
      |  */
      |@SerialVersionUID(0L)
      |final case class ToplevelEntry(
      |    uri: _root_.scala.Predef.String = ""
      |    ) extends scalapb.GeneratedMessage with scala.meta.internal.semanticidx.Entry.NonEmpty with scalapb.lenses.Updatable[ToplevelEntry] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      
      |      {
      |        val __value = uri
      |        if (!__value.isEmpty) {
      |          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |        }
      |      };
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      {
      |        val __v = uri
      |        if (!__v.isEmpty) {
      |          _output__.writeString(1, __v)
      |        }
      |      };
      |    }
      |    def withUri(__v: _root_.scala.Predef.String): ToplevelEntry = copy(uri = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => {
      |          val __t = uri
      |          if (__t != "") __t else null
      |        }
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PString(uri)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticidx.ToplevelEntry.type = scala.meta.internal.semanticidx.ToplevelEntry
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticidx.ToplevelEntry])
      |}
      |
      |object ToplevelEntry extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.ToplevelEntry] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.ToplevelEntry] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.ToplevelEntry = {
      |    var __uri: _root_.scala.Predef.String = ""
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __uri = _input__.readStringRequireUtf8()
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticidx.ToplevelEntry(
      |        uri = __uri
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.ToplevelEntry] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticidx.ToplevelEntry(
      |        uri = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticidxProto.javaDescriptor.getMessageTypes().get(4)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticidxProto.scalaDescriptor.messages(4)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMe""".stripMargin) + new String(s"""|ssageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticidx.ToplevelEntry(
      |    uri = ""
      |  )
      |  implicit class ToplevelEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.ToplevelEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.ToplevelEntry](_l) {
      |    def uri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.uri)((c_, f_) => c_.copy(uri = f_))
      |  }
      |  final val URI_FIELD_NUMBER = 1
      |  def of(
      |    uri: _root_.scala.Predef.String
      |  ): _root_.scala.meta.internal.semanticidx.ToplevelEntry = _root_.scala.meta.internal.semanticidx.ToplevelEntry(
      |    uri
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticidx.ToplevelEntry])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticidx/Index.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticidx
      |
      |@SerialVersionUID(0L)
      |final case class Index(
      |    entries: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry] = _root_.scala.collection.immutable.Map.empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Index] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      entries.foreach { __item =>
      |        val __value = scala.meta.internal.semanticidx.Index._typemapper_entries.toBase(__item)
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      entries.foreach { __v =>
      |        val __m = scala.meta.internal.semanticidx.Index._typemapper_entries.toBase(__v)
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def clearEntries = copy(entries = _root_.scala.collection.immutable.Map.empty)
      |    def addEntries(__vs: (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry) *): Index = addAllEntries(__vs)
      |    def addAllEntries(__vs: Iterable[(_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)]): Index = copy(entries = entries ++ __vs)
      |    def withEntries(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry]): Index = copy(entries = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => entries.iterator.map(scala.meta.internal.semanticidx.Index._typemapper_entries.toBase(_)).toSeq
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(entries.iterator.map(scala.meta.internal.semanticidx.Index._typemapper_entries.toBase(_).toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticidx.Index.type = scala.meta.internal.semanticidx.Index
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticidx.Index])
      |}
      |
      |object Index extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.Index = {
      |    val __entries: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry]
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __entries += scala.meta.internal.semanticidx.Index._typemapper_entries.toCustom(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticidx.Index.EntriesEntry](_input__))
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticidx.Index(
      |        entries = __entries.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.Index] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticidx.Index(
      |        entries = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticidx.Index.EntriesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(scala.meta.internal.semanticidx.Index._typemapper_entries.toCustom(_)).toMap
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descr""".stripMargin) + new String(s"""|iptors.Descriptor = SemanticidxProto.javaDescriptor.getMessageTypes().get(1)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticidxProto.scalaDescriptor.messages(1)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticidx.Index.EntriesEntry
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      |    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      |      _root_.scala.meta.internal.semanticidx.Index.EntriesEntry
      |    )
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val defaultInstance = scala.meta.internal.semanticidx.Index(
      |    entries = _root_.scala.collection.immutable.Map.empty
      |  )
      |  @SerialVersionUID(0L)
      |  final case class EntriesEntry(
      |      key: _root_.scala.Predef.String = "",
      |      value: scala.meta.internal.semanticidx.Entry = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(scala.meta.internal.semanticidx.EntryMessage.defaultInstance)
      |      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[EntriesEntry] {
      |      @transient
      |      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |      private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |        var __size = 0
      |        
      |        {
      |          val __value = key
      |          if (!__value.isEmpty) {
      |            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      |          }
      |        };
      |        
      |        {
      |          val __value = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(value)
      |          if (__value.serializedSize != 0) {
      |            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |          }
      |        };
      |        __size
      |      }
      |      override def serializedSize: _root_.scala.Int = {
      |        var __size = __serializedSizeMemoized
      |        if (__size == 0) {
      |          __size = __computeSerializedSize() + 1
      |          __serializedSizeMemoized = __size
      |        }
      |        __size - 1
      |        
      |      }
      |      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |        {
      |          val __v = key
      |          if (!__v.isEmpty) {
      |            _output__.writeString(1, __v)
      |          }
      |        };
      |        {
      |          val __v = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(value)
      |          if (__v.serializedSize != 0) {
      |            _output__.writeTag(2, 2)
      |            _output__.writeUInt32NoTag(__v.serializedSize)
      |            __v.writeTo(_output__)
      |          }
      |        };
      |      }
      |      def withKey(__v: _root_.scala.Predef.String): EntriesEntry = copy(key = __v)
      |      def withValue(__v: scala.meta.internal.semanticidx.Entry): EntriesEntry = copy(value = __v)
      |      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |        (__fieldNumber: @_root_.scala.unchecked) match {
      |          case 1 => {
      |            val __t = key
      |            if (__t != "") __t else null
      |          }
      |          case 2 => {
      |            val __t = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(value)
      |            if (__t != scala.meta.internal.semanticidx.EntryMessage.defaultInstance) __t else null
      |          }
      |        }
      |      }
      |      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |        (__field.number: @_root_.scala.unchecked) match {
      |          case 1 => _root_.scalapb.descriptors.PString(key)
      |          case 2 => scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toBase(value).toPMessage
      |        }
      |      }
      |      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |      def companion: scala.meta.internal.semanticidx.Index.EntriesEntry.type = scala.meta.internal.semanticidx.Index.EntriesEntry
      |      // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticidx.Index.EntriesEntry])
      |  }
      |  
      |  object EntriesEntry extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index.EntriesEntry] {
      |    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index.EntriesEntry] = this
      |    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.Index.EntriesEntry = {
      |      var __key: _root_.scala.Predef.String = ""
      |      var __value: _root_.scala.Option[scala.meta.internal.semanticidx.EntryMessage] = _roo""".stripMargin) + new String(s"""|t_.scala.None
      |      var _done__ = false
      |      while (!_done__) {
      |        val _tag__ = _input__.readTag()
      |        _tag__ match {
      |          case 0 => _done__ = true
      |          case 10 =>
      |            __key = _input__.readStringRequireUtf8()
      |          case 18 =>
      |            __value = _root_.scala.Some(__value.fold(_root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticidx.EntryMessage](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
      |          case tag => _input__.skipField(tag)
      |        }
      |      }
      |      scala.meta.internal.semanticidx.Index.EntriesEntry(
      |          key = __key,
      |          value = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(__value.getOrElse(scala.meta.internal.semanticidx.EntryMessage.defaultInstance))
      |      )
      |    }
      |    implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.Index.EntriesEntry] = _root_.scalapb.descriptors.Reads{
      |      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |        scala.meta.internal.semanticidx.Index.EntriesEntry(
      |          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
      |          value = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[scala.meta.internal.semanticidx.EntryMessage]).getOrElse(scala.meta.internal.semanticidx.EntryMessage.defaultInstance))
      |        )
      |      case _ => throw new RuntimeException("Expected PMessage")
      |    }
      |    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = scala.meta.internal.semanticidx.Index.javaDescriptor.getNestedTypes().get(0)
      |    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = scala.meta.internal.semanticidx.Index.scalaDescriptor.nestedMessages(0)
      |    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |      (__number: @_root_.scala.unchecked) match {
      |        case 2 => __out = scala.meta.internal.semanticidx.EntryMessage
      |      }
      |      __out
      |    }
      |    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |    lazy val defaultInstance = scala.meta.internal.semanticidx.Index.EntriesEntry(
      |      key = "",
      |      value = scala.meta.internal.semanticidx.Index.EntriesEntry._typemapper_value.toCustom(scala.meta.internal.semanticidx.EntryMessage.defaultInstance)
      |    )
      |    implicit class EntriesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.Index.EntriesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.Index.EntriesEntry](_l) {
      |      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      |      def value: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.Entry] = field(_.value)((c_, f_) => c_.copy(value = f_))
      |    }
      |    final val KEY_FIELD_NUMBER = 1
      |    final val VALUE_FIELD_NUMBER = 2
      |    @transient
      |    private[semanticidx] val _typemapper_value: _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.EntryMessage, scala.meta.internal.semanticidx.Entry] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.EntryMessage, scala.meta.internal.semanticidx.Entry]]
      |    @transient
      |    implicit val keyValueMapper: _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.Index.EntriesEntry, (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)] =
      |      _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.Index.EntriesEntry, (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)](__m => (__m.key, __m.value))(__p => scala.meta.internal.semanticidx.Index.EntriesEntry(__p._1, __p._2))
      |    def of(
      |      key: _root_.scala.Predef.String,
      |      value: scala.meta.internal.semanticidx.Entry
      |    ): _root_.scala.meta.internal.semanticidx.Index.EntriesEntry = _root_.scala.meta.internal.semanticidx.Index.EntriesEntry(
      |      key,
      |      value
      |    )
      |    // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index.EntriesEntry])
      |  }
      |  
      |  implicit class IndexLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.Index]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.Index](_l) {
      |    def entries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry]] = field(_.entries)((c_, f_) => c_.copy""".stripMargin) + new String(s"""|(entries = f_))
      |  }
      |  final val ENTRIES_FIELD_NUMBER = 1
      |  @transient
      |  private[semanticidx] val _typemapper_entries: _root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.Index.EntriesEntry, (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)] = implicitly[_root_.scalapb.TypeMapper[scala.meta.internal.semanticidx.Index.EntriesEntry, (_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry)]]
      |  def of(
      |    entries: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, scala.meta.internal.semanticidx.Entry]
      |  ): _root_.scala.meta.internal.semanticidx.Index = _root_.scala.meta.internal.semanticidx.Index(
      |    entries
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticidx.Index])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticidx/Indexes.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticidx
      |
      |@SerialVersionUID(0L)
      |final case class Indexes(
      |    indexes: _root_.scala.Seq[scala.meta.internal.semanticidx.Index] = _root_.scala.Seq.empty
      |    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Indexes] {
      |    @transient
      |    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      |    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      |      var __size = 0
      |      indexes.foreach { __item =>
      |        val __value = __item
      |        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      |      }
      |      __size
      |    }
      |    override def serializedSize: _root_.scala.Int = {
      |      var __size = __serializedSizeMemoized
      |      if (__size == 0) {
      |        __size = __computeSerializedSize() + 1
      |        __serializedSizeMemoized = __size
      |      }
      |      __size - 1
      |      
      |    }
      |    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      |      indexes.foreach { __v =>
      |        val __m = __v
      |        _output__.writeTag(1, 2)
      |        _output__.writeUInt32NoTag(__m.serializedSize)
      |        __m.writeTo(_output__)
      |      };
      |    }
      |    def clearIndexes = copy(indexes = _root_.scala.Seq.empty)
      |    def addIndexes(__vs: scala.meta.internal.semanticidx.Index *): Indexes = addAllIndexes(__vs)
      |    def addAllIndexes(__vs: Iterable[scala.meta.internal.semanticidx.Index]): Indexes = copy(indexes = indexes ++ __vs)
      |    def withIndexes(__v: _root_.scala.Seq[scala.meta.internal.semanticidx.Index]): Indexes = copy(indexes = __v)
      |    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      |      (__fieldNumber: @_root_.scala.unchecked) match {
      |        case 1 => indexes
      |      }
      |    }
      |    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      |      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      |      (__field.number: @_root_.scala.unchecked) match {
      |        case 1 => _root_.scalapb.descriptors.PRepeated(indexes.iterator.map(_.toPMessage).toVector)
      |      }
      |    }
      |    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      |    def companion: scala.meta.internal.semanticidx.Indexes.type = scala.meta.internal.semanticidx.Indexes
      |    // @@protoc_insertion_point(GeneratedMessage[scala.meta.internal.semanticidx.Indexes])
      |}
      |
      |object Indexes extends scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Indexes] {
      |  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scala.meta.internal.semanticidx.Indexes] = this
      |  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scala.meta.internal.semanticidx.Indexes = {
      |    val __indexes: _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticidx.Index] = new _root_.scala.collection.immutable.VectorBuilder[scala.meta.internal.semanticidx.Index]
      |    var _done__ = false
      |    while (!_done__) {
      |      val _tag__ = _input__.readTag()
      |      _tag__ match {
      |        case 0 => _done__ = true
      |        case 10 =>
      |          __indexes += _root_.scalapb.LiteParser.readMessage[scala.meta.internal.semanticidx.Index](_input__)
      |        case tag => _input__.skipField(tag)
      |      }
      |    }
      |    scala.meta.internal.semanticidx.Indexes(
      |        indexes = __indexes.result()
      |    )
      |  }
      |  implicit def messageReads: _root_.scalapb.descriptors.Reads[scala.meta.internal.semanticidx.Indexes] = _root_.scalapb.descriptors.Reads{
      |    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      |      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      |      scala.meta.internal.semanticidx.Indexes(
      |        indexes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[scala.meta.internal.semanticidx.Index]]).getOrElse(_root_.scala.Seq.empty)
      |      )
      |    case _ => throw new RuntimeException("Expected PMessage")
      |  }
      |  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SemanticidxProto.javaDescriptor.getMessageTypes().get(0)
      |  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SemanticidxProto.scalaDescriptor.messages(0)
      |  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      |    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      |    (__number: @_root_.scala.unchecked) match {
      |      case 1 => __out = scala.meta.internal.semanticidx.Index
      |    }
      |    __out
      |  }
      |  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      |  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      |  lazy val default""".stripMargin) + new String(s"""|Instance = scala.meta.internal.semanticidx.Indexes(
      |    indexes = _root_.scala.Seq.empty
      |  )
      |  implicit class IndexesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scala.meta.internal.semanticidx.Indexes]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scala.meta.internal.semanticidx.Indexes](_l) {
      |    def indexes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scala.meta.internal.semanticidx.Index]] = field(_.indexes)((c_, f_) => c_.copy(indexes = f_))
      |  }
      |  final val INDEXES_FIELD_NUMBER = 1
      |  def of(
      |    indexes: _root_.scala.Seq[scala.meta.internal.semanticidx.Index]
      |  ): _root_.scala.meta.internal.semanticidx.Indexes = _root_.scala.meta.internal.semanticidx.Indexes(
      |    indexes
      |  )
      |  // @@protoc_insertion_point(GeneratedMessageCompanion[scala.meta.internal.semanticidx.Indexes])
      |}""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("js212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("common"), Some(bleep.model.CrossId("native213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("scala/meta/internal/semanticidx/SemanticidxProto.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = s"""|// Generated by the Scala Plugin for the Protocol Buffer Compiler.
      |// Do not edit!
      |//
      |// Protofile syntax: PROTO3
      |
      |package scala.meta.internal.semanticidx
      |
      |object SemanticidxProto extends _root_.scalapb.GeneratedFileObject {
      |  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
      |    scalapb.options.ScalapbProto
      |  )
      |  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      |    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      |      scala.meta.internal.semanticidx.Indexes,
      |      scala.meta.internal.semanticidx.Index,
      |      scala.meta.internal.semanticidx.EntryMessage,
      |      scala.meta.internal.semanticidx.PackageEntry,
      |      scala.meta.internal.semanticidx.ToplevelEntry
      |    )
      |  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      |      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
      |  ${"\"" * 3}ChFzZW1hbnRpY2lkeC5wcm90bxIfc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2lkeBoVc2NhbGFwYi9zY2FsYXBiLnByb
      |  3RvIlkKB0luZGV4ZXMSTgoHaW5kZXhlcxgBIAMoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNpZHguSW5kZXhCDOI/C
      |  RIHaW5kZXhlc1IHaW5kZXhlcyLeAQoFSW5kZXgSWwoHZW50cmllcxgBIAMoCzIzLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50a
      |  WNpZHguSW5kZXguRW50cmllc0VudHJ5QgziPwkSB2VudHJpZXNSB2VudHJpZXMaeAoMRW50cmllc0VudHJ5EhoKA2tleRgBIAEoC
      |  UII4j8FEgNrZXlSA2tleRJICgV2YWx1ZRgCIAEoCzImLnNjYWxhLm1ldGEuaW50ZXJuYWwuc2VtYW50aWNpZHguRW50cnlCCuI/B
      |  xIFdmFsdWVSBXZhbHVlOgI4ASLrAQoFRW50cnkSZgoMcGFja2FnZUVudHJ5GAEgASgLMi0uc2NhbGEubWV0YS5pbnRlcm5hbC5zZ
      |  W1hbnRpY2lkeC5QYWNrYWdlRW50cnlCEeI/DhIMcGFja2FnZUVudHJ5SABSDHBhY2thZ2VFbnRyeRJqCg10b3BsZXZlbEVudHJ5G
      |  AIgASgLMi4uc2NhbGEubWV0YS5pbnRlcm5hbC5zZW1hbnRpY2lkeC5Ub3BsZXZlbEVudHJ5QhLiPw8SDXRvcGxldmVsRW50cnlIA
      |  FINdG9wbGV2ZWxFbnRyeUIOCgxzZWFsZWRfdmFsdWUiDgoMUGFja2FnZUVudHJ5IisKDVRvcGxldmVsRW50cnkSGgoDdXJpGAEgA
      |  SgJQgjiPwUSA3VyaVIDdXJpQgXiPwJIAGIGcHJvdG8z${"\"" * 3}
      |      ).mkString)
      |  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
      |    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
      |    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
      |  }
      |  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
      |    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
      |    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      |      scalapb.options.ScalapbProto.javaDescriptor
      |    ))
      |  }
      |  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
      |  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
      |}""".stripMargin
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("scalameta-docs"), Some(bleep.model.CrossId("jvm212")))).foreach { crossName =>
      val to = started.buildPaths.generatedResourcesDir(crossName).resolve("mdoc.properties")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|#mdoc properties
      |#Wed Jul 27 02:02:19 CEST 2022
      |in=/Users/oyvind/bleep/snapshot-tests-in/scalameta/docs
      |classpath=/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/scalameta/jvm/target/scala-2.12/classes\\:/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/parsers/jvm/target/scala-2.12/classes\\:/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/trees/jvm/target/scala-2.12/classes\\:/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/common/jvm/target/scala-2.12/classes\\:/Users/oyvind/Library/Caches/Coursier/arc/https/github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_x64_mac_hotspot_8u292b10.tar.gz/jdk8u292-b10/Contents/Home/lib/tools.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.12.16/scala-library-2.12.16.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalameta/mdoc_2.12/2.3.2/mdoc_2.12-2.3.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scalap/2.12.16/scalap-2.12.16.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-compiler/2.12.16/scala-compiler-2.12.16.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalameta/mdoc-runtime_2.12/2.3.2/mdoc-runtime_2.12-2.3.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalameta/mdoc-cli_2.12/2.3.2/mdoc-cli_2.12-2.3.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/googlecode/java-diff-utils/diffutils/1.3.0/diffutils-1.3.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/methvin/directory-watcher/0.15.0/directory-watcher-0.15.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/undertow/undertow-core/2.2.16.Final/undertow-core-2.2.16.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jboss/xnio/xnio-nio/3.8.6.Final/xnio-nio-3.8.6.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/geirsson/metaconfig-typesafe-config_2.12/0.10.0/metaconfig-typesafe-config_2.12-0.10.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/fansi_2.12/0.3.1/fansi_2.12-0.3.1.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/pprint_2.12/0.7.3/pprint_2.12-0.7.3.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-reflect/2.12.16/scala-reflect-2.12.16.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-xml_2.12/1.0.6/scala-xml_2.12-1.0.6.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalameta/mdoc-interfaces/2.3.2/mdoc-interfaces-2.3.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/interface/1.0.6/interface-1.0.6.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-all/0.62.2/flexmark-all-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/net/java/dev/jna/jna/5.7.0/jna-5.7.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jboss/logging/jboss-logging/3.4.1.Final/jboss-logging-3.4.1.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jboss/xnio/xnio-api/3.8.6.Final/xnio-api-3.8.6.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jboss/threads/jboss-threads/3.1.0.Final/jboss-threads-3.1.0.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/geirsson/metaconfig-core_2.12/0.10.0/metaconfig-core_2.12-0.10.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/config/1.4.1/config-1.4.1.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/sourcecode_2.12/0.3.0/sourcecode_2.12-0.3.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalameta/fastparse-v2_2.12/2.3.1/fastparse-v2_2.12-2.3.1.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark/0.62.2/flexmark-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-abbreviation/0.62.2/flexmark-ext-abbreviation-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-admonition/0.62.2/flexmark-ext-admonition-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-anchorlink/0.62.2/flexmark-ext-anchorlink-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2""".stripMargin) + new String(s"""|/com/vladsch/flexmark/flexmark-ext-aside/0.62.2/flexmark-ext-aside-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-attributes/0.62.2/flexmark-ext-attributes-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-autolink/0.62.2/flexmark-ext-autolink-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-definition/0.62.2/flexmark-ext-definition-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-emoji/0.62.2/flexmark-ext-emoji-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-enumerated-reference/0.62.2/flexmark-ext-enumerated-reference-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-escaped-character/0.62.2/flexmark-ext-escaped-character-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-footnotes/0.62.2/flexmark-ext-footnotes-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-gfm-issues/0.62.2/flexmark-ext-gfm-issues-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-gfm-strikethrough/0.62.2/flexmark-ext-gfm-strikethrough-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-gfm-tasklist/0.62.2/flexmark-ext-gfm-tasklist-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-gfm-users/0.62.2/flexmark-ext-gfm-users-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-gitlab/0.62.2/flexmark-ext-gitlab-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-jekyll-front-matter/0.62.2/flexmark-ext-jekyll-front-matter-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-jekyll-tag/0.62.2/flexmark-ext-jekyll-tag-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-media-tags/0.62.2/flexmark-ext-media-tags-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-macros/0.62.2/flexmark-ext-macros-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-ins/0.62.2/flexmark-ext-ins-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-xwiki-macros/0.62.2/flexmark-ext-xwiki-macros-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-superscript/0.62.2/flexmark-ext-superscript-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-tables/0.62.2/flexmark-ext-tables-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-toc/0.62.2/flexmark-ext-toc-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-typographic/0.62.2/flexmark-ext-typographic-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-wikilink/0.62.2/flexmark-ext-wikilink-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-yaml-front-matter/0.62.2/flexmark-ext-yaml-front-matter-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-youtube-embedded/0.62.2/flexmark-ext-youtube-embedded-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-html2md-converter/0.62.2/flexmark-html2md-converter-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-jira-converter/0.62.2/flexmark-jira-converter-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-pdf-converter/0.62.2/flexmark-pdf-converter-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-profile-pegdown/0.62.2/flexmark-profile-pegdown-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-ast/0.62.2/flexmark-util-ast-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-builder/0.62.2/flexma""".stripMargin) + new String(s"""|rk-util-builder-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-collection/0.62.2/flexmark-util-collection-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-data/0.62.2/flexmark-util-data-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-dependency/0.62.2/flexmark-util-dependency-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-format/0.62.2/flexmark-util-format-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-html/0.62.2/flexmark-util-html-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-misc/0.62.2/flexmark-util-misc-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-options/0.62.2/flexmark-util-options-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-sequence/0.62.2/flexmark-util-sequence-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-visitor/0.62.2/flexmark-util-visitor-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-youtrack-converter/0.62.2/flexmark-youtrack-converter-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/wildfly/common/wildfly-common/1.5.4.Final/wildfly-common-1.5.4.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/wildfly/client/wildfly-client-config/1.0.1.Final/wildfly-client-config-1.0.1.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/geirsson/metaconfig-pprint_2.12/0.10.0/metaconfig-pprint_2.12-0.10.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/typelevel/paiges-core_2.12/0.4.2/paiges-core_2.12-0.4.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-collection-compat_2.12/2.7.0/scala-collection-compat_2.12-2.7.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/thesamet/scalapb/scalapb-runtime_2.12/0.11.11/scalapb-runtime_2.12-0.11.11.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/geny_2.12/0.6.5/geny_2.12-0.6.5.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util/0.62.2/flexmark-util-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/nibor/autolink/autolink/0.6.0/autolink-0.6.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jsoup/jsoup/1.11.3/jsoup-1.11.3.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/openhtmltopdf/openhtmltopdf-core/1.0.0/openhtmltopdf-core-1.0.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/openhtmltopdf/openhtmltopdf-pdfbox/1.0.0/openhtmltopdf-pdfbox-1.0.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/openhtmltopdf/openhtmltopdf-rtl-support/1.0.0/openhtmltopdf-rtl-support-1.0.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/openhtmltopdf/openhtmltopdf-jsoup-dom-converter/1.0.0/openhtmltopdf-jsoup-dom-converter-1.0.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jetbrains/annotations/15.0/annotations-15.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/thesamet/scalapb/lenses_2.12/0.11.11/lenses_2.12-0.11.11.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/google/protobuf/protobuf-java/3.19.2/protobuf-java-3.19.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/pdfbox/pdfbox/2.0.16/pdfbox-2.0.16.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/pdfbox/xmpbox/2.0.16/xmpbox-2.0.16.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/de/rototor/pdfbox/graphics2d/0.24/graphics2d-0.24.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/ibm/icu/icu4j/59.1/icu4j-59.1.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/pdfbox/fontbox/2.0.16/fontbox-2.0.16.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.jar\\:/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta-docs/target/scala-2.12/classes
      |out=/Users/oyvind/bleep/snapshot-tests-in/scalameta/website/target/docs
      |SCALA_BINARY_VERSION=2.12
      |scalacOptions=-feature -unchecked -Xplugin\\:/Users/""".stripMargin) + new String(s"""|oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalamacros/paradise_2.12.16/2.1.1/paradise_2.12.16-2.1.1.jar
      |SCALA_VERSION=2.12.16
      |VERSION=4.5.9-SNAPSHOT
      |js-out-prefix=assets""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("scalameta-docs"), Some(bleep.model.CrossId("jvm213")))).foreach { crossName =>
      val to = started.buildPaths.generatedResourcesDir(crossName).resolve("mdoc.properties")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = new String(s"""|#mdoc properties
      |#Wed Jul 27 02:00:52 CEST 2022
      |in=/Users/oyvind/bleep/snapshot-tests-in/scalameta/docs
      |classpath=/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/scalameta/jvm/target/scala-2.13/classes\\:/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/parsers/jvm/target/scala-2.13/classes\\:/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/trees/jvm/target/scala-2.13/classes\\:/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/common/jvm/target/scala-2.13/classes\\:/Users/oyvind/Library/Caches/Coursier/arc/https/github.com/AdoptOpenJDK/openjdk8-binaries/releases/download/jdk8u292-b10/OpenJDK8U-jdk_x64_mac_hotspot_8u292b10.tar.gz/jdk8u292-b10/Contents/Home/lib/tools.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.8/scala-library-2.13.8.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalameta/mdoc_2.13/2.3.2/mdoc_2.13-2.3.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scalap/2.13.8/scalap-2.13.8.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-compiler/2.13.8/scala-compiler-2.13.8.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalameta/mdoc-runtime_2.13/2.3.2/mdoc-runtime_2.13-2.3.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalameta/mdoc-cli_2.13/2.3.2/mdoc-cli_2.13-2.3.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/googlecode/java-diff-utils/diffutils/1.3.0/diffutils-1.3.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/methvin/directory-watcher/0.15.0/directory-watcher-0.15.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/undertow/undertow-core/2.2.16.Final/undertow-core-2.2.16.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jboss/xnio/xnio-nio/3.8.6.Final/xnio-nio-3.8.6.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/slf4j/slf4j-api/1.7.36/slf4j-api-1.7.36.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/geirsson/metaconfig-typesafe-config_2.13/0.10.0/metaconfig-typesafe-config_2.13-0.10.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/fansi_2.13/0.3.1/fansi_2.13-0.3.1.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/pprint_2.13/0.7.3/pprint_2.13-0.7.3.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-reflect/2.13.8/scala-reflect-2.13.8.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jline/jline/3.21.0/jline-3.21.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/net/java/dev/jna/jna/5.9.0/jna-5.9.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalameta/mdoc-interfaces/2.3.2/mdoc-interfaces-2.3.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/io/get-coursier/interface/1.0.6/interface-1.0.6.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-all/0.62.2/flexmark-all-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jboss/logging/jboss-logging/3.4.1.Final/jboss-logging-3.4.1.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jboss/xnio/xnio-api/3.8.6.Final/xnio-api-3.8.6.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jboss/threads/jboss-threads/3.1.0.Final/jboss-threads-3.1.0.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/geirsson/metaconfig-core_2.13/0.10.0/metaconfig-core_2.13-0.10.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/typesafe/config/1.4.1/config-1.4.1.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/sourcecode_2.13/0.3.0/sourcecode_2.13-0.3.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scalameta/fastparse-v2_2.13/2.3.1/fastparse-v2_2.13-2.3.1.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark/0.62.2/flexmark-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-abbreviation/0.62.2/flexmark-ext-abbreviation-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-admonition/0.62.2/flexmark-ext-admonition-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-anchorlink/0.62.2/flexmark-ext-anchorlink-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-as""".stripMargin) + new String(s"""|ide/0.62.2/flexmark-ext-aside-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-attributes/0.62.2/flexmark-ext-attributes-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-autolink/0.62.2/flexmark-ext-autolink-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-definition/0.62.2/flexmark-ext-definition-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-emoji/0.62.2/flexmark-ext-emoji-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-enumerated-reference/0.62.2/flexmark-ext-enumerated-reference-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-escaped-character/0.62.2/flexmark-ext-escaped-character-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-footnotes/0.62.2/flexmark-ext-footnotes-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-gfm-issues/0.62.2/flexmark-ext-gfm-issues-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-gfm-strikethrough/0.62.2/flexmark-ext-gfm-strikethrough-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-gfm-tasklist/0.62.2/flexmark-ext-gfm-tasklist-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-gfm-users/0.62.2/flexmark-ext-gfm-users-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-gitlab/0.62.2/flexmark-ext-gitlab-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-jekyll-front-matter/0.62.2/flexmark-ext-jekyll-front-matter-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-jekyll-tag/0.62.2/flexmark-ext-jekyll-tag-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-media-tags/0.62.2/flexmark-ext-media-tags-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-macros/0.62.2/flexmark-ext-macros-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-ins/0.62.2/flexmark-ext-ins-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-xwiki-macros/0.62.2/flexmark-ext-xwiki-macros-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-superscript/0.62.2/flexmark-ext-superscript-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-tables/0.62.2/flexmark-ext-tables-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-toc/0.62.2/flexmark-ext-toc-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-typographic/0.62.2/flexmark-ext-typographic-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-wikilink/0.62.2/flexmark-ext-wikilink-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-yaml-front-matter/0.62.2/flexmark-ext-yaml-front-matter-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-ext-youtube-embedded/0.62.2/flexmark-ext-youtube-embedded-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-html2md-converter/0.62.2/flexmark-html2md-converter-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-jira-converter/0.62.2/flexmark-jira-converter-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-pdf-converter/0.62.2/flexmark-pdf-converter-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-profile-pegdown/0.62.2/flexmark-profile-pegdown-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-ast/0.62.2/flexmark-util-ast-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-builder/0.62.2/flexmark-util-builder-0.62.2.jar\\:/Users/o""".stripMargin) + new String(s"""|yvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-collection/0.62.2/flexmark-util-collection-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-data/0.62.2/flexmark-util-data-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-dependency/0.62.2/flexmark-util-dependency-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-format/0.62.2/flexmark-util-format-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-html/0.62.2/flexmark-util-html-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-misc/0.62.2/flexmark-util-misc-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-options/0.62.2/flexmark-util-options-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-sequence/0.62.2/flexmark-util-sequence-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util-visitor/0.62.2/flexmark-util-visitor-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-youtrack-converter/0.62.2/flexmark-youtrack-converter-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/wildfly/common/wildfly-common/1.5.4.Final/wildfly-common-1.5.4.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/wildfly/client/wildfly-client-config/1.0.1.Final/wildfly-client-config-1.0.1.Final.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/geirsson/metaconfig-pprint_2.13/0.10.0/metaconfig-pprint_2.13-0.10.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/typelevel/paiges-core_2.13/0.4.2/paiges-core_2.13-0.4.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/modules/scala-collection-compat_2.13/2.7.0/scala-collection-compat_2.13-2.7.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/thesamet/scalapb/scalapb-runtime_2.13/0.11.11/scalapb-runtime_2.13-0.11.11.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/lihaoyi/geny_2.13/0.6.5/geny_2.13-0.6.5.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/vladsch/flexmark/flexmark-util/0.62.2/flexmark-util-0.62.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/nibor/autolink/autolink/0.6.0/autolink-0.6.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jsoup/jsoup/1.11.3/jsoup-1.11.3.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/openhtmltopdf/openhtmltopdf-core/1.0.0/openhtmltopdf-core-1.0.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/openhtmltopdf/openhtmltopdf-pdfbox/1.0.0/openhtmltopdf-pdfbox-1.0.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/openhtmltopdf/openhtmltopdf-rtl-support/1.0.0/openhtmltopdf-rtl-support-1.0.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/openhtmltopdf/openhtmltopdf-jsoup-dom-converter/1.0.0/openhtmltopdf-jsoup-dom-converter-1.0.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/jetbrains/annotations/15.0/annotations-15.0.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/thesamet/scalapb/lenses_2.13/0.11.11/lenses_2.13-0.11.11.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/google/protobuf/protobuf-java/3.19.2/protobuf-java-3.19.2.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/pdfbox/pdfbox/2.0.16/pdfbox-2.0.16.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/pdfbox/xmpbox/2.0.16/xmpbox-2.0.16.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/de/rototor/pdfbox/graphics2d/0.24/graphics2d-0.24.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/com/ibm/icu/icu4j/59.1/icu4j-59.1.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/pdfbox/fontbox/2.0.16/fontbox-2.0.16.jar\\:/Users/oyvind/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/commons-logging/commons-logging/1.2/commons-logging-1.2.jar\\:/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta-docs/target/scala-2.13/classes
      |out=/Users/oyvind/bleep/snapshot-tests-in/scalameta/website/target/docs
      |SCALA_BINARY_VERSION=2.13
      |scalacOptions=-Ymacro-annotations -feature -unchecked
      |SCALA_VERSION=2.13.8
      |VERSION=4.5.9-""".stripMargin) + new String(s"""|SNAPSHOT
      |js-out-prefix=assets""".stripMargin)
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("scalameta-docs"), Some(bleep.model.CrossId("jvm213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("scalameta-docs"), Some(bleep.model.CrossId("jvm212")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("sbt-buildinfo/BuildInfo.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = s"""|// $$COVERAGE-OFF$$
      |package docs
      |
      |/** This object was generated by sbt-buildinfo. */
      |case object BuildInfo {
      |  /** The value is "CrossProject(js = Project(id scalametaJS, base: scalameta/scalameta/js, dependencies: List(ClasspathDependency(LocalProject(parsersJS),None)), plugins: List(org.scalajs.sbtplugin.ScalaJSPlugin)),jvm = Project(id scalametaJVM, base: scalameta/scalameta/jvm, dependencies: List(ClasspathDependency(LocalProject(parsersJVM),None)), plugins: List(<none>)),native = Project(id scalametaNative, base: scalameta/scalameta/native, dependencies: List(ClasspathDependency(LocalProject(parsersNative),None)), plugins: List(scala.scalanative.sbtplugin.ScalaNativePlugin)))". */
      |  val scalameta = "CrossProject(js = Project(id scalametaJS, base: scalameta/scalameta/js, dependencies: List(ClasspathDependency(LocalProject(parsersJS),None)), plugins: List(org.scalajs.sbtplugin.ScalaJSPlugin)),jvm = Project(id scalametaJVM, base: scalameta/scalameta/jvm, dependencies: List(ClasspathDependency(LocalProject(parsersJVM),None)), plugins: List(<none>)),native = Project(id scalametaNative, base: scalameta/scalameta/native, dependencies: List(ClasspathDependency(LocalProject(parsersNative),None)), plugins: List(scala.scalanative.sbtplugin.ScalaNativePlugin)))"
      |  override val toString: String = {
      |    "scalameta: %s".format(
      |      scalameta
      |    )
      |  }
      |}
      |// $$COVERAGE-ON$$""".stripMargin
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("tests"), Some(bleep.model.CrossId("jvm211")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("sbt-buildinfo/BuildInfo.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = s"""|// $$COVERAGE-OFF$$
      |package scala.meta.tests
      |
      |/** This object was generated by sbt-buildinfo. */
      |case object BuildInfo {
      |  /** The value is "2.11.12". */
      |  val scalaVersion: String = "2.11.12"
      |  /** The value is "2.12.16". */
      |  val latestScala212Version: String = "2.12.16"
      |  /** The value is "/Users/oyvind/bleep/snapshot-tests-in/scalameta". */
      |  val databaseSourcepath: String = "/Users/oyvind/bleep/snapshot-tests-in/scalameta"
      |  /** The value is "/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/common/jvm/target/scala-2.11/classes". */
      |  val commonJVMClassDirectory: String = "/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/common/jvm/target/scala-2.11/classes"
      |  /** The value is "/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/target/scala-2.11/classes". */
      |  val databaseClasspath: String = "/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/target/scala-2.11/classes"
      |  /** The value is scala.collection.immutable.Seq(new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala-2.11"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala-2"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/java"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/protobuf"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/target/scala-2.11/src_managed/main")). */
      |  val integrationSourceDirectories: scala.collection.immutable.Seq[java.io.File] = scala.collection.immutable.Seq(new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala-2.11"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala-2"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/java"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/protobuf"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/target/scala-2.11/src_managed/main"))
      |  override val toString: String = {
      |    "scalaVersion: %s, latestScala212Version: %s, databaseSourcepath: %s, commonJVMClassDirectory: %s, databaseClasspath: %s, integrationSourceDirectories: %s".format(
      |      scalaVersion, latestScala212Version, databaseSourcepath, commonJVMClassDirectory, databaseClasspath, integrationSourceDirectories
      |    )
      |  }
      |}
      |// $$COVERAGE-ON$$""".stripMargin
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("tests"), Some(bleep.model.CrossId("native212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("tests"), Some(bleep.model.CrossId("jvm212"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("tests"), Some(bleep.model.CrossId("js212")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("sbt-buildinfo/BuildInfo.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = s"""|// $$COVERAGE-OFF$$
      |package scala.meta.tests
      |
      |/** This object was generated by sbt-buildinfo. */
      |case object BuildInfo {
      |  /** The value is "2.12.16". */
      |  val scalaVersion: String = "2.12.16"
      |  /** The value is "2.12.16". */
      |  val latestScala212Version: String = "2.12.16"
      |  /** The value is "/Users/oyvind/bleep/snapshot-tests-in/scalameta". */
      |  val databaseSourcepath: String = "/Users/oyvind/bleep/snapshot-tests-in/scalameta"
      |  /** The value is "/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/common/jvm/target/scala-2.12/classes". */
      |  val commonJVMClassDirectory: String = "/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/common/jvm/target/scala-2.12/classes"
      |  /** The value is "/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/target/scala-2.12/classes". */
      |  val databaseClasspath: String = "/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/target/scala-2.12/classes"
      |  /** The value is scala.collection.immutable.Seq(new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala-2.12"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala-2"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/java"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/protobuf"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/target/scala-2.12/src_managed/main")). */
      |  val integrationSourceDirectories: scala.collection.immutable.Seq[java.io.File] = scala.collection.immutable.Seq(new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala-2.12"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala-2"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/java"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/protobuf"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/target/scala-2.12/src_managed/main"))
      |  override val toString: String = {
      |    "scalaVersion: %s, latestScala212Version: %s, databaseSourcepath: %s, commonJVMClassDirectory: %s, databaseClasspath: %s, integrationSourceDirectories: %s".format(
      |      scalaVersion, latestScala212Version, databaseSourcepath, commonJVMClassDirectory, databaseClasspath, integrationSourceDirectories
      |    )
      |  }
      |}
      |// $$COVERAGE-ON$$""".stripMargin
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }



    Vector(
      bleep.model.CrossProjectName(bleep.model.ProjectName("tests"), Some(bleep.model.CrossId("native213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("tests"), Some(bleep.model.CrossId("js213"))),
        bleep.model.CrossProjectName(bleep.model.ProjectName("tests"), Some(bleep.model.CrossId("jvm213")))).foreach { crossName =>
      val to = started.buildPaths.generatedSourcesDir(crossName).resolve("sbt-buildinfo/BuildInfo.scala")
      started.logger.withContext(crossName).warn(s"Writing $to")
      val content = s"""|// $$COVERAGE-OFF$$
      |package scala.meta.tests
      |
      |/** This object was generated by sbt-buildinfo. */
      |case object BuildInfo {
      |  /** The value is "2.13.8". */
      |  val scalaVersion: String = "2.13.8"
      |  /** The value is "2.12.16". */
      |  val latestScala212Version: String = "2.12.16"
      |  /** The value is "/Users/oyvind/bleep/snapshot-tests-in/scalameta". */
      |  val databaseSourcepath: String = "/Users/oyvind/bleep/snapshot-tests-in/scalameta"
      |  /** The value is "/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/common/jvm/target/scala-2.13/classes". */
      |  val commonJVMClassDirectory: String = "/Users/oyvind/bleep/snapshot-tests-in/scalameta/scalameta/common/jvm/target/scala-2.13/classes"
      |  /** The value is "/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/target/scala-2.13/classes". */
      |  val databaseClasspath: String = "/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/target/scala-2.13/classes"
      |  /** The value is scala.collection.immutable.Seq(new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala-2.13"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala-2"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/java"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/protobuf"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/target/scala-2.13/src_managed/main")). */
      |  val integrationSourceDirectories: scala.collection.immutable.Seq[java.io.File] = scala.collection.immutable.Seq(new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala-2.13"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/scala-2"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/java"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/src/main/protobuf"), new java.io.File("/Users/oyvind/bleep/snapshot-tests-in/scalameta/semanticdb/integration/target/scala-2.13/src_managed/main"))
      |  override val toString: String = {
      |    "scalaVersion: %s, latestScala212Version: %s, databaseSourcepath: %s, commonJVMClassDirectory: %s, databaseClasspath: %s, integrationSourceDirectories: %s".format(
      |      scalaVersion, latestScala212Version, databaseSourcepath, commonJVMClassDirectory, databaseClasspath, integrationSourceDirectories
      |    )
      |  }
      |}
      |// $$COVERAGE-ON$$""".stripMargin
      Files.createDirectories(to.getParent)
      Files.writeString(to, content)
    }

  }
}