
package scripts

import bleep.{BleepCodegenScript, Commands, Started}

import java.nio.file.Files

object GenerateForBench extends BleepCodegenScript("GenerateForBench") {
  override def run(started: Started, commands: Commands, targets: List[Target], args: List[String]): Unit = {
    started.logger.error("This script is a placeholder! You'll need to replace the contents with code which actually generates the files you want")

    targets.foreach { target =>
      if (Set("bench@jvm211", "bench@jvm212", "bench@jvm213").contains(target.project.value)) {
        val to = target.sources.resolve("sbt-buildinfo/BuildInfo.scala")
        started.logger.withContext(target.project).warn(s"Writing $to")
        val content = s"""|// $$COVERAGE-OFF$$
      |package scala.meta.internal.bench
      |
      |/** This object was generated by sbt-buildinfo. */
      |case object BuildInfo {
      |  /** The value is new java.io.File("<BLEEP_GIT>/snapshot-tests/scalameta/sbt-build"). */
      |  val sourceroot: java.io.File = new java.io.File("<BLEEP_GIT>/snapshot-tests/scalameta/sbt-build")
      |  override val toString: String = {
      |    "sourceroot: %s".format(
      |      sourceroot
      |    )
      |  }
      |}
      |// $$COVERAGE-ON$$""".stripMargin
        Files.createDirectories(to.getParent)
        Files.writeString(to, content)
      }
    }

  }
}