package bleep
package internal

import bloop.config.Config
import coursier.core.{Classifier, Configuration, Dependency, ModuleName, Organization, Project, Publication}
import coursier.{Module, Resolve}

import java.net.URI
import java.nio.file.{Files, Path, Paths}
import scala.jdk.CollectionConverters._

object importBloopFilesFromSbt {
  // I'm sure there is a useful difference, but it completely escapes me.
  val DefaultConfigs: Set[Configuration] =
    Set(Configuration.empty, Configuration.compile, Configuration.default, Configuration.defaultCompile)

  // These correspond to the suffixes generated by the sbt-cross plugin
  val Suffixes = Set("JS", "JVM", "Native", "3", "2_13", "2_12", "2_11")

  def projectName(name: String): model.ProjectName = {
    var ret = name
    var isTest = false
    if (ret.endsWith("-test")) {
      ret = ret.dropRight("-test".length)
      isTest = true
    }

    var continue = true
    while (continue) {
      continue = false
      Suffixes.foreach { s =>
        if (ret.endsWith(s)) {
          continue = true
          ret = ret.dropRight(s.length)
        }
      }
    }

    model.ProjectName(if (isTest) s"$ret-test" else ret)
  }

  def apply(buildPaths: BuildPaths, bloopFiles: Iterable[Config.File]): ExplodedBuild = {

    val crossBloopProjectFiles: Map[model.CrossProjectName, Config.File] =
      bloopFiles
        .map { file =>
          val maybeBinVersion = file.project.scala.map(s => Versions.Scala(s.version).binVersion.replace(".", ""))
          val maybePlatformId = file.project.platform.map(_.name)
          val maybeCrossId =
            (maybePlatformId, maybeBinVersion) match {
              case (Some(platformId), Some(binVersion)) => Some(model.CrossId(s"$platformId$binVersion"))
              case (Some(platformId), None)             => Some(model.CrossId(platformId))
              case (None, Some(binVersion))             => Some(model.CrossId(binVersion))
              case (None, None)                         => None
            }
          val name = projectName(file.project.name)

          (model.CrossProjectName(name, maybeCrossId), file)
        }
        .toMap
        .filter { case (_, bloopFile) =>
          def isSource(path: Path): Boolean =
            path.toString match {
              case p if p.endsWith(".scala") => true
              case p if p.endsWith(".java")  => true
              case _                         => false
            }
          def hasFiles(path: Path): Boolean =
            Files.exists(path) && Files.walk(path).filter(isSource).findFirst().isPresent

          (bloopFile.project.sources ++ bloopFile.project.resources.getOrElse(Nil)) exists hasFiles
        }

    val pomReader = CachingPomReader()

    val projectNames = crossBloopProjectFiles.keys.map(_.name).toSet

    val projects = crossBloopProjectFiles.map { case (crossName, bloopFile) =>
      val bloopProject = bloopFile.project

      val directory =
        if (bloopProject.directory.startsWith(buildPaths.buildDir / ".sbt/matrix")) {
          def inferDirectory(sources: List[Path]) = {
            val src = Paths.get("src")
            def aboveSrc(p: Path): Option[Path] =
              if (p == null) None
              else if (p.getFileName == src) Some(p.getParent)
              else aboveSrc(p.getParent)

            sources.flatMap(aboveSrc).groupBy(identity).maxBy(_._2.length)._1
          }

          inferDirectory(bloopProject.sources)

        } else bloopProject.directory

      val folder: Option[RelPath] =
        RelPath.relativeTo(buildPaths.buildDir, directory) match {
          case RelPath(List(crossName.name.value)) => None
          case relPath                             => Some(relPath)
        }

      val dependsOn: JsonSet[model.ProjectName] =
        JsonSet.fromIterable(bloopProject.dependencies.map(projectName).filter(projectNames))

      val scalaVersion: Option[Versions.Scala] =
        bloopProject.scala.map(s => Versions.Scala(s.version))

      val replacementsDirs = Replacements.paths(buildPaths.buildDir, directory)
      val replacementsVersions = Replacements.versions(scalaVersion, bloopProject.platform.map(_.name))
      val replacements = replacementsDirs ++ replacementsVersions

      val isTest = crossName.name.value.endsWith("-test")
      val scope = if (isTest) "test" else "main"

      val (sourceLayout, sources, resources) = {
        val sourcesRelPaths: JsonSet[RelPath] =
          JsonSet.fromIterable(bloopProject.sources.map(absoluteDir => RelPath.relativeTo(directory, absoluteDir)))

        val resourcesRelPaths: JsonSet[RelPath] =
          JsonSet.fromIterable(bloopProject.resources.getOrElse(Nil).map(absoluteDir => RelPath.relativeTo(directory, absoluteDir)))

        val inferredSourceLayout: SourceLayout =
          SourceLayout.All.values.maxBy { layout =>
            val fromLayout = layout.sources(scalaVersion, Some(scope))
            val fromProject = sourcesRelPaths
            val matching = fromLayout.intersect(fromProject).size
            val notMatching = fromLayout.removeAll(fromProject).size
            (matching, -notMatching)
          }

        val shortenedSources =
          sourcesRelPaths
            .filterNot(inferredSourceLayout.sources(scalaVersion, Some(scope)))
            .map(replacementsVersions.templatize.relPath)

        val shortenedResources =
          resourcesRelPaths
            .filterNot(inferredSourceLayout.resources(scalaVersion, Some(scope)))
            .map(replacementsVersions.templatize.relPath)

        (inferredSourceLayout, shortenedSources, shortenedResources)
      }

      val resolution = bloopProject.resolution
        .getOrElse(sys.error(s"Expected bloop file for ${crossName.value} to have resolution"))

      val configuredPlatform: Option[model.Platform] =
        bloopProject.platform.map(translatePlatform(_, replacements))

      val versions: ScalaVersions =
        ScalaVersions.fromExplodedScalaAndPlatform(scalaVersion, configuredPlatform) match {
          case Left(err)    => throw new BuildException.Text(crossName, err)
          case Right(value) => value
        }

      val dependencies: List[Dep] = {
        val parsed: List[(Config.Module, ParsedDependency)] =
          resolution.modules.map(bloopMod => (bloopMod, ParsedDependency.of(pomReader, versions, bloopMod)))

        val allDepsWithVersions: Map[Module, List[String]] =
          parsed
            .flatMap { case (_, ParsedDependency(_, deps)) =>
              deps.collect { case (conf, d) if DefaultConfigs(conf) => d.moduleVersion }
            }
            .groupMap { case (m, _) => m } { case (_, v) => v }

        // the sbt bloop import drops for instance dependencies on other projects test artifacts.
        // make a token effort to recover them here
        val lostInTranslation: Map[Path, List[Path]] = {
          val allPathsFromResolution = resolution.modules.flatMap(_.artifacts).map(_.path).toSet
          bloopProject.classpath
            .filter(FileUtils.isJarFileName)
            .filterNot(allPathsFromResolution)
            .groupBy(_.getParent)
        }

        parsed.flatMap { case (bloopMod, ParsedDependency(bleepDep, _)) =>
          bleepDep.dependency(versions) match {
            case Left(err)          => throw new BuildException.Text(crossName, err)
            case Right(coursierDep) =>
              // only keep those not referenced by another dependency
              val keepMain: Boolean =
                allDepsWithVersions.get(coursierDep.module) match {
                  case Some(inheritedVersions) =>
                    // todo: would be better to keep if dep.version > inheritedVersions, but would need to parse semver for that. this is good enough
                    !inheritedVersions.contains(coursierDep.version)
                  case None => true
                }

              val main: List[Dep] =
                if (keepMain) List(bleepDep) else Nil

              val extraClassifiers: List[Dep] =
                bloopMod.artifacts.headOption match {
                  case Some(a) =>
                    lostInTranslation.getOrElse(a.path.getParent, Nil).flatMap { lostJar =>
                      // ~/.cache/coursier/v1/https/repo1.maven.org/maven2/com/twitter/finatra-http_2.13/21.2.0/finatra-http_2.13-21.2.0-tests.jar
                      lostJar.toString.lastIndexOf(bloopMod.version) match {
                        case -1 => None
                        case n =>
                          val classifier = Classifier(lostJar.toString.drop(n + bloopMod.version.length + 1).dropRight(".jar".length))
                          val publication = Publication(bleepDep.publication.name, bleepDep.publication.`type`, bleepDep.publication.ext, classifier)
                          bleepDep match {
                            case x: Dep.JavaDependency  => Some(x.copy(publication = publication))
                            case x: Dep.ScalaDependency => Some(x.copy(publication = publication))
                          }
                      }
                    }

                  case None => Nil
                }

              main ++ extraClassifiers
          }
        }
      }

      val configuredJava: Option[model.Java] =
        bloopProject.java.map(translateJava(replacements))

      val configuredScala: Option[model.Scala] =
        bloopProject.scala.map { bloopScala =>
          versions match {
            case ScalaVersions.Java =>
              throw new BuildException.Text(crossName, "Need a scala version to import scala project")
            case withScala: ScalaVersions.WithScala =>
              translateScala(withScala, pomReader, replacementsDirs, replacementsVersions, configuredPlatform)(bloopScala)
          }
        }

      val testFrameworks: JsonSet[model.TestFrameworkName] =
        if (isTest) JsonSet.fromIterable(bloopProject.test.toList.flatMap(_.frameworks).flatMap(_.names).map(model.TestFrameworkName.apply))
        else JsonSet.empty

      crossName -> model.Project(
        `extends` = JsonList.empty,
        cross = JsonMap.empty,
        folder = folder,
        dependsOn = dependsOn,
        sources = sources,
        resources = resources,
        dependencies = JsonSet.fromIterable(dependencies),
        java = configuredJava,
        scala = configuredScala,
        platform = configuredPlatform,
        `source-layout` = Some(sourceLayout),
        `sbt-scope` = Some(scope),
        testFrameworks = testFrameworks
      )
    }

    val buildResolvers: JsonSet[URI] =
      JsonSet.fromIterable(
        crossBloopProjectFiles
          .flatMap { case (projectName, bloopFile) =>
            bloopFile.project.resolution
              .getOrElse(sys.error(s"Expected bloop file for ${projectName.value} to have resolution"))
              .modules
              .flatMap { mod =>
                val initialOrg = Paths.get(mod.organization.split("\\.").head)
                val uriFragments = mod.artifacts.head.path.iterator().asScala.dropWhile(_ != Paths.get("https")).drop(1).takeWhile(_ != initialOrg)
                if (uriFragments.isEmpty) None
                else Some(URI.create(uriFragments.map(_.toString).mkString("https://", "/", "")))
              }
          }
          .filterNot(_ == Defaults.MavenCentral)
      )

    ExplodedBuild(Map.empty, Map.empty, resolvers = buildResolvers, projects, Map.empty)
  }

  case class ParsedDependency(dep: Dep, directDeps: Seq[(Configuration, Dependency)])

  object ParsedDependency {
    case class Variant(needsScala: Boolean, fullCrossVersion: Boolean, forceJvm: Boolean, for3Use213: Boolean, for213Use3: Boolean)

    val ScalaVariants = List(
      Variant(needsScala = true, fullCrossVersion = false, forceJvm = false, for3Use213 = false, for213Use3 = false),
      Variant(needsScala = true, fullCrossVersion = false, forceJvm = false, for3Use213 = false, for213Use3 = true),
      Variant(needsScala = true, fullCrossVersion = false, forceJvm = false, for3Use213 = true, for213Use3 = false),
      Variant(needsScala = true, fullCrossVersion = false, forceJvm = true, for3Use213 = false, for213Use3 = false),
      Variant(needsScala = true, fullCrossVersion = false, forceJvm = true, for3Use213 = false, for213Use3 = true),
      Variant(needsScala = true, fullCrossVersion = false, forceJvm = true, for3Use213 = true, for213Use3 = false),
      Variant(needsScala = true, fullCrossVersion = true, forceJvm = false, for3Use213 = false, for213Use3 = false),
      Variant(needsScala = true, fullCrossVersion = true, forceJvm = true, for3Use213 = false, for213Use3 = false)
    )

    def of(pomReader: CachingPomReader, versions: ScalaVersions, mod: Config.Module): ParsedDependency = {
      val variantBySuffix: List[(String, Variant)] =
        ScalaVariants
          .flatMap { case v @ Variant(needsScala, needsFullCrossVersion, forceJvm, for3Use213, for213use3) =>
            versions.fullSuffix(needsScala, needsFullCrossVersion, forceJvm, for3Use213, for213use3).map(s => (s, v))
          }
          .sortBy(-_._1.length) // longest suffix first

      val chosen = variantBySuffix.collectFirst { case (suffix, variant) if mod.name.endsWith(suffix) => (mod.name.dropRight(suffix.length), variant) }

      val bleepDep: Dep = chosen match {
        case None =>
          Dep.Java(mod.organization, mod.name, mod.version)
        case Some((modName, scalaVariant)) =>
          Dep.ScalaDependency(
            Organization(mod.organization),
            ModuleName(modName),
            mod.version,
            fullCrossVersion = scalaVariant.fullCrossVersion,
            forceJvm = scalaVariant.forceJvm,
            for3Use213 = scalaVariant.for3Use213,
            for213Use3 = scalaVariant.for213Use3
          )
      }

      val dependencies: Seq[(Configuration, Dependency)] =
        mod.artifacts
          .collectFirst {
            case a if a.classifier.isEmpty =>
              val pomPath = findPomPath(a.path)
              val maybeReadProject: Option[Project] =
                pomReader(pomPath) match {
                  case Right(project)
                      // this means the version is set in a parent POM. there may also be templating involved. Let's defer to coursier for that.
                      if !project.dependencies.exists { case (_, dep) => dep.version == "" } =>
                    Some(project)
                  case _ => None
                }

              maybeReadProject match {
                case Some(project) => project.dependencies
                case None          =>
                  // slow path
                  val dep = Dependency(Module(Organization(mod.organization), ModuleName(mod.name)), mod.version)
                  val resolved = Resolve().addDependencies(dep).run()
                  resolved.dependencies.toList.collect {
                    case d if d.moduleVersion != dep.moduleVersion => (d.configuration, d)
                  }
              }
          }
          .getOrElse(Nil)

      ParsedDependency(bleepDep, dependencies)
    }
  }

  private def findPomPath(jar: Path) = {
    val isIvy = jar.getParent.getFileName.toString == "jars"

    if (isIvy)
      jar.getParent.getParent / "poms" / jar.getFileName.toString.replace(".jar", ".pom")
    else
      jar.getParent / jar.getFileName.toString.replace(".jar", ".pom")
  }

  def translateJava(templateDirs: Replacements)(java: Config.Java): model.Java =
    model.Java(options = Options.parse(java.options, Some(templateDirs)))

  def translatePlatform(platform: Config.Platform, templateDirs: Replacements): model.Platform =
    platform match {
      case Config.Platform.Js(config, mainClass) =>
        val translatedPlatform = model.Platform.Js(
          jsVersion = Some(config.version).filterNot(_.isEmpty).map(Versions.ScalaJs),
          jsMode = Some(config.mode),
          jsKind = Some(config.kind),
          jsEmitSourceMaps = Some(config.emitSourceMaps),
          jsJsdom = config.jsdom,
//          output = config.output.map(output => RelPath.relativeTo(directory, output)),
          jsMainClass = mainClass
        )
        translatedPlatform
      case Config.Platform.Jvm(config, mainClass, runtimeConfig, classpath @ _, resources @ _) =>
        val translatedPlatform = model.Platform.Jvm(
          jvmOptions = Options.parse(config.options, Some(templateDirs)),
          mainClass,
          jvmRuntimeOptions = runtimeConfig.map(rc => Options.parse(rc.options, Some(templateDirs))).getOrElse(Options.empty)
        )
        translatedPlatform
      case Config.Platform.Native(config, mainClass) =>
        val translatedPlatform = model.Platform.Native(
          nativeVersion = Some(Versions.ScalaNative(config.version)),
          nativeMode = Some(config.mode),
          nativeGc = Some(config.gc),
          nativeMainClass = mainClass
        )
        translatedPlatform
    }

  def translateScala(
      versions: ScalaVersions.WithScala,
      pomReader: CachingPomReader,
      replacementsDirs: Replacements,
      replacementsVersions: Replacements,
      platform: Option[model.Platform]
  )(s: Config.Scala): model.Scala = {
    val options = Options.parse(s.options, Some(replacementsDirs))

    val (plugins, rest) = options.values.partition {
      case Options.Opt.Flag(name) if name.startsWith(Defaults.ScalaPluginPrefix) => true
      case _                                                                     => false
    }

    val compilerPlugins = plugins.collect { case Options.Opt.Flag(pluginStr) =>
      val jarPath = Paths.get(pluginStr.dropWhile(_ != '/'))
      val pomPath = findPomPath(jarPath)
      val Right(pom) = pomReader(pomPath)
      ParsedDependency.of(pomReader, versions.asJvm, Config.Module(pom.module.organization.value, pom.module.name.value, pom.version, None, Nil)).dep
    }

    val filteredCompilerPlugins =
      platform.flatMap(_.compilerPlugin).foldLeft(compilerPlugins) { case (all, fromPlatform) =>
        all.filterNot(_ == fromPlatform)
      }

    model.Scala(
      version = Some(Versions.Scala(s.version)),
      options = replacementsVersions.templatize.opts(new Options(rest)),
      setup = s.setup.map(setup =>
        model.CompileSetup(
          order = Some(setup.order),
          addLibraryToBootClasspath = Some(setup.addLibraryToBootClasspath),
          addCompilerToClasspath = Some(setup.addCompilerToClasspath),
          addExtraJarsToClasspath = Some(setup.addExtraJarsToClasspath),
          manageBootClasspath = Some(setup.manageBootClasspath),
          filterLibraryFromClasspath = Some(setup.filterLibraryFromClasspath)
        )
      ),
      compilerPlugins = JsonSet.fromIterable(filteredCompilerPlugins)
    )
  }
}
